<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>e.printStackTrace(); // Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://e.printstacktrace.blog/"/>
  <updated>2019-02-15T02:10:39.000Z</updated>
  <id>https://e.printstacktrace.blog/</id>
  
  <author>
    <name>Szymon Stepniak</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ratpack on GraalVM - how to start?</title>
    <link href="https://e.printstacktrace.blog/ratpack-graalvm-how-to-start/"/>
    <id>https://e.printstacktrace.blog/ratpack-graalvm-how-to-start/</id>
    <published>2019-02-15T02:10:39.000Z</published>
    <updated>2019-02-15T02:10:39.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>The journey inside the exciting world of <a href="https://www.graalvm.org/" target="_blank" rel="noopener">GraalVM</a> continues. Today I would like to share with you results of running <a href="https://ratpack.io/" target="_blank" rel="noopener">Ratpack</a> on GraalVM experiment. You are going to learn how to build a native binary of a simple "Hello, World!" Ratpack application. In the end we are going to run some benchmarks to see if running GraalVM executable produces better results than running JAR on a regular Oracle JDK.</p></div><a id="more"></a><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">The source code of <em>ratpack-graalvm-demo</em> application can be found here <a href="https://github.com/wololock/ratpack-graalvm-demo" target="_blank" rel="noopener">wololock/ratpack-graalvm-demo</a></td></tr></table></div><div class="sect1"><h2>Prerequisites</h2><div class="sectionbody"><div class="paragraph"><p>Below you can find information about the GraalVM and Ratpack versions I used in the experiment:</p></div><div class="ulist"><ul><li><p><strong>GraalVM</strong> 1.0.0-RC12 (the most recent version available while writing this blog post)</p></li><li><p><strong>Ratpack</strong> 1.6.0</p></li></ul></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">Don&#8217;t know how to install GraalVM on your machine? With SDKMAN! installing GraalVM is as easy as executing the following command in the console <code>sdk install java 1.0.0-rc-13-grl</code>.</td></tr></table></div></div></div><div class="sect1"><h2>Hello World application</h2><div class="sectionbody"><div class="paragraph"><p>We start the experiments with the most straightforward possible application - a good old Hello World app.</p></div><div class="listingblock"><div class="title">Listing 1. src/main/java/com/github/wololock/RatpackGraalDemoApp.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock;import ratpack.server.RatpackServer;import java.util.HashMap;import java.util.Map;import static ratpack.jackson.Jackson.json;final class RatpackGraalDemoApp {    public static void main(String[] args) throws Exception {        final Map&lt;String, String&gt; message = new HashMap&lt;&gt;();        message.put("message", "Hello, World!");        RatpackServer.start(server -&gt;                server.serverConfig(config -&gt; config.sysProps().development(false))                        .handlers(chain -&gt; chain.get(ctx -&gt; ctx.render(json(message))))        );    }}</code></pre></div></div><div class="paragraph"><p>When we send an HTTP request to the <code>localhost:5050</code> we get the following response:</p></div><div class="listingblock"><div class="title">Listing 2. HTTP response of <code>(GET) localhost:5050</code> request</div><div class="content"><pre class="highlightjs highlight"><code class="language-http hljs" data-lang="http">HTTP/1.1 200 OKcontent-encoding: gzipcontent-type: application/jsontransfer-encoding: chunked{    "message": "Hello, World!"}</code></pre></div></div></div></div><div class="sect1"><h2>Preparing for GraalVM</h2><div class="sectionbody"><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">I strongly recommend reading <a href="https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692" target="_blank" rel="noopener"><em>"Instant Netty Startup using GraalVM Native Image Generation"</em></a> article by <a href="https://twitter.com/cstancu" target="_blank" rel="noopener">Codrut Stancu</a>. It explains in details how to prepare Netty-based application for GraalVM native binary compilation.</td></tr></table></div><div class="paragraph"><p>We need to do some additional work to prepare our <em>"Hello World"</em> application for GraalVM.</p></div><div class="sect2"><h3>1. Reflection configuration</h3><div class="paragraph"><p>We start with preparing a configuration file for classes used via Java reflection mechanism. GraalVM uses <a href="https://github.com/oracle/graal/tree/master/substratevm" target="_blank" rel="noopener">Substrate VM</a> - a framework that allows aggressive ahead-of-time optimizations. Classes, methods or fields accessed via reflection have to be known at the compile time to make AOT compilation possible. Substrate VM resolves most of the basic reflection calls like <code>Class.forName(&#8230;&#8203;)</code>, but in more complex scenarios it requires additional information to be provided.</p></div><div class="listingblock"><div class="title">Listing 3. reflections.json</div><div class="content"><pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">[  {    "name": "io.netty.channel.socket.nio.NioServerSocketChannel",    "methods": [      {        "name": "&lt;init&gt;",        "parameterTypes": []      }    ]  },  {    "name": "com.github.benmanes.caffeine.cache.SSMS",    "methods": [      {        "name": "&lt;init&gt;",        "parameterTypes": ["com.github.benmanes.caffeine.cache.Caffeine", "com.github.benmanes.caffeine.cache.CacheLoader", "boolean"]      }    ]  },  {    "name": "com.github.benmanes.caffeine.cache.PSMS",    "methods": [      {        "name": "&lt;init&gt;"      }    ]  }]</code></pre></div></div><div class="paragraph"><p>In the case of our demo app we need to provide information about these 3 classes. <code>SSMS</code> and <code>PSMS</code> are Caffeine caching library generated classes that are used to initialize paths handler internal cache.</p></div></div><div class="sect2"><h3>2. Dynamic proxies configuration</h3><div class="paragraph"><p>To make dependency injection via Guice possible, we need to <a href="https://github.com/oracle/graal/blob/master/substratevm/DYNAMIC_PROXY.md#manual-configuration" target="_blank" rel="noopener">generate dynamic proxies</a> at the compile time. It requires defining a list of interfaces that dynamic proxies implement. In our case, we only have to configure <code>java.lang.reflect.TypeVariable</code> interface.</p></div><div class="listingblock"><div class="title">Listing 4. proxies.json</div><div class="content"><pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">[  ["java.lang.reflect.TypeVariable"]]</code></pre></div></div></div><div class="sect2"><h3>3. Unsafe memory access configuration</h3><div class="paragraph"><p>Using <code>sun.misc.Unsafe</code> in Substrate VM generates <a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md#unsafe-memory-access" target="_blank" rel="noopener">other limitations</a>. Codrut in his <em>"Instant Netty Startup using GraalVM Native Image Generation"</em> article explained which <code>sun.misc.Unsafe</code> usages <a href="https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692#020c" target="_blank" rel="noopener">require additional configuration</a> in Netty-based application. It applies to our demo application as well + we need to configure Caffeine&#8217;s <code>com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess</code> class. Let&#8217;s add the following static classes to the main application class.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock;import com.oracle.svm.core.annotate.Alias;import com.oracle.svm.core.annotate.RecomputeFieldValue;import com.oracle.svm.core.annotate.TargetClass;import ratpack.server.RatpackServer;import java.util.HashMap;import java.util.Map;import static ratpack.jackson.Jackson.json;final class RatpackGraalDemoApp {    public static void main(String[] args) throws Exception {        final Map&lt;String, String&gt; message = new HashMap&lt;&gt;();        message.put("message", "Hello, World!");        RatpackServer.start(server -&gt;                server.serverConfig(config -&gt; config.sysProps().development(false))                        .handlers(chain -&gt; chain.get(ctx -&gt; ctx.render(json(message))))        );    }    @TargetClass(className = "io.netty.util.internal.PlatformDependent0")    static final class Target_io_netty_util_internal_PlatformDependent0 {        @Alias        @RecomputeFieldValue(kind = RecomputeFieldValue.Kind.FieldOffset, declClassName = "java.nio.Buffer", name = "address")        private static long ADDRESS_FIELD_OFFSET;    }    @TargetClass(className = "io.netty.util.internal.CleanerJava6")    static final class Target_io_netty_util_internal_CleanerJava6 {        @Alias        @RecomputeFieldValue(kind = RecomputeFieldValue.Kind.FieldOffset, declClassName = "java.nio.DirectByteBuffer", name = "cleaner")        private static long CLEANER_FIELD_OFFSET;    }    @TargetClass(className = "io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess")    static final class Target_io_netty_util_internal_shaded_org_jctools_util_UnsafeRefArrayAccess {        @Alias        @RecomputeFieldValue(kind = RecomputeFieldValue.Kind.ArrayIndexShift, declClass = Object[].class)        public static int REF_ELEMENT_SHIFT;    }    @TargetClass(className = "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess")    static final class Target_com_github_benmanes_caffeine_cache_UnsafeRefArrayAccess {        @Alias        @RecomputeFieldValue(kind = RecomputeFieldValue.Kind.ArrayIndexShift, declClass = Object[].class)        public static int REF_ELEMENT_SHIFT;    }}</code></pre></div></div><div class="paragraph"><p>Of course, it also means that we need to add Substrate SDK to the <code>build.gradle</code>.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">buildscript {    repositories {        jcenter()    }    dependencies {        classpath "io.ratpack:ratpack-gradle:1.6.0"        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.4"    }}apply plugin: "io.ratpack.ratpack-java"apply plugin: "com.github.johnrengelman.shadow"apply plugin: "idea"repositories {    jcenter()}mainClassName = 'com.github.wololock.RatpackGraalDemoApp'dependencies {    runtime 'org.slf4j:slf4j-simple:1.7.25'    compile 'com.oracle.substratevm:svm:1.0.0-rc12' <i class="conum" data-value="1"></i><b>(1)</b>    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Substrate VM SDK dependency.</td></tr></table></div></div></div></div><div class="sect1"><h2>Building native binary</h2><div class="sectionbody"><div class="paragraph"><p>We are finally ready to compile native binary. We use the <code>native-image</code> command with the following parameters:</p></div><div class="listingblock"><div class="title">Listing 5. build-native-image.sh</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">native-image --no-server \    -jar build/libs/ratpack-graalvm-demo-all.jar \    -H:Name=ratpack-graalvm-demo \    -H:EnableURLProtocols=http \    -H:+AllowVMInspection \    -H:+ReportUnsupportedElementsAtRuntime \    -H:ReflectionConfigurationFiles=reflections.json \    -H:DynamicProxyConfigurationFiles=proxies.json \    --allow-incomplete-classpath \    --delay-class-initialization-to-runtime=io.netty.handler.codec.http.HttpObjectEncoder,io.netty.handler.ssl.ReferenceCountedOpenSslEngine,io.netty.handler.ssl.ReferenceCountedOpenSslClientContext,io.netty.handler.ssl.ReferenceCountedOpenSslServerContext,io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator,io.netty.handler.ssl.JettyNpnSslEngine,io.netty.handler.ssl.ConscryptAlpnSslEngine,io.netty.util.internal.logging.Log4JLogger \    -Dratpack.epoll.disable=true <i class="conum" data-value="1"></i><b>(1)</b></code></pre></div></div><div class="paragraph"><p>As you can see in <em class="conum" data-value="1"></em> we disabled Epoll transport to use NIO instead. The reason for that is because <a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md#java-native-interface-jni" target="_blank" rel="noopener">JNI support is limited</a> and at least at the moment all tries to run Ratpack with Epoll transport on Linux ends with the following exception:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">[main] INFO ratpack.server.RatpackServer - Starting server...Exception in thread "main" ratpack.api.UncheckedException: java.lang.reflect.InvocationTargetExceptionat ratpack.util.Exceptions.uncheck(Exceptions.java:54)at ratpack.util.internal.TransportDetector$NativeTransportImpl.eventLoopGroup(TransportDetector.java:229)at ratpack.util.internal.TransportDetector$NativeTransport.eventLoopGroup(TransportDetector.java:133)at ratpack.util.internal.TransportDetector.eventLoopGroup(TransportDetector.java:65)at ratpack.exec.internal.DefaultExecController.&lt;init&gt;(DefaultExecController.java:61)at ratpack.server.internal.DefaultRatpackServer.start(DefaultRatpackServer.java:126)at ratpack.server.RatpackServer.start(RatpackServer.java:93)at com.github.wololock.RatpackGraalDemoApp.main(RatpackGraalDemoApp.java:12)Caused by: java.lang.reflect.InvocationTargetExceptionat java.lang.reflect.Constructor.newInstance(Constructor.java:423)at ratpack.util.internal.TransportDetector$NativeTransportImpl.eventLoopGroup(TransportDetector.java:227)... 6 moreCaused by: java.lang.UnsatisfiedLinkError: io.netty.channel.epoll.Native.epollCreate()I [symbol: Java_io_netty_channel_epoll_Native_epollCreate or Java_io_netty_channel_epoll_Native_epollCreate__]at com.oracle.svm.jni.access.JNINativeLinkage.getOrFindEntryPoint(JNINativeLinkage.java:145)at com.oracle.svm.jni.JNIGeneratedMethodSupport.nativeCallAddress(JNIGeneratedMethodSupport.java:54)at io.netty.channel.epoll.Native.epollCreate(Native.java)at io.netty.channel.epoll.Native.newEpollCreate(Native.java:107)at io.netty.channel.epoll.EpollEventLoop.&lt;init&gt;(EpollEventLoop.java:100)at io.netty.channel.epoll.EpollEventLoopGroup.newChild(EpollEventLoopGroup.java:135)at io.netty.channel.epoll.EpollEventLoopGroup.newChild(EpollEventLoopGroup.java:35)at io.netty.util.concurrent.MultithreadEventExecutorGroup.&lt;init&gt;(MultithreadEventExecutorGroup.java:84)at io.netty.util.concurrent.MultithreadEventExecutorGroup.&lt;init&gt;(MultithreadEventExecutorGroup.java:58)at io.netty.util.concurrent.MultithreadEventExecutorGroup.&lt;init&gt;(MultithreadEventExecutorGroup.java:47)at io.netty.channel.MultithreadEventLoopGroup.&lt;init&gt;(MultithreadEventLoopGroup.java:59)at io.netty.channel.epoll.EpollEventLoopGroup.&lt;init&gt;(EpollEventLoopGroup.java:104)at io.netty.channel.epoll.EpollEventLoopGroup.&lt;init&gt;(EpollEventLoopGroup.java:91)at io.netty.channel.epoll.EpollEventLoopGroup.&lt;init&gt;(EpollEventLoopGroup.java:68)</code></pre></div></div><div class="paragraph"><p>I will be exploring Epoll support and will post an update when get the working example of Ratpack application with Epoll transport on GraalVM.</p></div></div></div><div class="sect1"><h2>Running the application</h2><div class="sectionbody"><div class="paragraph"><p>At this point, we have <code>ratpack-graalvm-demo</code> binary file compiled and ready to use.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">ratpack-graalvm-demo [master] % ls -lah ratpack-graalvm-demo-rwxrwxr-x. 1 wololock wololock 24M 02-15 04:25 ratpack-graalvm-demo</code></pre></div></div><div class="paragraph"><p>As you can see a single <code>ratpack-graalvm-demo</code> file is 24 MB size. Let&#8217;s run it and execute HTTP request to see if it works.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">ratpack-graalvm-demo [master] % ./ratpack-graalvm-demo[main] INFO ratpack.server.RatpackServer - Starting server...[main] INFO ratpack.server.RatpackServer - Building registry...[main] INFO ratpack.server.RatpackServer - Ratpack started for http://localhost:5050</code></pre></div></div><div class="paragraph"><p>The first thing you will notice is that the server is ready almost instantly. Ratpack application run on a regular JVM starts quickly (in about 550-600 milliseconds), but this one starts in a blink of an eye.</p></div><div class="paragraph"><p>Let&#8217;s try to measure startup time of regular Java and GraalVM Ratpack application. I&#8217;m going to add <code>System.exit(0)</code> at the end of the <code>main</code> method, so the application shuts down right after it becomes ready to handle HTTP connections.</p></div><script id="asciicast-227675" src="https://asciinema.org/a/227675.js" async></script><div class="paragraph"><p>The difference is <strong>HUGE</strong>! Let&#8217;s compare best results - GraalVM&#8217;s best <strong>10</strong> milliseconds result versus Oracle JDK&#8217;s best <strong>581</strong> milliseconds result. It makes the difference.</p></div></div></div><div class="sect1"><h2>Benchmark</h2><div class="sectionbody"><div class="paragraph"><p>Application startup time is one thing. It&#8217;s time to run a more critical comparison test. Let&#8217;s compare the throughput of both, GraalVM and Oracle JDK runtime environments.</p></div><div class="paragraph"><p>We will start with a small number of requests so that the Oracle JDK won’t have enough time to warm up properly. In this test, we use <a href="https://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener">Apache Bench</a> tool, and we execute 200 concurrent requests with a total of 1000 requests. Let’s start with GraalVM.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">~ % ab -c 200 -n 1000 http://localhost:5050/This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking localhost (be patient)Completed 100 requestsCompleted 200 requestsCompleted 300 requestsCompleted 400 requestsCompleted 500 requestsCompleted 600 requestsCompleted 700 requestsCompleted 800 requestsCompleted 900 requestsCompleted 1000 requestsFinished 1000 requestsServer Software:Server Hostname:        localhostServer Port:            5050Document Path:          /Document Length:        27 bytesConcurrency Level:      200Time taken for tests:   0.090 secondsComplete requests:      1000Failed requests:        0Total transferred:      117000 bytesHTML transferred:       27000 bytesRequests per second:    11153.00 [#/sec] (mean)Time per request:       17.932 [ms] (mean)Time per request:       0.090 [ms] (mean, across all concurrent requests)Transfer rate:          1274.32 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    4   1.2      4       6Processing:     1    7   4.8      5      22Waiting:        1    6   4.7      4      19Total:          6   11   4.2      9      23Percentage of the requests served within a certain time (ms)  50%      9  66%      9  75%     10  80%     12  90%     20  95%     22  98%     22  99%     22 100%     23 (longest request)</code></pre></div></div><div class="paragraph"><p>That was fast. Now let&#8217;s see regular Oracle JDK in action.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">I start demo application with the following command <code>java -jar build/libs/ratpack-graalvm-demo-all.jar -Dratpack.epoll.disable=true</code></td></tr></table></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">ab -c 200 -n 1000 http://localhost:5050/This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking localhost (be patient)Completed 100 requestsCompleted 200 requestsCompleted 300 requestsCompleted 400 requestsCompleted 500 requestsCompleted 600 requestsCompleted 700 requestsCompleted 800 requestsCompleted 900 requestsCompleted 1000 requestsFinished 1000 requestsServer Software:Server Hostname:        localhostServer Port:            5050Document Path:          /Document Length:        27 bytesConcurrency Level:      200Time taken for tests:   0.335 secondsComplete requests:      1000Failed requests:        0Total transferred:      117000 bytesHTML transferred:       27000 bytesRequests per second:    2985.77 [#/sec] (mean)Time per request:       66.984 [ms] (mean)Time per request:       0.335 [ms] (mean, across all concurrent requests)Transfer rate:          341.15 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    1   1.8      0       7Processing:     5   29  13.3     25      98Waiting:        5   29  13.3     25      94Total:          5   30  13.7     25      98Percentage of the requests served within a certain time (ms)  50%     25  66%     31  75%     36  80%     39  90%     47  95%     56  98%     70  99%     83 100%     98 (longest request)</code></pre></div></div><div class="paragraph"><p>The difference between the cold Oracle JDK and GraalVM is enormous:</p></div><div class="ulist"><ul><li><p><strong>17.93</strong> ms vs. <strong>66.98</strong> ms mean time per request in GraalVM' favour.</p></li><li><p><strong>11153</strong> vs. <strong>2985</strong> requests per second in GraalVM&#8217;s favour.</p></li></ul></div><div class="paragraph"><p>However, let’s be fair - Oracle JDK shows its full potential when JIT jumps in and runs its optimizations. In the next round, we will let it warm up correctly and then we can compare the results. We will run 800 concurrent requests with a total of 500,000 requests, and we are going to do it twice - the first run is used to warm up the JVM so that we take only the second result into account. Let&#8217;s start with GraalVM.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">ab -c 800 -n 500000 http://localhost:5050/This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking localhost (be patient)Completed 50000 requestsCompleted 100000 requestsCompleted 150000 requestsCompleted 200000 requestsCompleted 250000 requestsCompleted 300000 requestsCompleted 350000 requestsCompleted 400000 requestsCompleted 450000 requestsCompleted 500000 requestsFinished 500000 requestsServer Software:Server Hostname:        localhostServer Port:            5050Document Path:          /Document Length:        27 bytesConcurrency Level:      800Time taken for tests:   40.725 secondsComplete requests:      500000Failed requests:        0Total transferred:      58500000 bytesHTML transferred:       13500000 bytesRequests per second:    12277.48 [#/sec] (mean)Time per request:       65.160 [ms] (mean)Time per request:       0.081 [ms] (mean, across all concurrent requests)Transfer rate:          1402.80 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0   37 110.8     25    3130Processing:     3   28   9.4     27     117Waiting:        0   18   8.3     17      90Total:         18   65 112.0     55    3156Percentage of the requests served within a certain time (ms)  50%     55  66%     61  75%     63  80%     64  90%     68  95%     72  98%     84  99%   1072 100%   3156 (longest request)</code></pre></div></div><div class="paragraph"><p>Now let&#8217;s do the same with Oracle JDK.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">ab -c 800 -n 500000 http://localhost:5050/This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking localhost (be patient)Completed 50000 requestsCompleted 100000 requestsCompleted 150000 requestsCompleted 200000 requestsCompleted 250000 requestsCompleted 300000 requestsCompleted 350000 requestsCompleted 400000 requestsCompleted 450000 requestsCompleted 500000 requestsFinished 500000 requestsServer Software:Server Hostname:        localhostServer Port:            5050Document Path:          /Document Length:        27 bytesConcurrency Level:      800Time taken for tests:   35.889 secondsComplete requests:      500000Failed requests:        0Total transferred:      58500000 bytesHTML transferred:       13500000 bytesRequests per second:    13931.95 [#/sec] (mean)Time per request:       57.422 [ms] (mean)Time per request:       0.072 [ms] (mean, across all concurrent requests)Transfer rate:          1591.83 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0   28   8.1     27    1034Processing:     2   30   7.7     30     249Waiting:        0   17   6.9     16     242Total:          6   57   5.3     57    1065Percentage of the requests served within a certain time (ms)  50%     57  66%     58  75%     59  80%     60  90%     62  95%     64  98%     66  99%     68 100%   1065 (longest request)</code></pre></div></div><div class="paragraph"><p>It looks like if we give Oracle JDK enough time to warm up, it runs a little bit more efficient than the GraalVM application. Take a look at these two charts to see the main difference.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/ratpack-graalvm-rps-benchmark.png"><img src="/images/ratpack-graalvm-rps-benchmark.png" alt="ratpack graalvm rps benchmark"></a></div></div></div></div><div class="paragraph"><p>If we compare RPS between cold Oracle JDK and GraalVM, there is no doubt that GraalVM does better. However, if we only give a regular Oracle JDK a chance to warm up, it turns out that it can handle almost 1700 more requests. It&#8217;s a significant difference.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/ratpack-graalvm-latency-benchmark.png"><img src="/images/ratpack-graalvm-latency-benchmark.png" alt="ratpack graalvm latency benchmark"></a></div></div></div></div><div class="paragraph"><p>Latency benchmark also reveals interesting details. GraalVM wins when we compare it to cold Oracle JDK, and we let both applications handle reasonably small traffic (200 requests with a total of 1000). When we increase the number of concurrent requests to 800, and we need to handle the total of 500,000 requests, warmed up Oracle JDK works much better. While GraalVM slows down to the ~65ms per request when we increase the traffic, Oracle JDK speeds up to ~57ms per request.</p></div><div class="paragraph"><p>There are also two things worth mentioning. I&#8217;ve tried to execute more concurrent requests, but it turned out that GraalVM starts throwing <code>IOException</code> when I increased the number of concurrent requests to 1,000.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">[main] INFO ratpack.server.RatpackServer - Starting server...[main] INFO ratpack.server.RatpackServer - Building registry...[main] INFO ratpack.server.RatpackServer - Ratpack started for http://localhost:5050[ratpack-compute-2-1] WARN io.netty.channel.DefaultChannelPipeline - An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.java.io.IOException: Accept failedat com.oracle.svm.core.posix.PosixJavaNIOSubstitutions$Util_sun_nio_ch_ServerSocketChannelImpl.accept0(PosixJavaNIOSubstitutions.java:1261)at sun.nio.ch.ServerSocketChannelImpl.accept0(ServerSocketChannelImpl.java:1188)at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:422)at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:250)at io.netty.util.internal.SocketUtils$5.run(SocketUtils.java:110)at io.netty.util.internal.SocketUtils$5.run(SocketUtils.java:107)at java.security.AccessController.doPrivileged(AccessController.java:82)at io.netty.util.internal.SocketUtils.accept(SocketUtils.java:107)at io.netty.channel.socket.nio.NioServerSocketChannel.doReadMessages(NioServerSocketChannel.java:143)at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:75)at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:656)at io.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:556)at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:510)at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:470)at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)at ratpack.exec.internal.DefaultExecController$ExecControllerBindingThreadFactory.lambda$newThread$0(DefaultExecController.java:137)at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)at java.lang.Thread.run(Thread.java:748)at com.oracle.svm.core.thread.JavaThreads.threadStartRoutine(JavaThreads.java:481)at com.oracle.svm.core.posix.thread.PosixJavaThreads.pthreadStartRoutine(PosixJavaThreads.java:193)</code></pre></div></div><div class="paragraph"><p>Oracle JDK at the same time was able to handle 1,000 concurrent requests without any issue.</p></div><div class="paragraph"><p>And the last thing - memory consumption. GraalVM does much better when it comes to memory consumption right after the startup - the demo application consumes around 30 MB after startup on GraalVM and about 90 MB when running on Oracle JDK. However, when the application starts handling firsts requests, memory consumptions jumps significantly - GraalVM consumes around 300 MB, while Oracle JDK consumes around 150 MB only.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I must admit that the final benchmark results surprised me a bit. This demo application is not a rock-solid proof - if we used much larger and much more complicated Ratpack application, we could get completely different results. It proved that in some use cases Ratpack application does not need GraalVM to run fast. GraalVM may offer much faster startup, but fine-tuned and adequately warmed up JDK may perform much better in terms of metrics like RPS or latency in milliseconds.</p></div><div class="paragraph"><p>Summary:</p></div><div class="ulist"><ul><li><p>GraalVM runs much faster compared to cold JDK. This is a good news for things like FaaS or running non-daemon like programs - you don&#8217;t have to wait until JIT does it job to optimize runtime environment.</p></li><li><p>GraalVM seems to allocate much more memory while running the demo program. It starts with much smaller memory footprint at the beginning, but when the benchmark is over, Oracle JDK consumed around 170 MB while GraalVM was consuming ~300 MB of the memory.</p></li></ul></div><div class="paragraph"><p>I hope you learned something new from this blog post. I’m pleased I have finally run the Ratpack example on GraalVM. It took me hours to make it running, and I almost gave up, but I couldn&#8217;t accept the failure. The final result makes me happy even more. It’s 06:03 AM. Time to go to sleep. See you soon!</p></div><div class="video-container"><iframe width="560" height="315" src="https://www.youtube.com/embed/aOszDmbSsyM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;The journey inside the exciting world of &lt;a href=&quot;https://www.graalvm.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GraalVM&lt;/a&gt; continues. Today I would like to share with you results of running &lt;a href=&quot;https://ratpack.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ratpack&lt;/a&gt; on GraalVM experiment. You are going to learn how to build a native binary of a simple &quot;Hello, World!&quot; Ratpack application. In the end we are going to run some benchmarks to see if running GraalVM executable produces better results than running JAR on a regular Oracle JDK.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Ratpack Cookbook" scheme="https://e.printstacktrace.blog/categories/ratpack-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="ratpack" scheme="https://e.printstacktrace.blog/tags/ratpack/"/>
    
      <category term="graalvm" scheme="https://e.printstacktrace.blog/tags/graalvm/"/>
    
      <category term="native-image" scheme="https://e.printstacktrace.blog/tags/native-image/"/>
    
      <category term="non-blocking" scheme="https://e.printstacktrace.blog/tags/non-blocking/"/>
    
  </entry>
  
  <entry>
    <title>GraalVM native image inside docker container - does it make sense?</title>
    <link href="https://e.printstacktrace.blog/graalvm-native-image-inside-docker-container-does-it-make-sense/"/>
    <id>https://e.printstacktrace.blog/graalvm-native-image-inside-docker-container-does-it-make-sense/</id>
    <published>2019-01-19T12:19:22.000Z</published>
    <updated>2019-01-19T12:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>We have learned how to create <a href="https://www.graalvm.org/" target="_blank" rel="noopener">GraalVM</a> native image from standalone Groovy script <a href="/graalvm-groovy-grape-creating-native-image-of-standalone-script/" title="in the previous blog post">in the previous blog post</a>. Today we continue the experiments, and this time we are going to create a <a href="https://www.docker.com/why-docker" target="_blank" rel="noopener">Docker</a> image to see what are the benefits and drawbacks of this solution.</p></div><a id="more"></a><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>In the previous blog post, we have created a standalone Groovy script that uses Jsoup library as a dependency. This script connects to the given URL and counts how many links the specified website contains. We saw a significant improvement in execution time - from <strong>1.7 s</strong> (using Groovy command line processor) to <strong>0.2 s</strong> (using GraalVM native image). However, building the final native image required installing GraalVM on our local system. Also, we may need to compile OS-specific executable every time we want to run the program on a different platform or operating system. This is where we start thinking about containerization, and today we are going to dockerize a Groovy script to play around with it.</p></div></div></div><div class="sect1"><h2>Dockerfile</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with defining a Dockerfile<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>. We use official <a href="https://github.com/oracle/docker-images/blob/master/GraalVM/CE/1.0.0-rc11/Dockerfile" target="_blank" rel="noopener">GraalVM docker base image</a>. Inside the image, we install SDKMAN! and Groovy 2.5.2, then we compile the script and create a native executable with GraalVM. Finally, we create an entry point which exposes executable and accepts parameters.</p></div><div class="listingblock"><div class="title">Listing 1. Dockerfile</div><div class="content"><pre class="highlightjs highlight"><code class="language-dockerfile hljs" data-lang="dockerfile">FROM oracle/graalvm-ce:1.0.0-rc11 <i class="conum" data-value="1"></i><b>(1)</b>ADD . /app/ <i class="conum" data-value="2"></i><b>(2)</b>ENV GROOVY_HOME=/root/.sdkman/candidates/groovy/2.5.2 <i class="conum" data-value="3"></i><b>(3)</b>RUN yum install -y zip unzip <i class="conum" data-value="4"></i><b>(4)</b>RUN curl -s "https://get.sdkman.io" | bash <i class="conum" data-value="5"></i><b>(5)</b>RUN bash -c "source $HOME/.sdkman/bin/sdkman-init.sh &amp;&amp; \ <i class="conum" data-value="6"></i><b>(6)</b>    echo \"sdkman_auto_answer=true\" &gt; $SDKMAN_DIR/etc/config &amp;&amp; \ <i class="conum" data-value="7"></i><b>(7)</b>    sdk install groovy 2.5.2 &amp;&amp; \ <i class="conum" data-value="8"></i><b>(8)</b>    groovy -version &amp;&amp; \    cd /app/ &amp;&amp; \    groovyc --configscript=config/compiler.groovy CountLinks.groovy &amp;&amp; \    sh ./compile-native-image.sh"ENTRYPOINT bash -c "cd /app &amp;&amp; ./countlinks.sh $0"</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>The official Oracle GraalVM 1.0.0-RC11 base image</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>We copy all files from current directory to <code>/app</code> directory inside the image</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>We set up required <code>GROOVY_HOME</code> env variable</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>We install <code>zip</code> and <code>unzip</code> (required by SDKMAN!)</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>We install SDKMAN!</td></tr><tr><td><i class="conum" data-value="6"></i><b>6</b></td><td>We init SDKMAN! after successful installation</td></tr><tr><td><i class="conum" data-value="7"></i><b>7</b></td><td>We set auto answer to <code>true</code> so SDKMAN! does not ask as if we want to install Groovy</td></tr><tr><td><i class="conum" data-value="8"></i><b>8</b></td><td>We install Groovy 2.5.2</td></tr></table></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">All files used in this blog post can be found in <a href="https://github.com/wololock/graalvm-groovy-examples/tree/master/grape-script-example" target="_blank" rel="noopener">wololock/graalvm-groovy-examples</a> Git repository.</td></tr></table></div></div></div><div class="sect1"><h2>Building the Docker image</h2><div class="sectionbody"><div class="paragraph"><p>It&#8217;s time to build the Docker image.</p></div><div class="listingblock"><div class="title">Listing 2. Building Docker image with <code>countlinks</code> tag</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">docker build -t countlinks .</code></pre></div></div><script id="asciicast-222451" src="https://asciinema.org/a/222451.js" async></script><div class="paragraph"><p>After approximately 3-4 minutes our Docker image is created and ready to use. You can find it with <code>docker images</code> command. Keep in mind that the created image is almost 2.2 GB because our base Docker image is based on Oracle Linux official docker image.</p></div></div></div><div class="sect1"><h2>Running the container</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s run our program inside the container.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">time docker run --rm --read-only countlinks https://e.printstacktrace.blog <i class="conum" data-value="1"></i><b>(1)</b>Website https://e.printstacktrace.blog contains 96 links.real0m0,810s <i class="conum" data-value="2"></i><b>(2)</b>user0m0,027ssys0m0,021s</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td><code>--rm</code> option removes the container when it exists, <code>--read-only</code> mounts the file system with the read-only mode (we don&#8217;t need write permission in this case)</td></tr></table></div><div class="paragraph"><p>The first thing we notice is that the execution time increased from <strong>0.2 s</strong> to somewhere around <strong>0.8 s</strong>. It means that our program executed as a Docker container runs 4 times slower. Why?</p></div><div class="paragraph"><p>The thing is that creating and starting a new container comes with a cost. It takes around <strong>600 ms</strong> on my computer. For instance, if I run <code>echo</code> command inside the newly created Alpine container (4 MB image), it takes almost 600 ms to complete.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">time docker run --rm --read-only --entrypoint "echo" alpinereal0m0,631suser0m0,030ssys0m0,024s</code></pre></div></div></div></div><div class="sect1"><h2>Executing command inside a running container</h2><div class="sectionbody"><div class="paragraph"><p>There is an alternative approach, however. Instead of creating and starting a new container each time we want to run a program, we can start a container, keep it running and attach and execute a command when needed. Let&#8217;s give it a try. Firstly, we run a container that executes <code>tail -f /var/log/yum.log</code> command to keep it running. We need to override entry point to do so and add <code>-d</code> option to detach from the container. We also use <code>--name</code> parameter to specify the name of this container so that we can use it instead of container ID. Next, we use <code>docker exec</code> to execute another command inside the running container.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">docker run -d --name countlinks --rm --read-only --entrypoint "tail" countlinks -f /var/log/yum.logb75eef8c3a3aa696d87e284fc59600261baaf126c1fd2efc196f4df5ff9a4ee0 <i class="conum" data-value="1"></i><b>(1)</b>time docker exec countlinks cd /app &amp;&amp; time ./countlinks.sh https://e.printstacktrace.blogreal0m0,100s <i class="conum" data-value="2"></i><b>(2)</b>user0m0,024ssys0m0,014sWebsite https://e.printstacktrace.blog contains 96 links.real0m0,209s <i class="conum" data-value="3"></i><b>(3)</b>user0m0,021ssys0m0,008s</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Container ID returned when detaching from the container.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Time consumed by attaching <code>docker exec</code> to the running container</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>Time consumed by running the command inside the container</td></tr></table></div><div class="paragraph"><p>In this case, we use <code>time</code> command twice. The first one counts the time of attaching to the running container, while the second one counts the time of the inner command execution. We see that it produces a much better result - attaching to the container takes around 110 ms. So the total execution time takes approximately <strong>300 ms average</strong>. It is still slower comparing to the result we get when running native executable outside the container, but in most cases, 110 ms is an acceptable cost.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>So is it worth dockerizing GraalVM native images? It depends. If our goal is to produce an executable that completes in a blink of an eye, and where every millisecond counts - running the command inside a container won&#8217;t be the best choice. However, if this is not our case, we can benefit from dockerizing the native image. It allows us building the executable without having GraalVM or Groovy installed on the computer - it only requires Docker on board. It also makes the distribution of the executable easier - the image once created and pushed to the repository can be reused easily.</p></div><div class="paragraph"><p>And last but not least - dockerizing native executable means that we benefit from ahead-of-time compilation and much lower memory footprint. However, we always have to be careful when it comes to running any Java program inside the container - things like available resources (CPU, memory), secure access or networking may cause some issues. You just have to consider all pros and cons when choosing one option over another.</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://docs.docker.com/engine/reference/builder/" class="bare" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;We have learned how to create &lt;a href=&quot;https://www.graalvm.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GraalVM&lt;/a&gt; native image from standalone Groovy script &lt;a href=&quot;/graalvm-groovy-grape-creating-native-image-of-standalone-script/&quot; title=&quot;in the previous blog post&quot;&gt;in the previous blog post&lt;/a&gt;. Today we continue the experiments, and this time we are going to create a &lt;a href=&quot;https://www.docker.com/why-docker&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker&lt;/a&gt; image to see what are the benefits and drawbacks of this solution.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="graalvm" scheme="https://e.printstacktrace.blog/tags/graalvm/"/>
    
      <category term="native-image" scheme="https://e.printstacktrace.blog/tags/native-image/"/>
    
      <category term="docker" scheme="https://e.printstacktrace.blog/tags/docker/"/>
    
      <category term="grape" scheme="https://e.printstacktrace.blog/tags/grape/"/>
    
  </entry>
  
  <entry>
    <title>GraalVM with Groovy and Grape - creating native image of a standalone script</title>
    <link href="https://e.printstacktrace.blog/graalvm-groovy-grape-creating-native-image-of-standalone-script/"/>
    <id>https://e.printstacktrace.blog/graalvm-groovy-grape-creating-native-image-of-standalone-script/</id>
    <published>2019-01-16T14:14:42.000Z</published>
    <updated>2019-01-19T09:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p><a href="https://www.graalvm.org/" target="_blank" rel="noopener">GraalVM</a> 1.0.0-RC11 was released yesterday, and I thought it would be an excellent excuse to play around with it a while. I decided to create a simple Groovy script that uses <a href="http://docs.groovy-lang.org/latest/html/documentation/grape.html" target="_blank" rel="noopener">Grape dependency management</a> system to load an external library and create a standalone native image from it. I thought it wouldn&#8217;t be possible, but luckily - I was wrong.</p></div><a id="more"></a><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">The source code of the examples explained below can be found here <a href="https://github.com/wololock/graalvm-groovy-examples/tree/master/grape-script-example" target="_blank" rel="noopener">wololock/graalvm-groovy-examples</a></td></tr></table></div><div class="sect1"><h2>Prerequisites</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with defining runtime environment.</p></div><div class="ulist"><ul><li><p><strong>GraalVM</strong> 1.0.0-RC11 (the most recent version available while writing this blog post)</p></li><li><p><strong>Groovy</strong> 2.5.2</p></li></ul></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">I use a great command line tool called <a href="https://sdkman.io/" target="_blank" rel="noopener">SDKMAN!</a> to install both, GraalVM JDK and Groovy library. It allows me to install GraalVM with the following command: <code>sdk install java 1.0.0-rc-11-grl</code> and then I can switch to this Java version for current shell session with <code>sdk use java 1.0.0-rc-11-grl</code>.</td></tr></table></div></div></div><div class="sect1"><h2>The code</h2><div class="sectionbody"><div class="paragraph"><p>In this article, I will use a reasonably simple Groovy script. This script expects a single command line argument - a website URL, and it displays to the console the information about how many links given website contains. Nothing fancy, but you probably see how we could extend this example to do something more useful.</p></div><div class="listingblock"><div class="title">Listing 1. src/CountLinks.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">#!groovyimport org.jsoup.Jsoupimport org.jsoup.nodes.Document@Grab(group='org.jsoup', module='jsoup', version='1.11.3')final String url = args[0]final Document doc = Jsoup.connect(url).get()final int links = doc.select("a").size()println "Website ${url} contains ${links} links."</code></pre></div></div><div class="paragraph"><p>We can run it and see how much time it took to produce the output.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; time groovy CountLinks.groovy https://e.printstacktrace.blogWebsite https://e.printstacktrace.blog contains 95 links.groovy CountLinks.groovy https://e.printstacktrace.blog  6,29s user 0,26s system 390% cpu 1,677 total</code></pre></div></div><div class="paragraph"><p>It took around <strong>1.7 seconds</strong> to produce the result. Quite long, especially for a script that does not do much work. We can assume that network communication consumed around 200 milliseconds, according to <code>curl</code> results.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; time curl -o /tmp/output "https://e.printstacktrace.blog"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100 23256    0 23256    0     0  23256      0 --:--:-- --:--:-- --:--:--  118kcurl -o /tmp/output "https://e.printstacktrace.blog"  0,02s user 0,01s system 10% cpu 0,206 total</code></pre></div></div><div class="paragraph"><p>It looks like that starting JVM and running Grape dependency manager takes around 1.5 seconds in this case. Let&#8217;s try to improve the performance by executing our script as a Java compiled class.</p></div></div></div><div class="sect1"><h2>Compiling script to Java bytecode</h2><div class="sectionbody"><div class="paragraph"><p>We need to explain one important thing. Grape dependency manager has some limitations<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>, and it does not work without Groovy class loader. There is a configuration annotation called <code>@GrabConfig(systemClassLoader = true)</code>, but it does not have any effect when we compile the script to a Java bytecode class file. A script containing this annotation generates the same bytecode as the one that misses it. If this annotation had any effect when running compiled bytecode as a Java program, then we could use <code>-Djava.system.class.loader</code> to specify the Groovy class loader.</p></div><div class="paragraph"><p>Here is the full Java command (with configured classpath) and the error Grape library throws because of the invalid class loader:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; java -Djava.system.class.loader=groovy.lang.GroovyClassLoader -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar:$HOME/.m2/repository/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar" CountLinks https://e.printstacktrace.blogException in thread "main" java.lang.ExceptionInInitializerErrorCaused by: java.lang.RuntimeException: No suitable ClassLoader found for grabat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)at java.lang.reflect.Constructor.newInstance(Constructor.java:423)...at org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite.invoke(StaticMetaMethodSite.java:46)at org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite.callStatic(StaticMetaMethodSite.java:102)at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:55)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:197)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:217)at CountLinks.&lt;clinit&gt;(CountLinks.groovy)</code></pre></div></div><div class="paragraph"><p>However, there is workaround we can apply. We can turn off Grape dependency manager with <code>-Dgroovy.grape.enabled=false</code> option and we can add Jsoup library JAR file to the classpath manually instead. Let&#8217;s give it a shot and see what happens.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">java -Dgroovy.grape.enable=false -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar:$HOME/.groovy/grapes/org.jsoup/jsoup/jars/jsoup-1.11.3.jar" CountLinks https://e.printstacktrace.blogWebsite https://e.printstacktrace.blog contains 95 links.</code></pre></div></div><div class="paragraph"><p>In this case, we only added <code>groovy-all-2.5.2.jar</code> and <code>jsoup-1.11.3.jar</code> to execute the script successfully. Measuring execution time of the compiled Java program without Grape dependency manager shown that it takes around <strong>1 second</strong> in average to produce the same output as it was before. We still suffer from JVM boot time, but we can improve in this area as well. It&#8217;s time to create GraalVM native image.</p></div></div></div><div class="sect1"><h2>Creating GraalVM native image</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s use the existing CountLinks.class file to create a GraalVM native image from it. We need two JSON files containing reflection configuration for GraalVM. The first one <a href="https://gist.github.com/wololock/e99d748e724bf5ae6ce930c1b8cb9a90" target="_blank" rel="noopener">can be found here</a>, and it contains a configuration of all dynamically generated runtime methods for Groovy 2.5.2. The second one contains only Groovy script class we created.</p></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">You can also generate <code>dgm.json</code> file on your own <a href="https://gist.github.com/wololock/ac83a8196a8252fbbaacf4ac84e10b36" target="_blank" rel="noopener">using the following Groovy script</a>.</td></tr></table></div><div class="listingblock"><div class="title">Listing 2. src/countlinks.json</div><div class="content"><pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">[  {    "name": "CountLinks",    "allDeclaredConstructors": true,    "allPublicConstructors": true,    "allDeclaredMethods": true,    "allPublicMethods": true  }]</code></pre></div></div><div class="listingblock"><div class="title">Listing 3. Creating native image</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; native-image -Dgroovy.grape.enable=false \    --enable-url-protocols=https \    --allow-incomplete-classpath \    -H:+AllowVMInspection \    -H:+ReportUnsupportedElementsAtRuntime \    -H:ReflectionConfigurationFiles=dgm.json,countlinks.json \    --no-server \    -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar:$HOME/.groovy/grapes/org.jsoup/jsoup/jars/jsoup-1.11.3.jar" \    CountLinks[countlinks:305]    classlist:   2,110.17 ms[countlinks:305]        (cap):     998.28 ms[countlinks:305]        setup:   2,746.31 ms[countlinks:305]   (typeflow):  47,883.31 ms[countlinks:305]    (objects): 107,634.87 ms[countlinks:305]   (features):   1,475.31 ms[countlinks:305]     analysis: 158,631.80 ms[countlinks:305]     universe:   1,639.31 ms[countlinks:305]      (parse):   5,070.39 ms[countlinks:305]     (inline):   4,234.00 ms[countlinks:305]    (compile):  34,543.96 ms[countlinks:305]      compile:  46,402.57 ms[countlinks:305]        image:  10,556.78 ms[countlinks:305]        write:   1,365.01 ms[countlinks:305]      [total]: 223,632.13 ms</code></pre></div></div><div class="paragraph"><p>The native image generation succeeds. Let&#8217;s run it.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; ./countlinks https://e.printstacktrace.blogException in thread "main" groovy.lang.MissingMethodException: No signature of method: static org.codehaus.groovy.runtime.InvokerHelper.runScript() is applicable for argument types: (Class, [Ljava.lang.String;) values: [class CountLinks, [https://e.printstacktrace.blog]]at groovy.lang.MetaClassImpl.invokeStaticMissingMethod(MetaClassImpl.java:1528)at groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1514)at org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:52)at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:136)at CountLinks.main(CountLinks.groovy)</code></pre></div></div><div class="paragraph"><p>No luck. GraalVM throws this exception because at the current stage of the development<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup> it is not possible to invoke any Groovy script class that is not statically compiled. Let&#8217;s fix it. We use compiler configuration script file named <code>compiler.groovy</code>. It adds static compilation and type checking.</p></div><div class="listingblock"><div class="title">Listing 4. src/compiler.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">withConfig(configuration) {    ast(groovy.transform.CompileStatic)    ast(groovy.transform.TypeChecked)}</code></pre></div></div><div class="paragraph"><p>Let&#8217;s recompile the code using compiler configuration script.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; groovyc --configscript=compiler.groovy CountLinks.groovyorg.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:CountLinks.groovy: 7: [Static type checking] - The variable [args] is undeclared. @ line 7, column 20.   final String url = args[0]                      ^1 error</code></pre></div></div><div class="paragraph"><p>Bad luck. The error thrown by the static type checking says that there is no args variable available. We need to modify our initial script to make args variable available.</p></div><div class="listingblock"><div class="title">Listing 5. src/CountLinks.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">#!groovyimport org.jsoup.Jsoupimport org.jsoup.nodes.Document@Grab(group='org.jsoup', module='jsoup', version='1.11.3')final String[] args = getProperty("args") as String[]final String url = args[0]final Document doc = Jsoup.connect(url).get()final int links = doc.select("a").size()println "Website ${url} contains ${links} links."</code></pre></div></div><div class="paragraph"><p>Before we create a native image, let&#8217;s run this statically compiled Groovy script as a Java program to see if it makes any difference comparing to the previous example. It is not a bulletproof benchmark, but it looks like the new bytecode executes in around 830 milliseconds.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; time java -Dgroovy.grape.enable=false -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar:$HOME/.groovy/grapes/org.jsoup/jsoup/jars/jsoup-1.11.3.jar" CountLinks https://e.printstacktrace.blogWebsite https://e.printstacktrace.blog contains 95 links.java -Dgroovy.grape.enable=false -cp  CountLinks   2,59s user 0,13s system 330% cpu 0,823 total</code></pre></div></div><div class="paragraph"><p>Let&#8217;s recreate the native image.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; native-image -Dgroovy.grape.enable=false \    --enable-url-protocols=https \    --allow-incomplete-classpath \    -H:+AllowVMInspection \    -H:+ReportUnsupportedElementsAtRuntime \    -H:ReflectionConfigurationFiles=dgm.json,countlinks.json \    --no-server \    -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar:$HOME/.groovy/grapes/org.jsoup/jsoup/jars/jsoup-1.11.3.jar" \    CountLinks[countlinks:17259]    classlist:   1,989.96 ms[countlinks:17259]        (cap):     989.83 ms[countlinks:17259]        setup:   2,380.31 ms[countlinks:17259]   (typeflow):  42,717.13 ms[countlinks:17259]    (objects): 105,959.35 ms[countlinks:17259]   (features):   1,133.75 ms[countlinks:17259]     analysis: 151,461.35 ms[countlinks:17259]     universe:   1,489.67 ms[countlinks:17259]      (parse):   4,564.73 ms[countlinks:17259]     (inline):   4,501.88 ms[countlinks:17259]    (compile):  33,623.14 ms[countlinks:17259]      compile:  45,452.90 ms[countlinks:17259]        image:   9,294.79 ms[countlinks:17259]        write:     743.83 ms[countlinks:17259]      [total]: 212,978.90 ms</code></pre></div></div><div class="paragraph"><p>And let&#8217;s run it.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">&gt; time ./countlinks https://e.printstacktrace.blogWARNING: The sunec native library, required by the SunEC provider, could not be loaded. This library is usually shipped as part of the JDK and can be found under &lt;JAVA_HOME&gt;/jre/lib/&lt;platform&gt;/libsunec.so. It is loaded at run time via System.loadLibrary("sunec"), the first time services from SunEC are accessed. To use this provider's services the java.library.path system property needs to be set accordingly to point to a location that contains libsunec.so. Note that if java.library.path is not set it defaults to the current working directory.Exception in thread "main" org.codehaus.groovy.runtime.InvokerInvocationException: java.lang.UnsatisfiedLinkError: sun.security.ec.ECDSASignature.verifySignedDigest([B[B[B[B)Z [symbol: Java_sun_security_ec_ECDSASignature_verifySignedDigest or Java_sun_security_ec_ECDSASignature_verifySignedDigest___3B_3B_3B_3B]at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:111)at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:326)at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1235)at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)at org.codehaus.groovy.runtime.InvokerHelper.invokePogoMethod(InvokerHelper.java:1018)at org.codehaus.groovy.runtime.InvokerHelper.invokeMethod(InvokerHelper.java:1001)at org.codehaus.groovy.runtime.InvokerHelper.runScript(InvokerHelper.java:423)at CountLinks.main(CountLinks.groovy)Caused by: java.lang.UnsatisfiedLinkError: sun.security.ec.ECDSASignature.verifySignedDigest([B[B[B[B)Z [symbol: Java_sun_security_ec_ECDSASignature_verifySignedDigest or Java_sun_security_ec_ECDSASignature_verifySignedDigest___3B_3B_3B_3B]at com.oracle.svm.jni.access.JNINativeLinkage.getOrFindEntryPoint(JNINativeLinkage.java:145)at com.oracle.svm.jni.JNIGeneratedMethodSupport.nativeCallAddress(JNIGeneratedMethodSupport.java:54)</code></pre></div></div><div class="paragraph"><p>Another error. We already used to it, right? :) This time the error we see is entirely expected. GraalVM does not support HTTPS protocol by default<sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnotedef_3" title="View footnote.">3</a>]</sup>, that is why we had to add <code>--enable-url-protocols=https</code>. However, the image we have built does not include required native library. It tries to load it, but it uses the current working directory, and it fails. The solution is simple - we need to add <code>-Djava.library.path</code> in the command line, and we are good to go.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; time ./countlinks -Djava.library.path=$JAVA_HOME/jre/lib/amd64 https://e.printstacktrace.blogWebsite https://e.printstacktrace.blog contains 95 links../countlinks -Djava.library.path=$JAVA_HOME/jre/lib/amd64   0,02s user 0,01s system 18% cpu 0,196 total</code></pre></div></div><div class="paragraph"><p>Finally! <strong>It worked!</strong> Running the program several times shows that the average execution time is around <strong>200 ms</strong> (the best time recorded: <strong>151 ms</strong>). Our program is still affected by network latency, but this is something we cannot do anything with. However, we reduced the total execution time from <strong>1.7 s</strong> to <strong>0.2 s</strong>, using almost the same script (we only have to apply the changes required by static compilation).</p></div><script id="asciicast-Q4kI1S3hKDfTvGBOdgkAIAv0q" src="https://asciinema.org/a/Q4kI1S3hKDfTvGBOdgkAIAv0q.js" async></script></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Groovy and Grape dependency management is a powerful pair of tools. And even if we can&#8217;t use Grape directly in the Java program, or we can&#8217;t invoke dynamic Groovy script in the GraalVM, we can still use almost the same bytecode and generate a standalone native image to remove the cost of the JVM boot and Grape dependency check.</p></div><div class="paragraph"><p>Of course, these benefits don&#8217;t come without a cost. The size of the generated native image is 50 MB, while the total size of the Groovy script and the two JAR dependencies it uses is around 5,6 MB. Also, the Groovy script you may want to compile to the native image might require some reworking to make it compatible with static compilation. So for some of the scripts, this might be not possible to do.</p></div><div class="paragraph"><p>I hope you&#8217;ve enjoyed reading this article and you&#8217;ve learned something useful from it. Please share your thoughts in the comments section below. I would love to hear your opinion.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Continue reading - <a href="/graalvm-native-image-inside-docker-container-does-it-make-sense/" title="GraalVM native image inside docker container - does it make sense?">GraalVM native image inside docker container - does it make sense?</a></td></tr></table></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md" class="bare" target="_blank" rel="noopener">https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="https://github.com/oracle/graal/issues/708" class="bare" target="_blank" rel="noopener">https://github.com/oracle/graal/issues/708</a></div><div class="footnote" id="_footnotedef_3"><a href="#_footnoteref_3">3</a>. <a href="https://github.com/oracle/graal/blob/master/substratevm/URL-PROTOCOLS.md#https-support" class="bare" target="_blank" rel="noopener">https://github.com/oracle/graal/blob/master/substratevm/URL-PROTOCOLS.md#https-support</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.graalvm.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GraalVM&lt;/a&gt; 1.0.0-RC11 was released yesterday, and I thought it would be an excellent excuse to play around with it a while. I decided to create a simple Groovy script that uses &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/grape.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Grape dependency management&lt;/a&gt; system to load an external library and create a standalone native image from it. I thought it wouldn&amp;#8217;t be possible, but luckily - I was wrong.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="graalvm" scheme="https://e.printstacktrace.blog/tags/graalvm/"/>
    
      <category term="native-image" scheme="https://e.printstacktrace.blog/tags/native-image/"/>
    
      <category term="grape" scheme="https://e.printstacktrace.blog/tags/grape/"/>
    
  </entry>
  
  <entry>
    <title>Deep Work - book review</title>
    <link href="https://e.printstacktrace.blog/deep-work-book-review/"/>
    <id>https://e.printstacktrace.blog/deep-work-book-review/</id>
    <published>2018-12-31T15:08:27.000Z</published>
    <updated>2018-12-31T15:08:27.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>This is the second blog post in <em>"Programmer&#8217;s Bookshelf"</em> category, and today I would like to share with you my opinion on the <em>"Deep Work"</em> book by Cal Newport. It&#8217;s not about programming, but it&#8217;s still beneficial to any software developer out there.</p></div><a id="more"></a><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>After first 2 or 3 hours of reading <a href="http://calnewport.com/about/" target="_blank" rel="noopener">Cal Newport</a> "Deep Work" I was under the impression that this book is a manifesto against modern world Internet-oriented society. It argues with the tendency of being always online reachable, continuously exposed to gigabytes of poor quality information, and chasing all possible updates, only because we might miss something important. "Deep Work" encourages to take a few steps back, slow down and think what the most important goals in our life are. In the introductory chapter Cal Newport explains: "This book is best described as an attempt to formalize and explain my attraction to depth over shallowness, and to detail the types of strategies that have helped me act on this attraction.". It&#8217;s important to understand that it is not a silver-bullet or apply-without-questioning kind of book. It&#8217;s author&#8217;s view on the deep work, and he explains it from the specific perspective - a computer science professor at Georgetown University.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/deep-work-book-review-img3.jpg"><img src="/images/deep-work-book-review-img3.jpg" alt="deep work book review img3"></a></div></div></div></div></div></div><div class="sect1"><h2>What is Deep Work?</h2><div class="sectionbody"><div class="paragraph"><p>So, what kind of work is deep work? We can find, let&#8217;s say, a formal definition in the book that says: "Professional activities performed in a state of distraction-free concentration that pushes your cognitive capabilities to their limit. These efforts create new value, improve your skill, and are hard to replicate.". But we can also find a more human-friendly and much better suite definition in it: the type of work that optimizes your performance is deep work. If we combine it with the idea of concentrating on the most important and most valuable activities for most of the time, we can see that deep work supports attempts to making our life more meaningful. I&#8217;ve read many reviews which shared the opinion, that this kind of thinking is caused by a selfish lust for power or something similar. I can&#8217;t agree with that. I see bringing more meaning to life a collaborative activity - if we can&#8217;t share our happiness or success with others, the effort we put to progress is pointless. The better we become, the better results we can produce for others.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><em>"Deep work is at a severe disadvantage in a technopoly because it builds on values like quality, craftsmanship, and mastery that are decidedly old-fashioned and nontechnological."</em></td></tr></table></div></div></div><div class="sect1"><h2>How to practice Deep Work?</h2><div class="sectionbody"><div class="paragraph"><p>The first rule explained in the book focuses on how to work deeply. It starts with an extreme example of Donald Knuth&#8217;s so-called "Monastic Philosophy" where he can dedicate almost 100% of his time to distraction-free and highly-focused work. This type of practice applies to a tiny amount of people worldwide, but there are three more philosophies we can put into action. The first of them called "Bimodal Philosophy" assumes that you can dedicate a significant amount of time during the year to in-depth work (e.g., one or two months a year you take a break from day-to-day practice and during that time you dedicate to the deep work only). The second of them, "The Rhythmic Philosophy" sounds most practical - every regular amount of time (e.g., every day) you dedicate some part of the day to distraction-free deep work. This philosophy is mostly applied to early morning rituals, where you can assign an hour or two to work on something that matters to you most. And the last philosophy Cal Newport describes is called "The Journalistic Philosophy" and he uses Walter Isaacson as an example of a person who can jump into in-depth work mode almost any time he gets inspired. He doesn&#8217;t rate one philosophy over another; it&#8217;s not a competition. It&#8217;s not even a closed list, and it is entirely possible that there are other techniques (or philosophies) that do the work even better. It is mostly about choosing whatever works for us best and taking the best of it.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/deep-work-book-review-img1.jpg"><img src="/images/deep-work-book-review-img1.jpg" alt="deep work book review img1"></a></div></div></div></div></div></div><div class="sect1"><h2>Is "Deep Work" worth reading?</h2><div class="sectionbody"><div class="paragraph"><p>The binary Yes/No answer is - yes. But it depends. I&#8217;ve found "Deep Work" an exciting and practical lecture because it felt like I lost the ability to work with a high level of concentration some time ago. It&#8217;s not revolutionary, and it does not present any ideas you won&#8217;t find in other books, but it still condense many useful and scientific proven information. It might look too wordy, and it could do the same job half size. Also, some of the examples are sound bizarre and very inaccurate (like the ones described with "Embrace boredom" rule). But it doesn&#8217;t change the fact that it presents valuable and useful information to any knowledge-worker.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">My rating on Goodreads.com - <a href="https://www.goodreads.com/review/show/2647838546" target="_blank" rel="noopener">4/5 stars</a></td></tr></table></div></div></div><div class="sect1"><h2>Brain dump: 10 ideas to remember</h2><div class="sectionbody"><div class="olist arabic"><ol class="arabic"><li><p>Define what matters to you most and dedicate most of your attention to progress in these areas (career, family, relationships, personal goals).</p></li><li><p>Define what shallow work means to you and minimize the time you spent on it.</p></li><li><p>When doing a shallow job, do it effectively (e.g., batch responding to e-mails in a single time-box).</p></li><li><p>Don&#8217;t let others define your priorities. You don&#8217;t have to reply to every e-mail someone sent you.</p></li><li><p>Be smart. If social media help you achieve your goals, don&#8217;t reject it. Instead, filter all things and activities that don&#8217;t produce ANY value in your life.</p></li><li><p>You have a finite amount of willpower that becomes depleted as you use it.</p></li><li><p>Track and review the progress of the deep work dedicated toward your most important goals.</p></li><li><p>Use shutdown ritual to program your brain that the work for today is done, and it is the right time to rest and relax. Let your subconscious mind do its job.</p></li><li><p>Train your memory with memorization techniques (worth reading: "Moonwalking with Einstein" by Joshua Foer).</p></li><li><p>Challenge yourself by setting deadlines for all activities to overcome Parkinson&#8217;s law. Use 30-minutes buffers in case an important activity was underestimated and you don&#8217;t want to drop it unfinished.</p></li></ol></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;This is the second blog post in &lt;em&gt;&quot;Programmer&amp;#8217;s Bookshelf&quot;&lt;/em&gt; category, and today I would like to share with you my opinion on the &lt;em&gt;&quot;Deep Work&quot;&lt;/em&gt; book by Cal Newport. It&amp;#8217;s not about programming, but it&amp;#8217;s still beneficial to any software developer out there.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programmer&#39;s Bookshelf" scheme="https://e.printstacktrace.blog/categories/programmer-s-bookshelf/"/>
    
    
      <category term="book" scheme="https://e.printstacktrace.blog/tags/book/"/>
    
      <category term="review" scheme="https://e.printstacktrace.blog/tags/review/"/>
    
      <category term="self-improvement" scheme="https://e.printstacktrace.blog/tags/self-improvement/"/>
    
      <category term="non-fiction" scheme="https://e.printstacktrace.blog/tags/non-fiction/"/>
    
  </entry>
  
  <entry>
    <title>Programming Groovy 2 - book review</title>
    <link href="https://e.printstacktrace.blog/programming-groovy-2-book-review/"/>
    <id>https://e.printstacktrace.blog/programming-groovy-2-book-review/</id>
    <published>2018-12-29T15:05:55.000Z</published>
    <updated>2018-12-29T15:05:55.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>When I get the paperback copy of the <a href="https://pragprog.com/book/vslg2/programming-groovy-2" target="_blank" rel="noopener">"Programming Groovy 2"</a> book back in the June 2017, I was wondering if I can find something new or exciting in the book that was written in July 2013. It took me almost 1,5 year before I have finally put the book on my desk and started reading and playing around with the examples. As a veteran Groovy developer, I have to say - it was worth it!</p></div><a id="more"></a><div class="paragraph"><p>If I have to describe the book in only one sentence, I would say that "Programming Groovy 2" is the most pragmatic and gentle introduction to the Groovy programming language. Instead of explaining all possible features and use cases it focuses on the following major areas:</p></div><div class="ulist"><ul><li><p>a practical introduction to the language,</p></li><li><p>using Groovy to solve day-to-day tasks,</p></li><li><p>experimenting with metaprogramming to get even more from the language.</p></li></ul></div><div class="sect1"><h2>What&#8217;s inside?</h2><div class="sectionbody"><div class="paragraph"><p>In the <strong>first part</strong> of the book, you will learn the differences between Groovy and Java. Reading this part of the book was more exciting back in the days before Java 8 because the concepts like closures or collections bulk operations had no equivalents in the raw Java language. However, it still contains a lot of important and interesting information, like dynamic typing or working with Groovy strings to name a few - something that any newcomer will appreciate and learn a lot from.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/programming-groovy-img2.jpg"><img src="/images/programming-groovy-img2.jpg" alt="programming groovy img2"></a></div></div></div></div><div class="paragraph"><p><strong>Part 2</strong> focuses on the 3 practical use cases: working with XML files, connecting and querying the database, and using Groovy as a scripting language. It also covers one funny, at least for me use case - using Groovy SQL to query Excel document through JDBC interface. I was completely unaware that you can do something like that, I just never worked with Excel documents that way. It would save me much time if I knew that a few years earlier.</p></div><div class="paragraph"><p><strong>Part 3</strong> introduces metaprogramming capabilities and shows various ways you can apply it for your own needs. Starting from simple method injection at the runtime, up to AST transformations applied during the code compilation phase. It explains in details Groovy&#8217;s MOP (meta-object protocol) layer, and if you ever wonder how does Groovy handle dynamic method invocation, the answer is here.</p></div><div class="paragraph"><p><strong>Part 4</strong> closes the book with a few extensive examples of Groovy metaprogramming in action - builders, mocking and building DSLs. The previous part gives a solid foundation to understand the language&#8217;s dynamic nature and capabilities of MOP (and its limitations). The last part of the book puts everything into action making the story complete.</p></div></div></div><div class="sect1"><h2>Who is this book for?</h2><div class="sectionbody"><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/programming-groovy-img1.jpg"><img src="/images/programming-groovy-img1.jpg" alt="programming groovy img1"></a></div></div></div></div><div class="paragraph"><p><a href="https://twitter.com/venkat_s" target="_blank" rel="noopener">Venkat Subramanian</a> has his unique and effective style of teaching. I&#8217;ve read "Programming Groovy 2" after spending 7 years with Groovy, and I still found it interesting and worth reading. The book aged gracefully and even though it covers Groovy version <code>2.1.1</code>, it is still the right choice to start a journey with Groovy with it. It covers fundamental language concepts that didn&#8217;t change much since 2013. So if you want to give Groovy a chance and you are looking for a practical guide - this book is definitely for you. Also, if you are already in the ecosystem and you want to improve your understanding of the language and its powerful features, you will also find "Programming Groovy 2" an exciting lecture. Tons of practical examples, very natural and smooth writing style, and a great learning experience - and all of it in a book with 300 pages. You can work it out in one weekend with the fast pace, or you can relax and split the experience into a several 1-hour long learning sessions. Whatever works for you best.</p></div></div></div><div class="sect1"><h2>Bonus: how did I get my copy of the book?</h2><div class="sectionbody"><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/programming-groovy-img4.jpg"><img src="/images/programming-groovy-img4.jpg" alt="programming groovy img4"></a></div></div></div></div><div class="paragraph"><p>I got my paperback copy in June 2017. I was lucky enough to draw a book prize during <a href="http://day.torun.jug.pl/" target="_blank" rel="noopener">Toruń JUG Day</a> event with Venkat Subramanian. It was the second time I had a pleasure to meet Venkat in person and spent time on talking not only programming related topics. It was such an excellent experience! Venkat is not only a great teacher but also one of the kindest person I have ever met in the tech industry.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/programming-groovy-img3.jpg"><img src="/images/programming-groovy-img3.jpg" alt="programming groovy img3"></a></div></div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;When I get the paperback copy of the &lt;a href=&quot;https://pragprog.com/book/vslg2/programming-groovy-2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&quot;Programming Groovy 2&quot;&lt;/a&gt; book back in the June 2017, I was wondering if I can find something new or exciting in the book that was written in July 2013. It took me almost 1,5 year before I have finally put the book on my desk and started reading and playing around with the examples. As a veteran Groovy developer, I have to say - it was worth it!&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programmer&#39;s Bookshelf" scheme="https://e.printstacktrace.blog/categories/programmer-s-bookshelf/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="book" scheme="https://e.printstacktrace.blog/tags/book/"/>
    
      <category term="review" scheme="https://e.printstacktrace.blog/tags/review/"/>
    
      <category term="programming" scheme="https://e.printstacktrace.blog/tags/programming/"/>
    
      <category term="reading" scheme="https://e.printstacktrace.blog/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>Spock assertion inside if-statement doesn&#39;t work - why?</title>
    <link href="https://e.printstacktrace.blog/spock-assertion-inside-if-statement-doesnt-work-why/"/>
    <id>https://e.printstacktrace.blog/spock-assertion-inside-if-statement-doesnt-work-why/</id>
    <published>2018-12-27T18:52:37.000Z</published>
    <updated>2018-12-27T18:52:37.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p><a href="http://spockframework.org/" target="_blank" rel="noopener">Spock Framework</a> is one of my favorite tools in the Groovy ecosystem toolbox. It makes writing automated tests a few times more pleasant thanks to its opinionated syntax. From time to time I see some corner cases where Spock behaves unexpectedly. Today I would like to show you one of these corner cases and explains what happens under the hood.</p></div><a id="more"></a><div class="sect1"><h2>The basics</h2><div class="sectionbody"><div class="paragraph"><p>Spock uses a given-when-then structure known from <a href="https://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank" rel="noopener">Behavior-driven development</a>. Its tidy syntax comes with some imposed requirements and limitations, like the one mentioned in the Spock&#8217;s documentation:<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p></div><div class="quoteblock"><blockquote><div class="paragraph"><p>The <code>when</code> and <code>then</code> blocks always occur together. They describe a stimulus and the expected response. Whereas <code>when</code> blocks may contain arbitrary code, <code>then</code> blocks are restricted to <em>conditions</em>, <em>exception conditions</em>, <em>interactions</em>, and <em>variable definitions</em>. A feature method may contain multiple pairs of <code>when</code>-<code>then</code> blocks.</p></div></blockquote></div><div class="paragraph"><p>It states clearly what 4 kinds of statements we can use inside <code>then</code> block. Let&#8217;s take a closer look at all of them.</p></div><div class="sect2"><h3>1. Conditions</h3><div class="listingblock"><div class="title">Listing 1. An example of the condition in the then block</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:expected == result</code></pre></div></div><div class="paragraph"><p>This is a simple expression that compares some <code>result</code> with <code>expected</code> value, which was defined most probably in the <code>given</code> or <code>setup</code> block.</p></div></div><div class="sect2"><h3>2. Exception conditions</h3><div class="listingblock"><div class="title">Listing 2. An example of an exception condition in the then block</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:thrown IllegalArgumentException</code></pre></div></div><div class="paragraph"><p>In this example we define expectation - an exception of a specific type has to be thrown.</p></div></div><div class="sect2"><h3>3. Interactions</h3><div class="listingblock"><div class="title">Listing 3. An example of interaction expectation in the then block</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:1 * foo.bar() &gt;&gt; "Hello!"</code></pre></div></div><div class="paragraph"><p>In this example, we say that we expect that <code>foo.bar()</code> method gets called exactly one time, and it returns <code>"Hello"</code> value.</p></div></div><div class="sect2"><h3>4. Variable definitions</h3><div class="listingblock"><div class="title">Listing 4. An example of variable definition in the then block</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:def expected = 10result == expected</code></pre></div></div><div class="paragraph"><p>So here&#8217;s the last available statement type - variable definition. As you can see you can define any variable inside the <code>then</code> block, however, this is not a good practice. The <code>then</code> block should be as small and smooth as possible, and this variable definition adds nothing else than noise. In some specific use cases, it might make more sense to do so, but it&#8217;s usually a better choice to consider <code>given</code> or <code>setup</code> blocks for variable definitions.</p></div></div></div></div><div class="sect1"><h2>Using if-statement in the <code>then</code> block</h2><div class="sectionbody"><div class="paragraph"><p>Now when we have recapped basic concepts of Spock&#8217;s <code>then</code> block structure, let&#8217;s take a look at some unusual example. Below you can find a simple Spock unit test that contains 3 methods. The expectation is that all of them fail because of unsatisfied assertion.</p></div><div class="listingblock"><div class="title">Listing 5. All of these test methods should fail</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.CompileStaticimport spock.lang.Specification@CompileStaticclass SpockThenSpecialUseCase extends Specification {    def "(1) should fail on expected == result comparison"() {        given:        def expected = "Hello, John!"        when:        def result = "Hello, Joe!"        then:        expected == result    }    def "(2) should fail on expected == result comparison"() {        given:        def expected = "Hello, John!"        when:        def result = "Hello, Joe!"        then:        if (expected) {            expected == result        }    }    def "(3) should fail on expected == result comparison"() {        given:        def expected = "Hello, John!"        when:        def result = "Hello, Joe!"        then:        if (expected) {            assert expected == result        }    }}</code></pre></div></div><div class="paragraph"><p>When we run this test we will see the following result:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/spock-then-if-assertion.png}"><img src="/images/spock-then-if-assertion.png" alt="spock then if assertion"></a></div></div></div></div><div class="paragraph"><p>The second test case didn&#8217;t fail as expected. The answer is clear and straightforward - if-statement does not fit to any of 4 statements we have described in the previous section.</p></div></div></div><div class="sect1"><h2>Looking for an answer</h2><div class="sectionbody"><div class="paragraph"><p>I&#8217;m pretty sure this simple answer does not satisfy your pursuit to better understanding what happens under the hood. Let&#8217;s dig one level down and see what the decompiled bytecode of this class looks like.</p></div><div class="listingblock"><div class="title">Listing 6. Spock test decompiled from <code>.class</code> file to Java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//import groovy.lang.GroovyObject;import org.codehaus.groovy.runtime.ScriptBytecodeAdapter;import org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation;import org.spockframework.runtime.ErrorCollector;import org.spockframework.runtime.SpockRuntime;import org.spockframework.runtime.ValueRecorder;import org.spockframework.runtime.model.BlockKind;import org.spockframework.runtime.model.BlockMetadata;import org.spockframework.runtime.model.FeatureMetadata;import org.spockframework.runtime.model.SpecMetadata;import spock.lang.Specification;@SpecMetadata(    filename = "SpockThenSpecialUseCase.groovy",    line = 4)public class SpockThenSpecialUseCase extends Specification implements GroovyObject {    public SpockThenSpecialUseCase() {    }    @FeatureMetadata(        line = 7,        name = "(1) should fail on expected == result comparison",        ordinal = 0,        blocks = {@BlockMetadata(    kind = BlockKind.SETUP,    texts = {}), @BlockMetadata(    kind = BlockKind.WHEN,    texts = {}), @BlockMetadata(    kind = BlockKind.THEN,    texts = {})},        parameterNames = {}    )    public void $spock_feature_0_0() { <i class="conum" data-value="1"></i><b>(1)</b>        ErrorCollector $spock_errorCollector = new ErrorCollector(false);        ValueRecorder $spock_valueRecorder = new ValueRecorder();        Object var10000;        try {            String expected = "Hello, John!";            String result = "Hello, Joe!";            try {                SpockRuntime.verifyCondition($spock_errorCollector, $spock_valueRecorder.reset(), "expected == result", Integer.valueOf(15), Integer.valueOf(9), (Object)null, $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(2)), ScriptBytecodeAdapter.compareEqual($spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(0)), expected), $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(1)), result))));                var10000 = null;            } catch (Throwable var14) {                SpockRuntime.conditionFailedWithException($spock_errorCollector, $spock_valueRecorder, "expected == result", Integer.valueOf(15), Integer.valueOf(9), (Object)null, var14);                var10000 = null;            } finally {                ;            }            ScriptBytecodeAdapter.invokeMethod0(SpockThenSpecialUseCase.class, ((SpockThenSpecialUseCase)this).getSpecificationContext().getMockController(), (String)"leaveScope");        } finally {            $spock_errorCollector.validateCollectedErrors();            var10000 = null;        }    }    @FeatureMetadata(        line = 18,        name = "(2) should fail on expected == result comparison",        ordinal = 1,        blocks = {@BlockMetadata(    kind = BlockKind.SETUP,    texts = {}), @BlockMetadata(    kind = BlockKind.WHEN,    texts = {}), @BlockMetadata(    kind = BlockKind.THEN,    texts = {})},        parameterNames = {}    )    public void $spock_feature_0_1() { <i class="conum" data-value="2"></i><b>(2)</b>        String expected = "Hello, John!";        String result = "Hello, Joe!";        if (DefaultTypeTransformation.booleanUnbox(expected)) {            ScriptBytecodeAdapter.compareEqual(expected, result);        }        ScriptBytecodeAdapter.invokeMethod0(SpockThenSpecialUseCase.class, ((SpockThenSpecialUseCase)this).getSpecificationContext().getMockController(), (String)"leaveScope");    }    @FeatureMetadata(        line = 31,        name = "(3) should fail on expected == result comparison",        ordinal = 2,        blocks = {@BlockMetadata(    kind = BlockKind.SETUP,    texts = {}), @BlockMetadata(    kind = BlockKind.WHEN,    texts = {}), @BlockMetadata(    kind = BlockKind.THEN,    texts = {})},        parameterNames = {}    )    public void $spock_feature_0_2() { <i class="conum" data-value="3"></i><b>(3)</b>        ErrorCollector $spock_errorCollector = new ErrorCollector(false);        ValueRecorder $spock_valueRecorder = new ValueRecorder();        Object var10000;        try {            String expected = "Hello, John!";            String result = "Hello, Joe!";            if (DefaultTypeTransformation.booleanUnbox(expected)) {                try {                    SpockRuntime.verifyCondition($spock_errorCollector, $spock_valueRecorder.reset(), "expected == result", Integer.valueOf(40), Integer.valueOf(20), (Object)null, $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(2)), ScriptBytecodeAdapter.compareEqual($spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(0)), expected), $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(1)), result))));                    var10000 = null;                } catch (Throwable var14) {                    SpockRuntime.conditionFailedWithException($spock_errorCollector, $spock_valueRecorder, "expected == result", Integer.valueOf(40), Integer.valueOf(20), (Object)null, var14);                    var10000 = null;                } finally {                    ;                }            }            ScriptBytecodeAdapter.invokeMethod0(SpockThenSpecialUseCase.class, ((SpockThenSpecialUseCase)this).getSpecificationContext().getMockController(), (String)"leaveScope");        } finally {            $spock_errorCollector.validateCollectedErrors();            var10000 = null;        }    }}</code></pre></div></div><div class="paragraph"><p>The Java code doesn&#8217;t look as smooth as Groovy one, but we can quickly spot the most interesting parts. The method <em class="conum" data-value="1"></em> shows what does the decompiled bytecode representation looks like. We can see that the following Spock part:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:expected == result</code></pre></div></div><div class="paragraph"><p>gets replaced by something like this (method call formatted for better readability):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">SpockRuntime.verifyCondition(    $spock_errorCollector,    $spock_valueRecorder.reset(),    "expected == result",    Integer.valueOf(15),    Integer.valueOf(9),    (Object)null,    $spock_valueRecorder.record(        $spock_valueRecorder.startRecordingValue(Integer.valueOf(2)),        ScriptBytecodeAdapter.compareEqual(            $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(0)), expected),            $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(1)), result)        )    ));</code></pre></div></div><div class="paragraph"><p>Spock uses its custom compiler which modifies abstract syntax tree (AST) of your unit test. It checks if the <code>then</code> (and any other) block meets requirements and rewrites it. There are two methods we could start investigation from to get a better understanding of what Spock does under the hood:</p></div><div class="ulist"><ul><li><p><a href="https://github.com/spockframework/spock/blob/spock-1.2/spock-core/src/main/java/org/spockframework/compiler/SpecRewriter.java#L322-L338" target="_blank" rel="noopener"><code>org.spockframework.compiler.SpecRewriter.visitThenBlock()</code></a></p></li><li><p><a href="https://github.com/spockframework/spock/blob/spock-1.2/spock-core/src/main/java/org/spockframework/compiler/DeepBlockRewriter.java#L141-L164" target="_blank" rel="noopener"><code>org.spockframework.compiler.DeepBlockRewriter.handleImplicitCondition()</code></a></p></li></ul></div><div class="paragraph"><p>Now, let&#8217;s take a quick look at the <em class="conum" data-value="2"></em> test case that used if-statement inside the <code>then</code> block and passed:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public void $spock_feature_0_1() {    String expected = "Hello, John!";    String result = "Hello, Joe!";    if (DefaultTypeTransformation.booleanUnbox(expected)) {        ScriptBytecodeAdapter.compareEqual(expected, result);    }    ScriptBytecodeAdapter.invokeMethod0(SpockThenSpecialUseCase.class, ((SpockThenSpecialUseCase)this).getSpecificationContext().getMockController(), (String)"leaveScope");}</code></pre></div></div><div class="paragraph"><p>It looks like not a single line of code got modified the AST. It happened because Spock&#8217;s compiler didn&#8217;t find a valid statement for a <code>then</code> block and thus it didn&#8217;t have to rewrite anything.</p></div><div class="paragraph"><p>A different situation takes place in the example <em class="conum" data-value="3"></em>. Here we have called <code>assert</code> explicitly, and it was an explicit instruction for Spock&#8217;s compiler to modify AST. The if-statement is still here, but the following part:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:if (expected) {    assert expected == result}</code></pre></div></div><div class="paragraph"><p>was compiled to a following code (decompiled Java representation):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">if (DefaultTypeTransformation.booleanUnbox(expected)) {    try {        SpockRuntime.verifyCondition(            $spock_errorCollector,            $spock_valueRecorder.reset(),            "expected == result",            Integer.valueOf(40),            Integer.valueOf(20),            (Object)null,            $spock_valueRecorder.record(                $spock_valueRecorder.startRecordingValue(Integer.valueOf(2)),                ScriptBytecodeAdapter.compareEqual(                    $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(0)), expected),                    $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(1)), result)                )            )        );        var10000 = null;    } catch (Throwable var14) {        SpockRuntime.conditionFailedWithException($spock_errorCollector, $spock_valueRecorder, "expected == result", Integer.valueOf(40), Integer.valueOf(20), (Object)null, var14);        var10000 = null;    } finally {        ;    }}</code></pre></div></div><div class="paragraph"><p>As we can see Spock understands explicit <code>assert</code> instruction and passes its condition to&nbsp;a&nbsp; <code>SpockRuntime.verifyCondition()</code> method as shown above.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I hope you find this article interesting. Don&#8217;t hesitate to leave a comment in the section below. Maybe you have experienced some unexpected Spock behavior - please share your story with the rest of us. Take care and see you next time!</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="http://spockframework.org/spock/docs/1.2/spock_primer.html#_when_and_then_blocks" class="bare" target="_blank" rel="noopener">http://spockframework.org/spock/docs/1.2/spock_primer.html#_when_and_then_blocks</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://spockframework.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spock Framework&lt;/a&gt; is one of my favorite tools in the Groovy ecosystem toolbox. It makes writing automated tests a few times more pleasant thanks to its opinionated syntax. From time to time I see some corner cases where Spock behaves unexpectedly. Today I would like to show you one of these corner cases and explains what happens under the hood.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Tales from debugger" scheme="https://e.printstacktrace.blog/categories/tales-from-debugger/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="spock" scheme="https://e.printstacktrace.blog/tags/spock/"/>
    
      <category term="testing" scheme="https://e.printstacktrace.blog/tags/testing/"/>
    
      <category term="unit-testing" scheme="https://e.printstacktrace.blog/tags/unit-testing/"/>
    
  </entry>
  
  <entry>
    <title>JUnit Assume.assumeNotNull(obj) throws NullPointerException in Groovy - what&#39;s wrong?</title>
    <link href="https://e.printstacktrace.blog/junit-assume-notnull-throws-nullpointerexception-in-groovy-whats-wrong/"/>
    <id>https://e.printstacktrace.blog/junit-assume-notnull-throws-nullpointerexception-in-groovy-whats-wrong/</id>
    <published>2018-12-20T23:49:07.000Z</published>
    <updated>2018-12-20T23:49:07.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Ignoring some of the unit tests when given conditions are not satisfied is a handy feature of a JUnit framework. I guess you have used many times constructions like <code>Assume.assumeTrue(expr)</code> or <code>Assume.assumeNotNull(expr)</code> in your test code. Today I would like to show you one pretty interesting corner case when the usage of <code>Assume.assumeNotNull(expr)</code> throws NPE in the unit test written in Groovy.</p></div><a id="more"></a><div class="paragraph"><p>Let&#8217;s start with a simple example. Below you can find a JUnit test written in Groovy.</p></div><div class="listingblock"><div class="title">Listing 1. src/test/groovy/GroovyAssumeNotNull.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import org.junit.Assumeimport org.junit.Testclass GroovyAssumeNotNull {    @Test    void testAssumeNotNull() {        def name = System.getProperty("something", null)        Assume.assumeNotNull(name)        assert name.length() &gt; 10    }}</code></pre></div></div><div class="paragraph"><p>The idea behind this test is straightforward - if property <code>something</code> does not exist we expect this test case to be ignored. Otherwise, we check if the value stored in this property is longer than 10 characters. Let&#8217;s run the test and see what happens.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-junit-assume-notnull-npe.png"><img src="/images/groovy-junit-assume-notnull-npe.png" alt="groovy junit assume notnull npe"></a></div></div></div></div><div class="paragraph"><p>Seeing <code>NullPointerException</code> in this test is very unexpected. It&#8217;s a bit confusing because the same test written in plain Java behaves as expected.</p></div><div class="listingblock"><div class="title">Listing 2. src/test/java/JavaAssumeNotNull.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import org.junit.Assert;import org.junit.Assume;import org.junit.Test;public class JavaAssumeNotNull {    @Test    public void testAssumeNotNull() {        String name = System.getProperty("something");        Assume.assumeNotNull(name);        Assert.assertTrue(name.length() &gt; 10);    }}</code></pre></div></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/java-junit-assume-notnull.png"><img src="/images/java-junit-assume-notnull.png" alt="java junit assume notnull"></a></div></div></div></div><div class="paragraph"><p>The main question is - what&#8217;s going on?</p></div><div class="sect1"><h2>Wrapping <code>null</code> variables with arrays</h2><div class="sectionbody"><div class="paragraph"><p>To understand in details what&#8217;s happening in this situation we need to take a few steps back. It&#8217;s important to check what does the <code>Assume.assumeNotNull(expr)</code> method looks like.</p></div><div class="listingblock"><div class="title">Listing 3. The implementation of <code>assumeNotNull</code> method</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public static void assumeNotNull(Object... objects) {    assumeThat(Arrays.asList(objects), CoreMatchers.everyItem(CoreMatchers.notNullValue()));}</code></pre></div></div><div class="paragraph"><p>We can see that this method defines parameters as varargs. There are 3 different values (or states) we can expect here:</p></div><div class="ulist"><ul><li><p>non-empty array</p></li><li><p>an empty array</p></li><li><p>a null value</p></li></ul></div><div class="paragraph"><p>Let&#8217;s take a quick look at this simple Java example that explains in which conditions specific values occur:</p></div><div class="listingblock"><div class="title">Listing 4. Five different use cases of invoking method with varargs parameters</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import java.util.Arrays;public class VarargsWrappingExample {    public static void main(String[] args) {        String name1 = "John";        String name2 = null;        foo(name1);        foo(name2);        foo((String) null);        foo((String[]) null);        foo(null);    }    static void foo(String... args) {        System.out.println("args = " + Arrays.toString(args));    }}</code></pre></div></div><div class="paragraph"><p>And here is the output:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">args = [John]args = [null]args = [null]args = nullargs = null</code></pre></div></div><div class="paragraph"><p>We can sum it up with the following observation:</p></div><div class="ulist"><ul><li><p>if we pass a non-array value with its type information to the method that accepts varargs, the value gets wrapped with the array of this specific type,</p></li><li><p>if we pass a value of array type - no additional wrapping with the array is needed</p></li><li><p>if we pass a <code>null</code> value without type information, varargs is represented as <code>null</code>.</p></li></ul></div><div class="paragraph"><p>Now, what happens inside <code>Assume.assumeNotNull(expr)</code> method is the following: it expects a non-empty array as an input, then it transforms this array into a list, and it verifies that all elements of this list are not <code>null</code> values. Otherwise, it ignores the test. It works as expected when the <code>null</code> value gets wrapped with an array because we get a list with just one element - the <code>null</code> value.</p></div><div class="quoteblock"><blockquote><div class="paragraph"><p></p><h4>15.12.4.2. Evaluate Arguments</h4><p></p></div><div class="paragraph"><p>The process of evaluating the argument list differs, depending on whether the method being invoked is a fixed arity method or a variable arity method (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1" target="_blank" rel="noopener">§8.4.1</a>).</p></div><div class="paragraph"><p>If the method being invoked is a variable arity method <code>m</code>, it necessarily has <code>n &gt; 0</code> formal parameters. The final formal parameter of m necessarily has type <code>T[]</code> for some <code>T</code>, and m is necessarily being invoked with <code>k ≥ 0</code> actual argument expressions.</p></div><div class="paragraph"><p>If <code>m</code> is being invoked with <code>k ≠ n</code> actual argument expressions, or, if <code>m</code> is being invoked with <code>k = n</code> actual argument expressions and the type of the k&#8217;th argument expression is not assignment compatible with <code>T[]</code>, then the argument list (<code>e1</code>, &#8230;&#8203;, <code>en-1</code>, <code>en</code>, &#8230;&#8203;, <code>ek</code>) is evaluated as if it were written as (<code>e1</code>, &#8230;&#8203;, <code>en-1</code>, <code>new |T[]| { en, &#8230;&#8203;, ek }</code>), where <code>|T[]|</code> denotes the erasure (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.6" target="_blank" rel="noopener">§4.6</a>) of <code>T[]</code>.</p></div><div class="paragraph"><p></p><hr><p></p></div><div class="paragraph"><p>Source: <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.4.2" target="_blank" rel="noopener">Java Language Specification, Chapter 15: Expressions</a></p></div></blockquote></div><div class="paragraph"><p>When we finally understand how does the Java varargs wrapping mechanism works, let&#8217;s try to understand the Groovy use case. In contrast to Java&#8217;s static compilation, Groovy is a dynamically typed language by default. It means that <strong>the decision about the variable type is made in the runtime</strong>. And it makes a quite straightforward decision - the method expects an array of objects, a <code>null</code> value is passed, and for Groovy this is direct information that you consciously assigned <code>null</code> to an array. This is the price of the dynamic type system, where the context of specific usage matters.</p></div></div></div><div class="sect1"><h2>The solution</h2><div class="sectionbody"><div class="paragraph"><p>There are at least two ways you can make a Groovy example ignore the test in the same way as the Java example does.</p></div><div class="sect3"><h4>1. Wrap the variable with array and make the type explicit</h4><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import org.junit.Assumeimport org.junit.Testclass GroovyAssumeNotNull {    @Test    void testAssumeNotNull() {        def name = System.getProperty("something", null)        Assume.assumeNotNull([name] as Object[])        assert name.length() &gt; 10    }}</code></pre></div></div><div class="paragraph"><p>In this case, we decide for Groovy that the non-array variable has to be wrapped with an array of the given type.</p></div></div><div class="sect3"><h4>2. Use static compilation</h4><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.CompileStaticimport org.junit.Assumeimport org.junit.Test@CompileStaticclass GroovyAssumeNotNull {    @Test    void testAssumeNotNull() {        def name = System.getProperty("something", null)        Assume.assumeNotNull(name)        assert name.length() &gt; 10    }}</code></pre></div></div><div class="paragraph"><p>If we don&#8217;t use any of Groovy&#8217;s dynamic features, we can consider using static compilation with <code>@CompileStatic</code> annotation.</p></div></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I hope you have learned something useful from this blog post. If there is any specific Groovy related topic you would like to read about, please let me know in the comments section below. Also, don&#8217;t hesitate to share, comment and thumbs up this article, so I can see it was worth spending the time on writing these words on Friday 00:47 AM :-) See you next time!</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Ignoring some of the unit tests when given conditions are not satisfied is a handy feature of a JUnit framework. I guess you have used many times constructions like &lt;code&gt;Assume.assumeTrue(expr)&lt;/code&gt; or &lt;code&gt;Assume.assumeNotNull(expr)&lt;/code&gt; in your test code. Today I would like to show you one pretty interesting corner case when the usage of &lt;code&gt;Assume.assumeNotNull(expr)&lt;/code&gt; throws NPE in the unit test written in Groovy.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="junit" scheme="https://e.printstacktrace.blog/tags/junit/"/>
    
      <category term="testing" scheme="https://e.printstacktrace.blog/tags/testing/"/>
    
      <category term="dynamic-typing" scheme="https://e.printstacktrace.blog/tags/dynamic-typing/"/>
    
      <category term="junit-4" scheme="https://e.printstacktrace.blog/tags/junit-4/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t waste your time - Advent Of Code 2018 is running!</title>
    <link href="https://e.printstacktrace.blog/dont-waste-your-time-advent-of-code-2018-is-running/"/>
    <id>https://e.printstacktrace.blog/dont-waste-your-time-advent-of-code-2018-is-running/</id>
    <published>2018-12-02T16:23:11.000Z</published>
    <updated>2018-12-02T16:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>The <a href="https://adventofcode.com/2018" target="_blank" rel="noopener">4th edition of Advent Of Code</a> just started! In this short blog post, I would like to share with you some of my thoughts about it and why I participate in this event for the second time in the row.</p></div><a id="more"></a><div class="sect1"><h2>Advent Of Code 2017</h2><div class="sectionbody"><div class="paragraph"><p>The last edition of Advent Of Code was the first one I took part in. It was quite a challenging and exciting experience - I have found it as an excellent alternative to everyday programming tasks I do as a software engineer. It was so addictive at some point that I decided to wake up before 6:00 AM to crush the new puzzle right after it got published.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/aoc2017.jpg"><img src="/images/aoc2017.jpg" alt="aoc2017"></a></div></div></div></div></div></div><div class="sect1"><h2>Advent Of Code 2018</h2><div class="sectionbody"><div class="paragraph"><p>Yesterday the 4th edition of <a href="https://adventofcode.com" target="_blank" rel="noopener">Advent Of Code</a> has started. I have to say I was waiting for this day impatiently. This year, however, I took a different strategy - I use this year&#8217;s edition as an opportunity to sharpen <a href="https://github.com/wololock/AoC2018" target="_blank" rel="noopener">my functional programming skills with Haskell</a>. Last year I did it differently. I&#8217;ve focused only on solving the puzzles with the language I use on my daily basis - Java. It still gave me a lot of fun, and I could experiment with the algorithms I usually don&#8217;t have a chance to implement in the projects I work on. But it felt like I lost an excellent opportunity to play around with other programming languages. This year I&#8217;ve decided to take Haskell and apply the concepts I&#8217;ve learned while working with "Programming in Haskell, 2nd edition" book.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I want to encourage you to give the Advent Of Code 2018 a chance if you haven&#8217;t already. It&#8217;s fun to solve those non-trivial puzzles, and it does not require allocating a huge amount of your time. You can start anytime you want - it&#8217;s not about competing with others, it&#8217;s a great learning experience instead. Pick your strategy (learning a new programming language or sharpening the one you already know) and have fun!</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;The &lt;a href=&quot;https://adventofcode.com/2018&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;4th edition of Advent Of Code&lt;/a&gt; just started! In this short blog post, I would like to share with you some of my thoughts about it and why I participate in this event for the second time in the row.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Software developer career boost" scheme="https://e.printstacktrace.blog/categories/software-developer-career-boost/"/>
    
    
      <category term="haskell" scheme="https://e.printstacktrace.blog/tags/haskell/"/>
    
      <category term="career" scheme="https://e.printstacktrace.blog/tags/career/"/>
    
      <category term="learning" scheme="https://e.printstacktrace.blog/tags/learning/"/>
    
      <category term="progress" scheme="https://e.printstacktrace.blog/tags/progress/"/>
    
      <category term="aoc2018" scheme="https://e.printstacktrace.blog/tags/aoc2018/"/>
    
      <category term="advent-of-code" scheme="https://e.printstacktrace.blog/tags/advent-of-code/"/>
    
      <category term="programming" scheme="https://e.printstacktrace.blog/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>List of combinations from a list of lists in Groovy</title>
    <link href="https://e.printstacktrace.blog/list-of-combinations-from-list-of-lists-in-groovy/"/>
    <id>https://e.printstacktrace.blog/list-of-combinations-from-list-of-lists-in-groovy/</id>
    <published>2018-11-27T21:56:23.000Z</published>
    <updated>2018-11-27T21:56:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Groovy has many useful functions built-in, and one of them is <code>Iterable.combinations()</code> that takes aggregated collections and finds all combinations of items. However, if we take a look its source code, we will find out that it was implemented using very imperative approach (nested for-loops + some if-statement). In this blog post I will show you how to implement the same function using Groovy and <a href="/tail-recursive-methods-in-groovy/" title="tail-recursion algorithm">tail-recursion algorithm</a>. Enjoy!</p></div><a id="more"></a><div class="sect1"><h2>An example</h2><div class="sectionbody"><div class="paragraph"><p>Before we jump into a recursive algorithm implementation, let&#8217;s take a look at some examples in Groovy Shell.</p></div><div class="listingblock"><div class="title">Listing 1. Some examples of built-in <code>combinations()</code> function executed in groovysh</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">groovy:000&gt; [[]].combinations()===&gt; []groovy:000&gt; [['a']].combinations()===&gt; [[a]]groovy:000&gt; [['a',1],['b',2],[3,4,5]].combinations()===&gt; [[a, b, 3], [1, b, 3], [a, 2, 3], [1, 2, 3], [a, b, 4], [1, b, 4], [a, 2, 4], [1, 2, 4], [a, b, 5], [1, b, 5], [a, 2, 5], [1, 2, 5]]</code></pre></div></div></div></div><div class="sect1"><h2>Tail-recursive algorithm</h2><div class="sectionbody"><div class="paragraph"><p>Without further ado, let&#8217;s implement a recursive function that takes advantage of a tail call. Our algorithm can be described in just a few steps:</p></div><div class="olist arabic"><ol class="arabic"><li><p>If the input collection is empty, return accumulated result (stop condition).</p></li><li><p>Take the head of the input collection and create n new variants of each list collected in the accumulator by appending elements taken from the head list.</p></li><li><p>Call the function recursively with the tail of the input collection and re-evaluated accumulator.</p></li></ol></div><div class="paragraph"><p>We know the algorithm, let&#8217;s write some code.</p></div><div class="listingblock"><div class="title">Listing 2. Tail-recursive implementation of <code>combinations(list)</code> function</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.CompileStaticimport groovy.transform.TailRecursive/** * Generates combinations of elements. * * Example: * combinations([['a',1], ['b',2], [10,20]]) == [['a','b',10],['a','b',20],['a',2,10],['a',2,20],[1,'b',10],[1,'b',20],[1,2,10],[1,2,20]] * */@TailRecursive@CompileStatic&lt;T&gt; List&lt;List&lt;T&gt;&gt; combinations(final List&lt;List&lt;T&gt;&gt; xss, final List&lt;List&lt;T&gt;&gt; result = [[]]) {    return !xss ? result : combinations(xss.tail(), process(xss.head(), result))}/** * Generates a new accumulator by creating `n` new variants for each * accumulated list by appending elements taken from head list (`xs`). * * Example: * acc = [[]], xs = [1,2,3] =&gt; [[1],[2],[3]] * acc = [[1],[2],[3]], xs = [4,5] =&gt; [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]] * acc = [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]], xs = ['a','b'] =&gt; [[1,4,'a'],[1,4,'b'],[1,5,'a'],[1,5,'b], ..., [3,5,'a'],[3,5,'b']] * ... */@CompileStatic&lt;T&gt; List&lt;List&lt;T&gt;&gt; process(final List&lt;T&gt; xs, final List&lt;List&lt;T&gt;&gt; acc) {    return acc.inject([]) { yss, ys -&gt; yss + xs.collect { x -&gt; ys + x } }}// Let's see if implemented function meets expectationsdef values = [[1,2,3],[4,5],[6,7,8,9]]def expected = [[1,4,6],[1,4,7],[1,4,8],[1,4,9],[1,5,6],[1,5,7],[1,5,8],[1,5,9],[2,4,6],[2,4,7],[2,4,8],[2,4,9],[2,5,6],[2,5,7],[2,5,8],[2,5,9],[3,4,6],[3,4,7],[3,4,8],[3,4,9],[3,5,6],[3,5,7],[3,5,8],[3,5,9]]assert combinations(values) == expected// Let's see if combinations(list) produces the same output as list.combinations()def list = [['a',1], ['b',2], [10,20]]assert (list.combinations()) as Set == (combinations(list) as Set)</code></pre></div></div><div class="paragraph"><p>I made this exemplary code quite verbose, but you can see that after removing the verbosity it could be a one-liner.</p></div></div></div><div class="sect1"><h2>Bonus: Haskell implementation</h2><div class="sectionbody"><div class="paragraph"><p>The recursive algorithm we have implemented using Groovy asks for an example in a functional language. Let&#8217;s see what could the implementation of combinations function look like in Haskell.</p></div><div class="listingblock"><div class="title">Listing 3. Haskell implementation of combinations function</div><div class="content"><pre class="highlightjs highlight"><code class="language-haskell hljs" data-lang="haskell">combinations :: [[a]] -&gt; [[a]]combinations []       = [[]]combinations (xs:xss) = [x : xs' | x &lt;- xs, xs' &lt;- combinations xss]</code></pre></div></div><div class="paragraph"><p>It&#8217;s even more concise and more straightforward - just as expected.</p></div><div class="listingblock"><div class="title">Listing 4. Exemplary usage of combinations function in ghci</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">*Prelude&gt; combinations [[1,2],[3,4],[5,6]][[1,3,5],[1,3,6],[1,4,5],[1,4,6],[2,3,5],[2,3,6],[2,4,5],[2,4,6]]*Prelude&gt; combinations [['a','b'], ['c'], ['d','e','f']]["acd","ace","acf","bcd","bce","bcf"]*Prelude&gt; combinations [][[]]</code></pre></div></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">If you like learning new programming languages or exploring and mastering the one you already know by solving exciting puzzles, there is an excellent opportunity to do so - <strong>Advent Of Code 2018</strong> <a href="https://adventofcode.com/" target="_blank" rel="noopener">starts on Saturday, December 1st</a>. It is 25 days of programming simple solutions to quite challenging problems. You can&#8217;t miss it!</td></tr></table></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Groovy has many useful functions built-in, and one of them is &lt;code&gt;Iterable.combinations()&lt;/code&gt; that takes aggregated collections and finds all combinations of items. However, if we take a look its source code, we will find out that it was implemented using very imperative approach (nested for-loops + some if-statement). In this blog post I will show you how to implement the same function using Groovy and &lt;a href=&quot;/tail-recursive-methods-in-groovy/&quot; title=&quot;tail-recursion algorithm&quot;&gt;tail-recursion algorithm&lt;/a&gt;. Enjoy!&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="haskell" scheme="https://e.printstacktrace.blog/tags/haskell/"/>
    
      <category term="combinations" scheme="https://e.printstacktrace.blog/tags/combinations/"/>
    
      <category term="tail-recursion" scheme="https://e.printstacktrace.blog/tags/tail-recursion/"/>
    
      <category term="tail-call" scheme="https://e.printstacktrace.blog/tags/tail-call/"/>
    
      <category term="recursion" scheme="https://e.printstacktrace.blog/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>Tail-recursive methods in Groovy</title>
    <link href="https://e.printstacktrace.blog/tail-recursive-methods-in-groovy/"/>
    <id>https://e.printstacktrace.blog/tail-recursive-methods-in-groovy/</id>
    <published>2018-11-12T09:53:17.000Z</published>
    <updated>2018-12-18T09:15:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Most of the object-oriented programmers prefer constructing algorithms using imperative style over using recursion. This is pretty obvious in the JVM ecosystem, where imperative iteration is much more efficient than recursive function call chain. However, what if I tell you that in Groovy you can take advantage of clean tail-recursive functions without sacrificing performance? Interested? Let&#8217;s deep dive into it.</p></div><a id="more"></a><div class="sect1"><h2>Factorial function</h2><div class="sectionbody"><div class="paragraph"><p>Calculating factorial of a given number is one of the most popular recursive algorithms examples. In general, this function looks like this:</p></div><div class="listingblock"><div class="title">Listing 1. Exemplary factorial function implementation in Groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package factorialimport groovy.transform.CompileStaticimport groovy.transform.TypeChecked@CompileStatic@TypeCheckedclass Groovy {    static BigInteger factorial(int number) {        if (number == 1) {            return 1        }        return number * factorial(number - 1)    }}</code></pre></div></div><div class="paragraph"><p>The beauty of this example is that it is concise and straightforward. However, it comes with a cost - every recursive call adds a new frame to the call stack, and we can hit stack size limit quickly. JVM crashes with <code>StackOverflowError</code> when it happens. For instance, calculating factorial of number 7,800 hits the stack size limit (the default 1024k for OpenJDK 1.8.0_162).</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-factorial-crash.png"><img src="/images/groovy-factorial-crash.png" alt="groovy factorial crash"></a></div></div></div></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">The limitation of a recursive method call depends on stack size (JVM&#8217;s <code>-Xss</code> option) and its current usage load (e.g., an application that executes multiple recursive functions in parallel may crash for much smaller numbers for the same stack size). The default stack size for OpenJDK 1.8.0_162 is <code>1024k</code>.</td></tr></table></div></div></div><div class="sect1"><h2>Applying tail recursion</h2><div class="sectionbody"><div class="paragraph"><p>The first thing we can do to optimize our factorial function implementation is to apply tail recursion<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>. Using tail call has one significant advantage - it does not require adding a new frame to the call stack, because all computation is done at the moment of executing recursive call. The tail-recursive function requires calling itself at the end and nothing else. Here is what tail-recursive factorial function may look like:</p></div><div class="listingblock"><div class="title">Listing 2. Tail-recursive factorial implemented in Groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package factorialimport groovy.transform.CompileStaticimport groovy.transform.TypeChecked@CompileStatic@TypeCheckedclass Groovy {    static BigInteger factorial(int number, BigInteger acc = 1) {        if (number == 1) {            return acc        }        return factorial(number - 1, acc.multiply(BigInteger.valueOf(number)))    }}</code></pre></div></div><div class="paragraph"><p>The main difference is that the tail call passes the current result of calculation recursively (usually it&#8217;s called <code>accumulator</code>) and it returns the calculated value when the stop condition is satisfied. Let&#8217;s run a few experiments with tail-recursive variant and see if hits the same <code>StackOverflowError</code> as the previous example:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-factorial-tail-recursion-crash.png"><img src="/images/groovy-factorial-tail-recursion-crash.png" alt="groovy factorial tail recursion crash"></a></div></div></div></div><div class="paragraph"><p>As you can see, we are still affected by hitting stack size limit problems for larger numbers. It happens because the compiler does not optimize tail-recursive calls, and probably never will<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup>.</p></div></div></div><div class="sect1"><h2>Groovy&#8217;s <code>@TailRecursive</code></h2><div class="sectionbody"><div class="paragraph"><p>Groovy introduced a new useful annotation in version 2.3 - <code>@TailRecursive</code> <sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnotedef_3" title="View footnote.">3</a>]</sup>. Without further ado, let&#8217;s add this annotation to our example and see how it works.</p></div><div class="listingblock"><div class="title">Listing 3. An example of <code>@TailRecursive</code> annotation usage in Groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package factorialimport groovy.transform.CompileStaticimport groovy.transform.TailRecursiveimport groovy.transform.TypeChecked@CompileStatic@TypeCheckedclass Groovy {    @TailRecursive    static BigInteger factorial(int number, BigInteger acc = 1) {        if (number == 1) {            return acc        }        return factorial(number - 1, acc.multiply(BigInteger.valueOf(number)))    }}</code></pre></div></div><div class="paragraph"><p>Let&#8217;s see if we can calculate factorial of number 75,000:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-factorial-tail-recursive-annotation.png"><img src="/images/groovy-factorial-tail-recursive-annotation.png" alt="groovy factorial tail recursive annotation"></a></div></div></div></div><div class="paragraph"><p>It didn&#8217;t crash, and it calculated a number of 333,062 digits length. How is it even possible, when the same function without annotation crashes for number 15,000? The answer is relatively simple - Groovy unraveled the code of our tail-recursive function and replaced it with an iterative equivalent. If we decompile the bytecode to a Java code we will find something similar to this one:</p></div><div class="listingblock"><div class="title">Listing 4. Decompiled <code>@TailRecursive</code> method</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//package factorial;import groovy.lang.GroovyObject;import groovy.lang.MetaClass;import java.math.BigInteger;import org.codehaus.groovy.runtime.ScriptBytecodeAdapter;import org.codehaus.groovy.runtime.dgmimpl.NumberNumberMultiply;import org.codehaus.groovy.transform.tailrec.GotoRecurHereException;public class Groovy implements GroovyObject {    public Groovy() {        MetaClass var1 = this.$getStaticMetaClass();        this.metaClass = var1;    }    public static BigInteger factorial(int number, BigInteger acc) {        BigInteger _acc_ = acc;        int _number_ = number;        try {            while(true) {                try {                    while(_number_ != 1) {                        int __number__ = _number_;                        int var7 = _number_ - 1;                        _number_ = var7;                        Number var8 = NumberNumberMultiply.multiply(__number__, _acc_);                        _acc_ = (BigInteger)ScriptBytecodeAdapter.castToType(var8, BigInteger.class);                    }                    BigInteger var4 = _acc_;                    return var4;                } catch (GotoRecurHereException var13) {                    ;                }            }        } finally {            ;        }    }    public static BigInteger factorial(int number) {        return factorial(number, (BigInteger)ScriptBytecodeAdapter.castToType(1, BigInteger.class));    }}</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><code>@TailRecursive</code> annotation can be applied <strong>only</strong> to a function that uses tail call.</td></tr></table></div></div></div><div class="sect1"><h2>Testing <code>@TailRecursive</code> performance</h2><div class="sectionbody"><div class="paragraph"><p>Before we close this article, let&#8217;s make a quick performance test to see if it is worth using tail-recursive functions in Groovy. We use <a href="https://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener">JMH</a> tool to run the benchmark, and we compare two variants:</p></div><div class="olist arabic"><ol class="arabic"><li><p>Groovy tail-recursive factorial function</p></li><li><p>Java imperative iteration factorial variant</p></li></ol></div><div class="listingblock"><div class="title">Listing 5. src/main/groovy/factorial/Groovy.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package factorialimport groovy.transform.CompileStaticimport groovy.transform.TailRecursiveimport groovy.transform.TypeChecked@CompileStatic@TypeCheckedclass Groovy {    @TailRecursive    static BigInteger factorial(int number, BigInteger acc = 1) {        if (number == 1) {            return acc        }        return factorial(number - 1, acc.multiply(BigInteger.valueOf(number)))    }}</code></pre></div></div><div class="listingblock"><div class="title">Listing 6. src/main/java/factorial/Java.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package factorial;import java.math.BigInteger;public class Java {    static BigInteger factorial(int number) {        BigInteger result = BigInteger.ONE;        for (int i = 1; i &lt;= number; i++) {            result = result.multiply(BigInteger.valueOf(i));        }        return result;    }}</code></pre></div></div><div class="paragraph"><p>Here is the benchmark test case:</p></div><div class="listingblock"><div class="title">Listing 7. src/jmh/groovy/factorial/FactorialBench.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package factorialimport groovy.transform.CompileStaticimport groovy.transform.TypeCheckedimport org.openjdk.jmh.annotations.Benchmarkimport org.openjdk.jmh.annotations.Scopeimport org.openjdk.jmh.annotations.State@State(Scope.Benchmark)@CompileStatic@TypeCheckedclass FactorialBench {    @Benchmark    BigInteger groovy_TailRecursive_factorial_25_000() {        return Groovy.factorial(25000)    }    @Benchmark    BigInteger groovy_TailRecursive_factorial_1_000() {        return Groovy.factorial(1000)    }    @Benchmark    BigInteger java_iterative_factorial_25_000() {        return Java.factorial(25000)    }    @Benchmark    BigInteger java_iterative_factorial_1_000() {        return Java.factorial(1000)    }}</code></pre></div></div><div class="paragraph"><p>Here are the results:</p></div><div class="listingblock"><div class="title">Listing 8. JMH benchmark results</div><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text"># JMH version: 1.21# VM version: JDK 1.8.0_162, Java HotSpot(TM) 64-Bit Server VM, 25.162-b12# VM invoker: /usr/java/jdk1.8.0_162/jre/bin/java# VM options: &lt;none&gt;# Warmup: 1 iterations, 30 s each# Measurement: 120 iterations, 1 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Average time, time/opBenchmark                                             Mode  Cnt    Score    Error  UnitsFactorialBench.groovy_TailRecursive_factorial_1_000   avgt  120    0,209 ±  0,001  ms/opFactorialBench.groovy_TailRecursive_factorial_25_000  avgt  120  148,170 ±  0,330  ms/opFactorialBench.java_iterative_factorial_1_000         avgt  120    0,173 ±  0,001  ms/opFactorialBench.java_iterative_factorial_25_000        avgt  120  129,951 ±  0,321  ms/op</code></pre></div></div><div class="paragraph"><p>Full log: <a href="https://gist.github.com/wololock/bec6c6cd09c80a2868eca8cce7a016a2" class="bare" target="_blank" rel="noopener">https://gist.github.com/wololock/bec6c6cd09c80a2868eca8cce7a016a2</a></p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Laptop specs: JDK 1.8.0_162 (Java HotSpot&#8482; 64-Bit Server VM, 25.162-b12), Groovy 2.4.12, Intel&#174; Core&#8482; i7-4900MQ CPU @ 2.80GHz (4 cores, cache size 8192 KB), 16 GB RAM, OS: Fedora 26 (64 bit)</td></tr></table></div><div class="paragraph"><p>Java is still faster than Groovy tail-recursive function. The first one offers the best performance, while the second one allows using tail-recursive constructs in your code with just a small (and in most cases acceptable) performance cost. I think this is a reasonable compromise between efficiency and code readability.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>That&#8217;s it for today. I hope you have learned something useful from this article. If there is anything you would like to learn more about Groovy and its useful features, please let me know in the comments section below. Hope to see you next time!</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://en.wikipedia.org/wiki/Tail_call" class="bare" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Tail_call</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="https://softwareengineering.stackexchange.com/questions/272061/why-doesnt-java-have-optimization-for-tail-recursion-at-all" class="bare" target="_blank" rel="noopener">https://softwareengineering.stackexchange.com/questions/272061/why-doesnt-java-have-optimization-for-tail-recursion-at-all</a></div><div class="footnote" id="_footnotedef_3"><a href="#_footnoteref_3">3</a>. <a href="http://docs.groovy-lang.org/2.4.15/html/gapi/groovy/transform/TailRecursive.html" class="bare" target="_blank" rel="noopener">http://docs.groovy-lang.org/2.4.15/html/gapi/groovy/transform/TailRecursive.html</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Most of the object-oriented programmers prefer constructing algorithms using imperative style over using recursion. This is pretty obvious in the JVM ecosystem, where imperative iteration is much more efficient than recursive function call chain. However, what if I tell you that in Groovy you can take advantage of clean tail-recursive functions without sacrificing performance? Interested? Let&amp;#8217;s deep dive into it.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="factorial" scheme="https://e.printstacktrace.blog/tags/factorial/"/>
    
      <category term="jmh" scheme="https://e.printstacktrace.blog/tags/jmh/"/>
    
      <category term="tail-recursion" scheme="https://e.printstacktrace.blog/tags/tail-recursion/"/>
    
      <category term="tail-call" scheme="https://e.printstacktrace.blog/tags/tail-call/"/>
    
      <category term="recursion" scheme="https://e.printstacktrace.blog/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>Non-blocking and async Micronaut - quick start (part 3)</title>
    <link href="https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part-3/"/>
    <id>https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part-3/</id>
    <published>2018-10-30T09:53:18.000Z</published>
    <updated>2018-10-30T09:53:18.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Welcome to the part 3 of <em>"Non-blocking and async <a href="http://micronaut.io" target="_blank" rel="noopener">Micronaut</a>"</em> article. In the <a href="/micronaut-non-blocking-and-async-part-2/" title="previous post">previous post</a> we have created connection between two services using HTTP protocol and we have run some experiments with handling 10,000 requests. Today we are going to extend this example by setting some timeouts to see what happens.</p></div><a id="more"></a><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Source code of the application described in this blog post can be found here <a href="https://github.com/wololock/micronaut-nonblocking-async-demo" class="bare" target="_blank" rel="noopener">https://github.com/wololock/micronaut-nonblocking-async-demo</a></td></tr></table></div><div class="sect1"><h2>The motivation</h2><div class="sectionbody"><div class="paragraph"><p>Returning 4 recommendations from our mock recommendations-service takes approximately 1250&nbsp;milliseconds. This is actually a huge amount of time. Let&#8217;s assume that we can&#8217;t do anything to decrease latency on requests to product-service, yet we have to return any result in less than 300&nbsp;milliseconds to make any usage of recommendations-service.</p></div></div></div><div class="sect1"><h2>The solution</h2><div class="sectionbody"><div class="paragraph"><p>In the previous post we didn&#8217;t introduce any timeouts in the part responsible for communication between services. Let&#8217;s fix it now by adding 250 milliseconds timeout to the client call:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.recommendation;import io.micronaut.http.annotation.Controller;import io.micronaut.http.annotation.Get;import io.reactivex.Maybe;import io.reactivex.Observable;import io.reactivex.Single;import com.github.wololock.micronaut.products.Product;import com.github.wololock.micronaut.products.ProductClient;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Arrays;import java.util.List;import java.util.concurrent.TimeUnit;@Controller("/recommendations")final class RecommendationController {    private static final Logger log = LoggerFactory.getLogger(RecommendationController.class);    private static final List&lt;String&gt; ids = Arrays.asList("PROD-001", "PROD-002", "PROD-003", "PROD-004");    private final ProductClient productClient;    public RecommendationController(ProductClient productClient) {        this.productClient = productClient;    }    @Get    public Single&lt;List&lt;Product&gt;&gt; getRecommendations() {        log.debug("RecommendationController.getRecommendations() called...");        return Observable.fromIterable(ids)                .flatMap(id -&gt; productClient.getProduct(id)                        .timeout(250, TimeUnit.MILLISECONDS, Maybe.empty()) <i class="conum" data-value="1"></i><b>(1)</b>                        .toObservable()                )                .toList();    }}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>250 milliseconds timeout that returns <code>Maybe.empty()</code> when occurs.</td></tr></table></div><div class="paragraph"><p>We use <code>Maybe.timeout(timeout, unit, fallback)</code> <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> to specify a timeout policy - if client does not return a response in 250 milliseconds we simply drop the connection and return a fallback object. Here is what the request to <code>localhost:8080/recommendations</code> returns now:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-http hljs" data-lang="http">HTTP/1.1 200 OKDate: Tue, 30 Oct 2018 11:18:33 GMTconnection: keep-alivecontent-length: 119content-type: application/json[    {        "id": "PROD-001",        "name": "Micronaut in Action",        "price": 29.99    },    {        "id": "PROD-002",        "name": "Netty in Action",        "price": 31.22    }]</code></pre></div></div><div class="paragraph"><p>We get only two products in return and this is expected, because only these two have a latency that is smaller than 250 milliseconds.</p></div><div class="paragraph"><p>Let&#8217;s execute 10 concurrent requests using <a href="https://github.com/JoeDog/siege" target="_blank" rel="noopener">siege</a>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">siege -c 10 -r 1 http://localhost:8080/recommendations</code></pre></div></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">** SIEGE 4.0.4** Preparing 10 concurrent users for battle.The server is now under siege...HTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.26 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.26 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.26 secs:     119 bytes ==&gt; GET  /recommendationsTransactions:          10 hitsAvailability:      100.00 %Elapsed time:        0.26 secsData transferred:        0.00 MBResponse time:        0.25 secsTransaction rate:       38.46 trans/secThroughput:        0.00 MB/secConcurrency:        9.73Successful transactions:          10Failed transactions:           0Longest transaction:        0.26Shortest transaction:        0.25</code></pre></div></div></div></div><div class="sect1"><h2>Are we done?</h2><div class="sectionbody"><div class="paragraph"><p>We might think that everything is fine and we are ready to deploy to production. Before that let&#8217;s run <a href="https://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener">Apache HTTP Bench</a> just to make sure we are ready to go:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">ab -c 500 -n 2000 http://localhost:8080/recommendations</code></pre></div></div><div class="paragraph"><p>500 concurrent requests, 2,000 in total. The result:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">Server Software:Server Hostname:        localhostServer Port:            8080Document Path:          /recommendationsDocument Length:        119 bytesConcurrency Level:      500Time taken for tests:   5.312 secondsComplete requests:      2000Failed requests:        1570   (Connect: 0, Receive: 0, Length: 1570, Exceptions: 0)Non-2xx responses:      146Total transferred:      339669 bytesHTML transferred:       83586 bytesRequests per second:    376.49 [#/sec] (mean)Time per request:       1328.058 [ms] (mean)Time per request:       2.656 [ms] (mean, across all concurrent requests)Transfer rate:          62.44 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0  544 514.3   1005    1068Processing:   255  546 200.3    545    1236Waiting:      251  546 200.3    545    1236Total:        281 1090 455.2   1290    1772Percentage of the requests served within a certain time (ms)  50%   1290  66%   1400  75%   1467  80%   1501  90%   1652  95%   1733  98%   1755  99%   1764 100%   1772 (longest request)</code></pre></div></div><div class="paragraph"><p>Apache Bench revealed that we have a huge problem with handling 500 concurrent requests - median 1290 milliseconds when we drop connection after 250 ms timeout is not something we would expect here. It also shows that 1570 from 2000 requests were marked as failed based on the content length - it means that some requests returned a response with two products, some with just a single product, and there were most probably some requests with empty result.</p></div><div class="paragraph"><p>Let&#8217;s run one more experiment, but this time with 200 concurrent requests and let&#8217;s take a look at the result <code>ab</code> produced:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">Server Software:Server Hostname:        localhostServer Port:            8080Document Path:          /recommendationsDocument Length:        119 bytesConcurrency Level:      200Time taken for tests:   3.073 secondsComplete requests:      2000Failed requests:        280   (Connect: 0, Receive: 0, Length: 280, Exceptions: 0)Total transferred:      477760 bytesHTML transferred:       222040 bytesRequests per second:    650.91 [#/sec] (mean)Time per request:       307.261 [ms] (mean)Time per request:       1.536 [ms] (mean, across all concurrent requests)Transfer rate:          151.85 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    1   2.3      0      15Processing:   251  269  20.4    261     349Waiting:      251  269  20.4    261     349Total:        251  270  21.1    262     352Percentage of the requests served within a certain time (ms)  50%    262  66%    271  75%    277  80%    281  90%    304  95%    319  98%    335  99%    344 100%    352 (longest request)</code></pre></div></div><div class="paragraph"><p>A smaller concurrent connections number produced much better result - median 262 ms and only 280 failed requests (based on the content length). Why such a huge difference? Well, we need to be aware of one important thing. Even if we drop client connection after 250 ms timeout, the server is still processing all requests executed to product-service. It means that when server receives 500 concurrent requests to <code>localhost:8080/recommendations</code> it processes 1,000 requests that are never returned back to the client. It total it gives us 4,000 orphan requests, which allocate resources, consume them and return back to the even-loop, but never get back to the caller.</p></div></div></div><div class="sect1"><h2>Any solution?</h2><div class="sectionbody"><div class="paragraph"><p>There is no simple solution to this kind of problems. It shows the importance of a proper application monitoring. If we only monitor client requests success rate we would notice, that PROD-003 and PROD-004 products never return to the client. Maybe it is a good reason to drop recommending these products? Let&#8217;s see what happens if we recommend only first two products?</p></div><div class="paragraph"><p>For 500 concurrent requests we get:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">Concurrency Level:      500Time taken for tests:   1.667 secondsComplete requests:      2000Failed requests:        948   (Connect: 0, Receive: 0, Length: 948, Exceptions: 0)Total transferred:      403820 bytesHTML transferred:       149371 bytesRequests per second:    1200.07 [#/sec] (mean)Time per request:       416.641 [ms] (mean)Time per request:       0.833 [ms] (mean, across all concurrent requests)Transfer rate:          236.63 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    3   5.0      0      19Processing:   212  328  44.3    320     416Waiting:      193  328  44.3    320     416Total:        212  331  44.3    326     416Percentage of the requests served within a certain time (ms)  50%    326  66%    347  75%    357  80%    372  90%    399  95%    409  98%    413  99%    415 100%    416 (longest request)</code></pre></div></div><div class="paragraph"><p>For 200 concurrent requests we get:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">Concurrency Level:      200Time taken for tests:   2.613 secondsComplete requests:      2000Failed requests:        0Total transferred:      494000 bytesHTML transferred:       238000 bytesRequests per second:    765.26 [#/sec] (mean)Time per request:       261.349 [ms] (mean)Time per request:       1.307 [ms] (mean, across all concurrent requests)Transfer rate:          184.59 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    1   2.3      0      15Processing:   191  231  27.9    225     279Waiting:      191  231  28.0    225     279Total:        191  231  28.6    225     282Percentage of the requests served within a certain time (ms)  50%    225  66%    252  75%    262  80%    265  90%    270  95%    274  98%    279  99%    280 100%    282 (longest request)</code></pre></div></div><div class="paragraph"><p>It&#8217;s still far from the best results, however 200 concurrent requests produce almost ideal results. With 500 we still see that application has some difficulties and hits timeouts for PROD-002 in some cases. But this is not a bulletproof benchmark and we are only experimenting to see the order of magnitude.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>And that&#8217;s it, we finally reached the end of 3 part article on quick start to non-blocking and async processing in Micronaut. I hope you have enjoyed it and you&#8217;ve learned something useful during this journey. If you are looking for more - let&#8217;s stay in touch. More Micronaut articles are coming soon!</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="http://reactivex.io/RxJava/javadoc/io/reactivex/Maybe.html#timeout-long-java.util.concurrent.TimeUnit-io.reactivex.MaybeSource-" class="bare" target="_blank" rel="noopener">http://reactivex.io/RxJava/javadoc/io/reactivex/Maybe.html#timeout-long-java.util.concurrent.TimeUnit-io.reactivex.MaybeSource-</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Welcome to the part 3 of &lt;em&gt;&quot;Non-blocking and async &lt;a href=&quot;http://micronaut.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Micronaut&lt;/a&gt;&quot;&lt;/em&gt; article. In the &lt;a href=&quot;/micronaut-non-blocking-and-async-part-2/&quot; title=&quot;previous post&quot;&gt;previous post&lt;/a&gt; we have created connection between two services using HTTP protocol and we have run some experiments with handling 10,000 requests. Today we are going to extend this example by setting some timeouts to see what happens.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Micronaut Cookbook" scheme="https://e.printstacktrace.blog/categories/micronaut-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="micronaut" scheme="https://e.printstacktrace.blog/tags/micronaut/"/>
    
      <category term="non-blocking" scheme="https://e.printstacktrace.blog/tags/non-blocking/"/>
    
      <category term="async" scheme="https://e.printstacktrace.blog/tags/async/"/>
    
      <category term="reactive-programming" scheme="https://e.printstacktrace.blog/tags/reactive-programming/"/>
    
      <category term="rxjava" scheme="https://e.printstacktrace.blog/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 type inference in generic methods chain call - what might go wrong?</title>
    <link href="https://e.printstacktrace.blog/java-type-inference-generic-methods-chain-call/"/>
    <id>https://e.printstacktrace.blog/java-type-inference-generic-methods-chain-call/</id>
    <published>2018-10-28T05:50:57.000Z</published>
    <updated>2018-10-28T05:50:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Yesterday I have found this interesting question on Stack Overflow asked by <a href="https://twitter.com/czaszo" target="_blank" rel="noopener">Opal</a>. He faced some <a href="https://stackoverflow.com/q/53008601/2194470" target="_blank" rel="noopener">unexpected compilation errors</a> when dealing with Java generics and Vavr library. It turned out the root cause of the issue there was not the library, but Java compiler itself. This was pretty interesting use case and it motivated me to investigate it even further. This blog post reveals untold truth about Java generics type inference. Are you ready? :)</p></div><a id="more"></a><div class="sect1"><h2>An example</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s define a simple <code>Some&lt;T&gt;</code> generic class:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import java.util.function.Consumer;import java.util.function.Supplier;public final class Some&lt;T&gt; {    private final T value;    private Some(final T t) {        this.value = t;    }    static &lt;T&gt; Some&lt;T&gt; of(final Supplier&lt;T&gt; supplier) {        return new Some&lt;&gt;(supplier.get());    }    public Some&lt;T&gt; peek(final Consumer&lt;T&gt; consumer) {        consumer.accept(value);        return this;    }    public T get() {        return value;    }}</code></pre></div></div><div class="paragraph"><p><code>Some&lt;T&gt;</code> represents some value provided by a supplier function. There is not much we can do we this object - its class provides only two additional methods, <code>peek(Consumer&lt;T&gt; consumer)</code> and <code>get()</code>. But that&#8217;s enough for this demo.</p></div><div class="paragraph"><p>There is one useful thing we would like to take advantage of - <code>peek()</code> method returns <code>Some&lt;T&gt;</code> which in this case is the reference to the caller object. This is very handy and it allows us to create a chain of methods. Let&#8217;s try it out and create <code>Some&lt;List&lt;? extends CharSequence&gt;&gt;</code> object:</p></div><div class="listingblock"><div class="title">Listing 1. Example 1</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">final class SomeExample {    public static void main(String[] args) {        Some&lt;List&lt;? extends CharSequence&gt;&gt; some =                Some.of(() -&gt; Arrays.asList("a", "b", "c"));        System.out.println(some.get());    }}</code></pre></div></div><div class="paragraph"><p>So far so good - this simple example compiles and produces <code>[a, b, c]</code> in the console log when executed. Let&#8217;s modify the code a bit and use <code>peek()</code> method instead <code>System.out.println(some.get())</code>:</p></div><div class="listingblock"><div class="title">Listing 2. Example 2</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">final class SomeExample {    public static void main(String[] args) {        Some&lt;List&lt;? extends CharSequence&gt;&gt; some =                Some.of(() -&gt; Arrays.asList("a", "b", "c")).peek(System.out::println);    }}</code></pre></div></div><div class="paragraph"><p>And now something unexpected happens. Suddenly, compiler started complaining about incompatible types:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/java-type-inference-error.png"><img src="/images/java-type-inference-error.png" alt="java type inference error"></a></div></div></div></div><div class="paragraph"><p>At some point it makes sense, because Java generics are invariant<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> - Java Language Specification in chapter <strong>4.10. Subtyping</strong> says clearly:</p></div><div class="quoteblock"><blockquote><div class="paragraph"><p>Subtyping does not extend through parameterized types: <code>T</code> &lt;: <code>S</code> does not imply that <code>C&lt;T&gt;</code> &lt;: <code>C&lt;S&gt;</code>.</p></div></blockquote></div><div class="paragraph"><p>So why does the example without <code>peek()</code> method invocation worked?</p></div></div></div><div class="sect1"><h2>Generalized Target-Type Inference</h2><div class="sectionbody"><div class="paragraph"><p>In the first example we have took an advantage of the feature introduced in Java 8 with JSR-335<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup> - Generalized Target-Type Inference, proposed as JEP-101<sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnotedef_3" title="View footnote.">3</a>]</sup>. It added a whole new chapter to the language specification - <strong>Chapter 18. Type Inference</strong><sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnotedef_4" title="View footnote.">4</a>]</sup>. It made Java compiler context aware when it comes to type inference, so it can deduct the expected type from the left side of the expression and subtype<sup class="footnote">[<a id="_footnoteref_5" class="footnote" href="#_footnotedef_5" title="View footnote.">5</a>]</sup> if needed.</p></div><div class="paragraph"><p>It explains why Java compiler is satisfied by reducing expression on the right side to type <code>Some&lt;List&lt;? extends CharSequence&gt;&gt;</code> while assigning value to a <code>some</code> variable:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/java-poly-expressions-in-action.png"><img src="/images/java-poly-expressions-in-action.png" alt="java poly expressions in action"></a></div></div></div></div><div class="paragraph"><p>It shows that even if:</p></div><div class="ulist"><ul><li><p><code>Arrays.asList("a", "b", "c")</code> returns <code>List&lt;String&gt;</code>,</p></li><li><p><code>Some.of(() &#8594; Arrays.asList("a", "b", "c"))</code> returns <code>Some&lt;List&lt;String&gt;&gt;</code>,</p></li></ul></div><div class="paragraph"><p>then assigning it to a type like <code>Some&lt;List&lt;? extends CharSequence&gt;&gt;</code> changes the invocation context and in this context <code>Some.of()</code> returns type defined on the left side of the assignment.</p></div></div></div><div class="sect1"><h2>Limitations</h2><div class="sectionbody"><div class="paragraph"><p>Java 8 type inference system has some limitations. One of them is type inference in chain methods call. JEP-101 mentions this problem, and our second example proves this limitation exists:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/java-type-inference-chain-error.png"><img src="/images/java-type-inference-chain-error.png" alt="java type inference chain error"></a></div></div></div></div><div class="paragraph"><p>When we start chaining methods, compiler delays type inference until the expression on the right side gets evaluated. Last method in the chain receives <code>Some&lt;List&lt;String&gt;&gt;</code> from the first method and it passes it to variable assignment. This is why we see compiler error in this case.</p></div></div></div><div class="sect1"><h2>Solutions</h2><div class="sectionbody"><div class="paragraph"><p>There are two solutions (or workarounds) to this limitation.</p></div><div class="paragraph"><p>1) We can specify explicitly generic type:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">final class SomeExample {    public static void main(String[] args) {        Some&lt;List&lt;? extends CharSequence&gt;&gt; some =                Some.&lt;List&lt;? extends CharSequence&gt;&gt;of(() -&gt; Arrays.asList("a", "b", "c")).peek(System.out::println);    }}</code></pre></div></div><div class="paragraph"><p>In this case we instruct compiler that we expect <code>Some.of()</code> to return this specific type and it gets passed to <code>peek()</code> method which returns previously specified type back.</p></div><div class="paragraph"><p>2) We can break the chain and split assignment from the rest chain calls</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">final class SomeExample {    public static void main(String[] args) {        Some&lt;List&lt;? extends CharSequence&gt;&gt; some = Some.of(() -&gt; Arrays.asList("a", "b", "c"));        some.peek(System.out::println);    }}</code></pre></div></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>And that&#8217;s it. I hope you have learned something useful from this blog post. Don&#8217;t hesitate to leave a comment in the comments section below - please let me know if you are looking for more articles like this one. See you next time!</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.10" class="bare" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.10</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="http://cr.openjdk.java.net/~dlsmith/jsr335-final/spec/G.html" class="bare" target="_blank" rel="noopener">http://cr.openjdk.java.net/~dlsmith/jsr335-final/spec/G.html</a></div><div class="footnote" id="_footnotedef_3"><a href="#_footnoteref_3">3</a>. <a href="https://openjdk.java.net/jeps/101" class="bare" target="_blank" rel="noopener">https://openjdk.java.net/jeps/101</a></div><div class="footnote" id="_footnotedef_4"><a href="#_footnoteref_4">4</a>. <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-18.html" class="bare" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jls/se8/html/jls-18.html</a></div><div class="footnote" id="_footnotedef_5"><a href="#_footnoteref_5">5</a>. <a href="http://cr.openjdk.java.net/~dlsmith/jsr335-final/spec/G.html#18.2.3_Subtyping_Constraints_.5BNew.5D" class="bare" target="_blank" rel="noopener">http://cr.openjdk.java.net/~dlsmith/jsr335-final/spec/G.html#18.2.3_Subtyping_Constraints_.5BNew.5D</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Yesterday I have found this interesting question on Stack Overflow asked by &lt;a href=&quot;https://twitter.com/czaszo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Opal&lt;/a&gt;. He faced some &lt;a href=&quot;https://stackoverflow.com/q/53008601/2194470&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;unexpected compilation errors&lt;/a&gt; when dealing with Java generics and Vavr library. It turned out the root cause of the issue there was not the library, but Java compiler itself. This was pretty interesting use case and it motivated me to investigate it even further. This blog post reveals untold truth about Java generics type inference. Are you ready? :)&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/programming-tips/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="java-8" scheme="https://e.printstacktrace.blog/tags/java-8/"/>
    
      <category term="java-generics" scheme="https://e.printstacktrace.blog/tags/java-generics/"/>
    
      <category term="type-inference" scheme="https://e.printstacktrace.blog/tags/type-inference/"/>
    
      <category term="jsr335" scheme="https://e.printstacktrace.blog/tags/jsr335/"/>
    
      <category term="jep101" scheme="https://e.printstacktrace.blog/tags/jep101/"/>
    
  </entry>
  
  <entry>
    <title>Non-blocking and async Micronaut - quick start (part 2)</title>
    <link href="https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part-2/"/>
    <id>https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part-2/</id>
    <published>2018-10-26T11:40:42.000Z</published>
    <updated>2018-10-26T11:40:42.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Welcome to the part 2 of <em>"Non-blocking and async Micronaut"</em> article. In the <a href="https://e.printstacktrace.blog/2018/10/micronaut-non-blocking-and-async-part1/">previous part</a> we have explained the idea behind this demo and we have implemented product-service - a simple endpoint that returns information about some products. Today we will focus on implementing <strong>recommendations-service</strong> part and we will run some simple benchmark tests. Let&#8217;s start!</p></div><a id="more"></a><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Source code of the application described in this blog post can be found here <a href="https://github.com/wololock/micronaut-nonblocking-async-demo" class="bare" target="_blank" rel="noopener">https://github.com/wololock/micronaut-nonblocking-async-demo</a></td></tr></table></div><div class="sect1"><h2>Implementing recommendations-service</h2><div class="sectionbody"><div class="paragraph"><p>We use recommendation-service example more like an excuse to connect with product-service over HTTP. We won&#8217;t spent time on inventing recommendations algorithm - we will simply mock and hard-code products to recommend instead. This is fine for demo purpose and it allows us to focus on what is most important here - service to service communication over HTTP.</p></div><div class="paragraph"><p>We will represent concept of recommendations-service as a single controller class stored in the separate package:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">recommendation└── RecommendationController.java</code></pre></div></div><div class="paragraph"><p>Let&#8217;s take a look at its implementation:</p></div><div class="listingblock"><div class="title">Listing 1. src/main/java/com/github/wololock/micronaut/recommendation/RecommendationController.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.recommendation;import com.github.wololock.micronaut.products.Product;import com.github.wololock.micronaut.products.ProductClient;import io.micronaut.http.annotation.Controller;import io.micronaut.http.annotation.Get;import io.reactivex.Observable;import io.reactivex.Single;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Arrays;import java.util.List;@Controller("/recommendations")final class RecommendationController {    private static final Logger log = LoggerFactory.getLogger(RecommendationController.class);    private static final List&lt;String&gt; ids = Arrays.asList( <i class="conum" data-value="1"></i><b>(1)</b>            "PROD-001",            "PROD-002",            "PROD-003",            "PROD-004"    );    private final ProductClient productClient; <i class="conum" data-value="2"></i><b>(2)</b>    public RecommendationController(ProductClient productClient) {        this.productClient = productClient;    }    @Get    public Single&lt;List&lt;Product&gt;&gt; getRecommendations() { <i class="conum" data-value="3"></i><b>(3)</b>        log.debug("RecommendationController.getRecommendations() called...");        return Observable.fromIterable(ids) <i class="conum" data-value="4"></i><b>(4)</b>                .flatMap(id -&gt; productClient.getProduct(id).toObservable()) <i class="conum" data-value="5"></i><b>(5)</b>                .toList(); <i class="conum" data-value="6"></i><b>(6)</b>    }}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>A fixed list of 4 products IDs.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>We use injected <code>ProductClient</code> - Micronaut will generate and compile a client class based on the interface.</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>We return <code>Single&lt;List&lt;Product&gt;&gt;</code> - a reactive type that represents some single value.</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>We start with converting list of IDs to <code>Observable&lt;String&gt;</code></td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>Next we map every ID to a corresponding <code>Product</code> retrieved via HTTP request.</td></tr><tr><td><i class="conum" data-value="6"></i><b>6</b></td><td>We specify the return type to a <code>Single&lt;List&lt;Product&gt;&gt;</code>.</td></tr></table></div><div class="paragraph"><p>The class is very concise as you can see. We start with injection of an implementation of <code>ProductClient</code> interface we have defined in product-service:</p></div><div class="listingblock"><div class="title">Listing 2. src/main/java/com/github/wololock/micronaut/products/ProductClient.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.products;import io.micronaut.http.annotation.Get;import io.micronaut.http.client.annotation.Client;import io.reactivex.Maybe;@Client("/product")public interface ProductClient {    @Get("/{id}")    Maybe&lt;Product&gt; getProduct(final String id);}</code></pre></div></div><div class="paragraph"><p>We don&#8217;t implement this interface explicitly - Micronaut takes care of generating implementing class at the compile time.</p></div><div class="paragraph"><p>The <code>getRecommendations</code> method implements our business logic - it takes a list of IDs and for each ID it calls <code>ProductClient.getProduct(id)</code> and converts <code>Maybe&lt;Product&gt;</code> to <code>Observable&lt;Product&gt;</code> with <code>toObservable()</code> method call. And the last line of this method precises that we want to return a list of products and that&#8217;s it.</p></div><div class="paragraph"><p>Let&#8217;s see it in action. We will start with a single HTTP request (using <a href="https://httpie.org/" target="_blank" rel="noopener">HTTPie</a>):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% http localhost:8080/recommendationsHTTP/1.1 200 OKDate: Fri, 26 Oct 2018 18:31:41 GMTconnection: keep-alivecontent-length: 240content-type: application/json[    {        "id": "PROD-001",        "name": "Micronaut in Action",        "price": 29.99    },    {        "id": "PROD-002",        "name": "Netty in Action",        "price": 31.22    },    {        "id": "PROD-003",        "name": "Effective Java, 3rd edition",        "price": 31.22    },    {        "id": "PROD-004",        "name": "Clean Code",        "price": 31.22    }]</code></pre></div></div><div class="paragraph"><p>We get 4 recommendations in response as expected. And the console log of the application looks like this:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">18:31:40.007 [nioEventLoopGroup-1-2     ] DEBUG - RecommendationController.getRecommendations() called...18:31:40.173 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-001) executed...18:31:40.175 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...18:31:40.178 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-002) executed...18:31:40.178 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-004) executed...18:31:40.297 [RxCachedThreadScheduler-1 ] DEBUG - Product with id PROD-001 ready to return...18:31:40.368 [RxCachedThreadScheduler-3 ] DEBUG - Product with id PROD-002 ready to return...18:31:40.777 [RxCachedThreadScheduler-2 ] DEBUG - Product with id PROD-003 ready to return...18:31:41.379 [RxCachedThreadScheduler-4 ] DEBUG - Product with id PROD-004 ready to return...</code></pre></div></div><div class="paragraph"><p>It took 1372 milliseconds to complete the request. We still use a single event-loop for a computation - that is why <code>nioEventLoopGroup-1-2</code> handled the first 5 requests without blocking. If we process these requests in a blocking manner we would see something like this:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">RecommendationController.getRecommendations() called...ProductController.getProduct(PROD-001) executed...Product with id PROD-001 ready to return...ProductController.getProduct(PROD-003) executed...Product with id PROD-002 ready to return...ProductController.getProduct(PROD-002) executed...Product with id PROD-003 ready to return...ProductController.getProduct(PROD-004) executed...Product with id PROD-004 ready to return...</code></pre></div></div><div class="paragraph"><p>And it would not take 1372 ms but at least 2110 ms (a sum of latencies). Alternatively we would need at least 5 threads to handle this single request to <code>/recommendations</code> endpoint - one thread per connection. I think it shows clearly what is the difference between blocking and non-blocking approach.</p></div></div></div><div class="sect1"><h2>Simulating multiple requests</h2><div class="sectionbody"><div class="paragraph"><p>Handling a single request on <code>/recommendations</code> endpoint isn&#8217;t very challenging for our demo application. Let&#8217;s see what happens if 500 concurrent requests (from 2000 total) reaches the application. To run such test we will use <a href="https://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener">Apache HTTP benchmark tool</a>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">ab -c 500 -n 2000 http://localhost:8080/recommendations</code></pre></div></div><div class="paragraph"><p>This command executes 500 concurrent requests and does it 4 times (2000 requests in total).</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking localhost (be patient)Completed 200 requestsCompleted 400 requestsCompleted 600 requestsCompleted 800 requestsCompleted 1000 requestsCompleted 1200 requestsCompleted 1400 requestsCompleted 1600 requestsCompleted 1800 requestsCompleted 2000 requestsFinished 2000 requestsServer Software:Server Hostname:        localhostServer Port:            8080Document Path:          /recommendationsDocument Length:        240 bytesConcurrency Level:      500Time taken for tests:   7.078 secondsComplete requests:      2000Failed requests:        65   (Connect: 0, Receive: 0, Length: 65, Exceptions: 0)Non-2xx responses:      65Total transferred:      730605 bytesHTML transferred:       473370 bytesRequests per second:    282.57 [#/sec] (mean)Time per request:       1769.468 [ms] (mean)Time per request:       3.539 [ms] (mean, across all concurrent requests)Transfer rate:          100.80 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    3   5.6      0      23Processing:   436 1376 278.3   1290    1953Waiting:      436 1376 278.3   1290    1953Total:        444 1379 281.1   1290    1961Percentage of the requests served within a certain time (ms)  50%   1290  66%   1379  75%   1433  80%   1703  90%   1811  95%   1870  98%   1943  99%   1956 100%   1961 (longest request)</code></pre></div></div><div class="paragraph"><p>Nothing unexpected happened. Median processing time per request is 1290 ms, which is OK - the longest request to product-service takes 1200 ms, so recommendations-service cannot return a response in shorter time. The longest request took 1961 ms - a decent and acceptable value in this demo.</p></div><div class="paragraph"><p>The most interesting value is not shown directly in this result. We have executed 2000 requests to <code>/recommendations</code> endpoint and it took 7 seconds to complete all requests. However, our application handled not 2000, but 10,000 requests, because every single request to <code>/recommendations</code> causes 4&nbsp;additional requests to <code>/product/PROD-xxx</code>, handled by the same application. It means that our demo application handled ~1429 requests per second. With just a single thread.</p></div><div class="paragraph"><p>Another good information is that handling 10,000 request didn&#8217;t cause significant resources consumption. Below you can find a screen shot taken from JProfiler attached to the application when I have repeated the same <code>ab</code> command 3 times:</p></div><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/micronaut-jprofiler.png"><img src="/images/micronaut-jprofiler.png" alt="micronaut jprofiler"></a></div></div><div class="paragraph"><p>3 spikes on GC activity and CPU load (up to &lt;20% max), and unnoticeable memory consumption increase. Keep in mind that this is not a bulletproof benchmark - I used application running with <code>gradle run</code> and I haven&#8217;t set any useful JVM tweak flags.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Part 2 ends here. In the next (and last) part of this article we will play around with timeouts and see what kind of problems it may introduce. Stay tuned, and until the next time!</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Continue reading here - <a href="/micronaut-non-blocking-and-async-part-3/" title="Non-blocking and async Micronaut - quick start (part 3)">Non-blocking and async Micronaut - quick start (part 3)</a></td></tr></table></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Welcome to the part 2 of &lt;em&gt;&quot;Non-blocking and async Micronaut&quot;&lt;/em&gt; article. In the &lt;a href=&quot;https://e.printstacktrace.blog/2018/10/micronaut-non-blocking-and-async-part1/&quot;&gt;previous part&lt;/a&gt; we have explained the idea behind this demo and we have implemented product-service - a simple endpoint that returns information about some products. Today we will focus on implementing &lt;strong&gt;recommendations-service&lt;/strong&gt; part and we will run some simple benchmark tests. Let&amp;#8217;s start!&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Micronaut Cookbook" scheme="https://e.printstacktrace.blog/categories/micronaut-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="micronaut" scheme="https://e.printstacktrace.blog/tags/micronaut/"/>
    
      <category term="non-blocking" scheme="https://e.printstacktrace.blog/tags/non-blocking/"/>
    
      <category term="async" scheme="https://e.printstacktrace.blog/tags/async/"/>
    
      <category term="reactive-programming" scheme="https://e.printstacktrace.blog/tags/reactive-programming/"/>
    
      <category term="rxjava" scheme="https://e.printstacktrace.blog/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Non-blocking and async Micronaut - quick start (part 1)</title>
    <link href="https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part1/"/>
    <id>https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part1/</id>
    <published>2018-10-25T00:33:37.000Z</published>
    <updated>2018-10-25T00:33:37.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>If you haven&#8217;t heard about <a href="http://micronaut.io/" target="_blank" rel="noopener">Micronaut</a> you have been probably just woken up from deep hibernation. No&nbsp;worries, I&#8217;m joking :) Anyway, Micronaut 1.0 GA <a href="https://twitter.com/micronautfw/status/1054754150292967424" target="_blank" rel="noopener">was released yesterday</a> and it is the right time to play around with it a bit. In this article I would like to show you how easy it is to handle HTTP requests in a non-blocking manner, using just a single computation thread. Interested? Let&#8217;s start!</p></div><a id="more"></a><div class="admonitionblock warning"><table><tr><td class="icon"><i class="fa icon-warning" title="Warning"></i></td><td class="content">This is not a introduction to Micronaut. If you are not familiar with the framework, consider reading official <a href="https://docs.micronaut.io/latest/guide/index.html" target="_blank" rel="noopener">User Guide</a> first.</td></tr></table></div><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>In this article I would like to show you a very simple example that simulates communication between two remote services:</p></div><div class="ulist"><ul><li><p><strong>product-service</strong> exposes a single endpoint <code>(GET) /product/{id}</code> which returns specific product information. We will simulate high latency (fixed on different products) - the idea is that this service might communicate with <code>n</code> different remote services to collect final product information.</p></li><li><p><strong>recommendations-service</strong> exposes a single endpoint <code>(GET) /recommendations</code> which returns fixed number of recommendations. We won&#8217;t focus on building solid recommendations system - this service is just a mock that communicates over HTTP with <strong>product-service</strong> to get the information about products it&#8217;s going to recommend to the user. A single HTTP request to recommendations-service endpoint will cause 4 additional non-blocking requests to product-service endpoint.</p></li></ul></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">This example was inspired by demo I made for my <a href="https://github.com/wololock/ratpack-quickstart-demo" target="_blank" rel="noopener"><em>"Ratpack - practical quickstart"</em></a> presentation.</td></tr></table></div><div class="paragraph"><p>Micronaut is shipped with handy command line tool <code>mn</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% mn --helpUsage: mn [-hnvVx] [COMMAND]Micronaut CLI command line interface for generating projects and services.Commonly used commands are:  create-app NAME  create-cli-app NAME  create-federation NAME --services SERVICE_NAME[,SERVICE_NAME]...  create-function NAMEOptions:  -h, --help           Show this help message and exit.  -n, --plain-output   Use plain text instead of ANSI colors and styles.  -v, --verbose        Create verbose output.  -V, --version        Print version information and exit.  -x, --stacktrace     Show full stack trace when exceptions occur.Commands:  create-app         Creates an application  create-cli-app     Creates a command line application  create-federation  Creates a federation of services  create-function    Creates a serverless function application  create-profile     Creates a profile  help               Prints help information for a specific command  list-profiles      Lists the available profiles  profile-info       Display information about a given profile</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">You can install Micronaut CLI using <a href="https://sdkman.io/sdks#micronaut" target="_blank" rel="noopener">SDKMAN!</a> - <code>sdk install micronaut</code></td></tr></table></div><div class="paragraph"><p>Now we are able to create Micronaut application skeleton:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">mn create-app micronaut-nonblocking-async-demo</code></pre></div></div><div class="paragraph"><p>It creates a new application using Gradle build tool (switching to Maven is possible if needed). After applying a few small changes our final <code>build.gradle</code> file looks like this:</p></div><div class="listingblock"><div class="title">Listing 1. build.gradle</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">plugins {    id "io.spring.dependency-management" version "1.0.6.RELEASE"    id "com.github.johnrengelman.shadow" version "4.0.0"    id "net.ltgt.apt-eclipse" version "0.18"    id "net.ltgt.apt-idea" version "0.18"}apply plugin: "application"apply plugin: "java"apply plugin: "groovy"apply plugin: "jacoco"version "0.1"group "com.github.wololock.micronaut"repositories {    mavenLocal()    mavenCentral()    maven { url "https://jcenter.bintray.com" }}dependencyManagement {    imports {        mavenBom 'io.micronaut:micronaut-bom:1.0.0'    }}dependencies {    annotationProcessor "io.micronaut:micronaut-inject-java"    annotationProcessor "io.micronaut:micronaut-validation"    compile "io.micronaut:micronaut-inject"    compile "io.micronaut:micronaut-validation"    compile "io.micronaut:micronaut-runtime"    compile "io.micronaut:micronaut-http-client"    compile "io.micronaut:micronaut-http-server-netty"    compileOnly "io.micronaut:micronaut-inject-java"    runtime "ch.qos.logback:logback-classic:1.2.3"    testCompile "io.micronaut:micronaut-inject-java"    testCompile("org.spockframework:spock-core:1.1-groovy-2.4")}shadowJar {    mergeServiceFiles()}run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')mainClassName = "com.github.wololock.micronaut.Application"compileJava.options.compilerArgs += '-parameters'compileTestJava.options.compilerArgs += '-parameters'jacocoTestReport {    reports {        xml.enabled true        html.enabled true    }}check.dependsOn jacocoTestReport</code></pre></div></div></div></div><div class="sect1"><h2>Implementing product-service</h2><div class="sectionbody"><div class="paragraph"><p>We start with writing some product-service code. For simplicity we will put both services to a single app - this is OK for this demo, but in real-life you would keep these two services as separate applications. Here is a list of files we are going to create:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">products├── ProductClient.java├── ProductController.java├── Product.java└── ProductService.java</code></pre></div></div><div class="ulist"><ul><li><p><code>Product</code> class is defined by 3 simple properties: <code>id</code>, <code>name</code> and <code>price</code>. <a href="https://github.com/wololock/micronaut-nonblocking-async-demo/blob/master/src/main/java/com/github/wololock/micronaut/products/Product.java" target="_blank" rel="noopener">Nothing fancy</a>.</p></li><li><p><code>ProductService</code> stores 4 exemplary products in memory and simulates high latency when retrieving products by id.</p></li><li><p><code>ProductController</code> exposes a public API endpoint.</p></li><li><p><code>ProductClient</code> is Micronaut&#8217;s special interface that generates an HTTP client we can use to communicate with the API from other services (from recommendations-service for instance).</p></li></ul></div><div class="paragraph"><p>Here is what implementation of <code>ProductService</code> looks like:</p></div><div class="listingblock"><div class="title">Listing 2. src/main/java/com/github/wololock/micronaut/products/ProductService.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.products;import io.reactivex.Maybe;import io.reactivex.schedulers.Schedulers;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import javax.inject.Singleton;import java.math.BigDecimal;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import java.util.function.Supplier;@Singleton <i class="conum" data-value="1"></i><b>(1)</b>final class ProductService {    private static final Logger log = LoggerFactory.getLogger(ProductService.class);    private static final Map&lt;String, Supplier&lt;Product&gt;&gt; products = new ConcurrentHashMap&lt;&gt;();    static {        products.put("PROD-001", createProduct("PROD-001", "Micronaut in Action", 29.99, 120));        products.put("PROD-002", createProduct("PROD-002", "Netty in Action", 31.22, 190));        products.put("PROD-003", createProduct("PROD-003", "Effective Java, 3rd edition", 31.22, 600));        products.put("PROD-004", createProduct("PROD-004", "Clean Code", 31.22, 1200));    }    public Maybe&lt;Product&gt; findProductById(final String id) { <i class="conum" data-value="2"></i><b>(2)</b>        return Maybe.just(id)                .subscribeOn(Schedulers.io()) <i class="conum" data-value="3"></i><b>(3)</b>                .map(it -&gt; products.getOrDefault(it, () -&gt; null).get());    }    private static Supplier&lt;Product&gt; createProduct(final String id, final String name, final Double price, final int latency) {        return () -&gt; {            simulateLatency(latency); <i class="conum" data-value="4"></i><b>(4)</b>            log.debug("Product with id {} ready to return...", id);            return new Product(id, name, BigDecimal.valueOf(price));        };    }    private static void simulateLatency(final int millis) {        try {            Thread.sleep(millis);        } catch (InterruptedException ignored) {}    }}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td><code>@javax.inject.Singleton</code> annotation instructs Micronaut that this class represents a bean to inject.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td><code>Maybe&lt;Product&gt;</code> return type means that this method returns a single <code>Product</code>, or no value, or throws exception.</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>Calling <code>subscribeOn(Schedulers.io())</code> moves calculation to a scheduler responsible for running IO-bound work.</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>We simulate latency with <code>Thread.sleep(millis)</code> before returning a <code>Product</code> object from a supplier.</td></tr></table></div><div class="paragraph"><p>The most important and the most interesting part is implemented in <code>ProductService</code> class. Firstly, we store a few products in memory as <code>Supplier&lt;Product&gt;</code> to simulate latency inside supplier&#8217;s body. Secondly, we return <code>Maybe&lt;Product&gt;</code> type to inform that <code>Product</code> may or not be returned, which is expected if we call the method with <code>id</code> that does not map to any existing product.</p></div><div class="paragraph"><p>Take a look how the <code>findProductById</code> method is implemented. We start with creating <code>Maybe&lt;String&gt;</code> object using <code>id</code> received from the method call. Then we switch to <code>Schedulers.io()</code> scheduler to move execution of this blocking operation to a thread-pool that is designed to execute such operations. And finally we map <code>id</code> to a product associated with it and we return <code>Maybe&lt;Product&gt;</code> type. For this demo purpose we also log some debug information - it will be useful when we execute a few parallel requests to see how it works.</p></div><div class="paragraph"><p>Now it is time to implement <code>ProductController</code> - our public API endpoint:</p></div><div class="listingblock"><div class="title">Listing 3. src/main/java/com/github/wololock/micronaut/products/ProductController.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.products;import io.micronaut.http.annotation.Controller;import io.micronaut.http.annotation.Get;import io.reactivex.Maybe;import org.slf4j.Logger;import org.slf4j.LoggerFactory;@Controller("/product") <i class="conum" data-value="1"></i><b>(1)</b>final class ProductController {    private static final Logger log = LoggerFactory.getLogger(ProductController.class);    private final ProductService productService;    public ProductController(ProductService productService) { <i class="conum" data-value="2"></i><b>(2)</b>        this.productService = productService;    }    @Get("/{id}") <i class="conum" data-value="3"></i><b>(3)</b>    public Maybe&lt;Product&gt; getProduct(String id) { <i class="conum" data-value="4"></i><b>(4)</b>        log.debug("ProductController.getProduct({}) executed...", id);        return productService.findProductById(id).onErrorComplete(); <i class="conum" data-value="5"></i><b>(5)</b>    }}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td><code>@Controller("/products")</code> annotation registers HTTP handler class.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Constructor injection does not require any annotation.</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td><code>@Get("/{id}")</code> defines GET mapping and path token <code>id</code>.</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td><code>Maybe&lt;Product&gt;</code> return type instructs event-loop that we are going to execute this request in a non-blocking manner.</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>Calling <code>onErrorComplete()</code> ensures that in case of <code>null</code> product HTTP server will produce <code>404 Not Found</code> response.</td></tr></table></div><div class="paragraph"><p>And the last, but not least - <code>ProductClient</code> interface:</p></div><div class="listingblock"><div class="title">Listing 4. src/main/java/com/github/wololock/micronaut/products/ProductClient.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.products;import io.micronaut.http.annotation.Get;import io.micronaut.http.client.annotation.Client;import io.reactivex.Maybe;@Client("/product")public interface ProductClient {    @Get("/{id}")    Maybe&lt;Product&gt; getProduct(final String id);}</code></pre></div></div><div class="paragraph"><p>Micronaut will generate and compile HTTP client that implements this interface - no runtime proxy that slows down our applications. Brilliant!</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Source code of the application described in this blog post can be found here <a href="https://github.com/wololock/micronaut-nonblocking-async-demo" class="bare" target="_blank" rel="noopener">https://github.com/wololock/micronaut-nonblocking-async-demo</a></td></tr></table></div></div></div><div class="sect1"><h2>Running product-service</h2><div class="sectionbody"><div class="paragraph"><p>Now it is time to run our service and see it in action:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">gradle run</code></pre></div></div><div class="paragraph"><p>After about a second we will information that our server application is running:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">01:31:27.475 [main] INFO  - Startup completed in 636ms. Server Running: http://localhost:8080</code></pre></div></div><div class="paragraph"><p>Let&#8217;s execute two requests. I will use <a href="https://httpie.org/" target="_blank" rel="noopener">HTTPie</a> in below examples:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% http localhost:8080/product/PROD-001HTTP/1.1 200 OKDate: Thu, 25 Oct 2018 01:34:15 GMTconnection: keep-alivecontent-length: 60content-type: application/json{    "id": "PROD-001",    "name": "Micronaut in Action",    "price": 29.99}</code></pre></div></div><div class="paragraph"><p>Product with id <code>PROD-001</code> returned successfully. Now let&#8217;s take a look what does the response for non-existing product looks like:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% http localhost:8080/product/PROD-008HTTP/1.1 404 Not FoundDate: Thu, 25 Oct 2018 01:35:11 GMTconnection: closecontent-length: 93content-type: application/json{    "_links": {        "self": {            "href": "/product/PROD-008",            "templated": false        }    },    "message": "Page Not Found"}</code></pre></div></div></div></div><div class="sect1"><h2>Executing multiple parallel requests</h2><div class="sectionbody"><div class="paragraph"><p>Above examples shown that application works as expected. But does it process requests in a&nbsp;non-blocking manner? Let&#8217;s test it out. Firstly, we will update <code>application.yml</code> and set a single event-loop to process all incoming requests:</p></div><div class="listingblock"><div class="title">Listing 5. src/main/resources/application.yml</div><div class="content"><pre class="highlightjs highlight"><code class="language-yml hljs" data-lang="yml">micronaut:    application:        name: micronaut-nonblocking-async-demo    server:        maxRequestSize: 1MB        host: localhost        netty:           maxHeaderSize: 500KB           worker:              threads: 1           parent:              threads: 1           childOptions:              autoRead: true</code></pre></div></div><div class="paragraph"><p>Following configuration means that there is only one event-loop (a single thread) that is responsible for handling incoming HTTP requests. The whole idea here is to keep this event-loop ready to process requests and delegate all blocking operations to a separate thread-pool where they can block for some amount of time.</p></div><div class="paragraph"><p>We will use <a href="https://github.com/JoeDog/siege" target="_blank" rel="noopener">siege</a> - an http load tester and benchmarking command line tool that allows us executing multiple concurrent requests. We will execute 20 multiple HTTP requests to see how our application reacts to 20 concurrent requests with just a single thread dedicated to handling requests:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% siege -c 20 -r 1 http://localhost:8080/product/PROD-003** SIEGE 4.0.4** Preparing 20 concurrent users for battle.The server is now under siege...HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003Transactions:          20 hitsAvailability:      100.00 %Elapsed time:        0.62 secsData transferred:        0.00 MBResponse time:        0.62 secsTransaction rate:       32.26 trans/secThroughput:        0.00 MB/secConcurrency:       19.87Successful transactions:          20Failed transactions:           0Longest transaction:        0.62Shortest transaction:        0.61</code></pre></div></div><div class="paragraph"><p>Our application handled 20 concurrent requests with a single computation thread. <code>PROD-003</code> has <code>600ms</code> latency, so all responses returned approximately at the same time. And here is what console log looks like after handling these 20 requests:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">01:51:46.623 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.630 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.630 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.630 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.631 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.631 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.631 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.631 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.632 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.632 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.632 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.632 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.632 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.633 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.633 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.633 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.633 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.633 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.634 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.634 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:47.231 [RxCachedThreadScheduler-1 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-2 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-4 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-5 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-3 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-6 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-7 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.232 [RxCachedThreadScheduler-8 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.232 [RxCachedThreadScheduler-9 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.232 [RxCachedThreadScheduler-10] DEBUG - Product with id PROD-003 ready to return...01:51:47.232 [RxCachedThreadScheduler-11] DEBUG - Product with id PROD-003 ready to return...01:51:47.233 [RxCachedThreadScheduler-12] DEBUG - Product with id PROD-003 ready to return...01:51:47.233 [RxCachedThreadScheduler-13] DEBUG - Product with id PROD-003 ready to return...01:51:47.233 [RxCachedThreadScheduler-14] DEBUG - Product with id PROD-003 ready to return...01:51:47.233 [RxCachedThreadScheduler-15] DEBUG - Product with id PROD-003 ready to return...01:51:47.233 [RxCachedThreadScheduler-16] DEBUG - Product with id PROD-003 ready to return...01:51:47.234 [RxCachedThreadScheduler-17] DEBUG - Product with id PROD-003 ready to return...01:51:47.234 [RxCachedThreadScheduler-18] DEBUG - Product with id PROD-003 ready to return...01:51:47.234 [RxCachedThreadScheduler-19] DEBUG - Product with id PROD-003 ready to return...01:51:47.234 [RxCachedThreadScheduler-20] DEBUG - Product with id PROD-003 ready to return...</code></pre></div></div><div class="paragraph"><p>This log shows clearly what is the biggest benefit of non-blocking HTTP requests processing. We use a single event-loop running in <code>nioEventLoopGroup-1-2</code> thread. It receives HTTP request and instead of blocking for 600 milliseconds (latency of <code>PROD-003</code> product) it delegates operation to IO thread pool and is ready to handle next request. The default IO thread pool uses cached thread pool, so in this case it spawns 20 threads to handle the operation and they will wait 60 seconds to handle another job.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Part 1 ends here. You have seen Micronaut&#8217;s non-blocking processing in action, and what is even more important - now you know that switching from blocking model to a non-blocking one does not require a huge mind shift. In the part 2 we will implement recommendations-service side and integrate it with product-service endpoint using Micronaut&#8217;s reactive HTTP client.</p></div><div class="paragraph"><p>I hope you have learned something interesting today. If you are interested in Micronaut, please leave a comment below and let me know what kind of topics interest you the most. Stay tuned, and until the next time!</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Continue reading here - <a href="https://e.printstacktrace.blog/2018/10/micronaut-non-blocking-and-async-part-2/">Non-blocking and async Micronaut - quick start (part 2)</a></td></tr></table></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;If you haven&amp;#8217;t heard about &lt;a href=&quot;http://micronaut.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Micronaut&lt;/a&gt; you have been probably just woken up from deep hibernation. No&amp;nbsp;worries, I&amp;#8217;m joking :) Anyway, Micronaut 1.0 GA &lt;a href=&quot;https://twitter.com/micronautfw/status/1054754150292967424&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;was released yesterday&lt;/a&gt; and it is the right time to play around with it a bit. In this article I would like to show you how easy it is to handle HTTP requests in a non-blocking manner, using just a single computation thread. Interested? Let&amp;#8217;s start!&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Micronaut Cookbook" scheme="https://e.printstacktrace.blog/categories/micronaut-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="micronaut" scheme="https://e.printstacktrace.blog/tags/micronaut/"/>
    
      <category term="non-blocking" scheme="https://e.printstacktrace.blog/tags/non-blocking/"/>
    
      <category term="async" scheme="https://e.printstacktrace.blog/tags/async/"/>
    
      <category term="reactive-programming" scheme="https://e.printstacktrace.blog/tags/reactive-programming/"/>
    
      <category term="rxjava" scheme="https://e.printstacktrace.blog/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>How to avoid &quot;No tests were found&quot; when using JUnit 5 with Groovy?</title>
    <link href="https://e.printstacktrace.blog/how-to-avoid-no-tests-were-found-when-using-junit5-with-groovy/"/>
    <id>https://e.printstacktrace.blog/how-to-avoid-no-tests-were-found-when-using-junit5-with-groovy/</id>
    <published>2018-10-24T07:00:48.000Z</published>
    <updated>2018-10-24T07:00:48.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>In this short blog post I would like to explain how to avoid popular mistake when you write your first JUnit 5 test case in Groovy.</p></div><a id="more"></a><div class="sect1"><h2>The example</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with the example. Here is our <code>build.gradle</code> file that adds JUnit 5 dependency:</p></div><div class="listingblock"><div class="title">Listing 1. build.gradle</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">plugins {    id 'groovy'    id 'idea'}repositories {jcenter()}dependencies {    compile localGroovy()    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'}test {    useJUnitPlatform()}</code></pre></div></div><div class="paragraph"><p>And here is our test class:</p></div><div class="listingblock"><div class="title">Listing 2. src/test/groovy/UnitTest.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import org.junit.jupiter.api.Testclass UnitTest {    @Test    def shouldThrowAnException() {        throw new RuntimeException()    }}</code></pre></div></div><div class="paragraph"><p>This test does nothing, but it&#8217;s fine. We just want to execute this test.</p></div></div></div><div class="sect1"><h2>The problem</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s see what happens when we try to run this test:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% gradle testBUILD SUCCESSFUL in 1s2 actionable tasks: 2 executed</code></pre></div></div><div class="paragraph"><p>Nothing happened. When we try to execute this test inside IntelliJ IDEA, we will see something like this:</p></div><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-junit5-def-mistake.png"><img src="/images/groovy-junit5-def-mistake.png" alt="groovy junit5 def mistake"></a></div></div><div class="paragraph"><p>What&#8217;s wrong?</p></div></div></div><div class="sect1"><h2>The solution</h2><div class="sectionbody"><div class="paragraph"><p>The problem we shown above is caused by a single <code>def</code> keyword we used in <code>shouldThrowAnException</code> prototype. This is common mistake, made very often by people who have experience with Spock Framework (which tolerates <code>def</code> btw).</p></div><div class="paragraph"><p>So, what is the problem with <code>def</code> keyword? Firstly, let&#8217;s take a look at the decompiled class:</p></div><div class="listingblock"><div class="title">Listing 3. Decompiled UnitTest.class file</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//import groovy.lang.GroovyObject;import groovy.lang.MetaClass;import org.codehaus.groovy.runtime.callsite.CallSite;import org.junit.jupiter.api.Test;public class UnitTest implements GroovyObject {    public UnitTest() {        CallSite[] var1 = $getCallSiteArray();        super();        MetaClass var2 = this.$getStaticMetaClass();        this.metaClass = var2;    }    @Test    public Object shouldThrowAnException() {        CallSite[] var1 = $getCallSiteArray();        throw (Throwable)var1[0].callConstructor(RuntimeException.class);    }}</code></pre></div></div><div class="paragraph"><p>As you can see Groovy&#8217;s <code>def</code> keyword gets compiled to <code>Object</code> type in this case. OK, but what is wrong with that? Well, JUnit 5 method resolver <a href="https://github.com/junit-team/junit5/blob/master/junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/discovery/predicates/IsTestMethod.java" target="_blank" rel="noopener">uses <code>IsTestMethod</code> predicate</a> which requires that test method returns <code>void</code>. Otherwise method annotated with <code>@Test</code> does not get resolved.</p></div><div class="paragraph"><p>If we only replace <code>def</code> with <code>void</code> keyword:</p></div><div class="listingblock"><div class="title">Listing 4. Updated src/test/groovy/UnitTest.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import org.junit.jupiter.api.Testclass UnitTest {    @Test    void shouldThrowAnException() {        throw new RuntimeException()    }}</code></pre></div></div><div class="paragraph"><p>the test will execute and fail as expected:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% gradle test&gt; Task :test FAILEDUnitTest &gt; shouldThrowAnException() FAILED    java.lang.RuntimeException at UnitTest.groovy:71 test completed, 1 failedFAILURE: Build failed with an exception.* What went wrong:Execution failed for task ':test'.&gt; There were failing tests. See the report at: file:///home/wololock/workspace/groovy-junit5/build/reports/tests/test/index.html* Try:Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.* Get more help at https://help.gradle.orgBUILD FAILED in 1s2 actionable tasks: 2 executed</code></pre></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;In this short blog post I would like to explain how to avoid popular mistake when you write your first JUnit 5 test case in Groovy.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="How to" scheme="https://e.printstacktrace.blog/categories/how-to/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="unit-test" scheme="https://e.printstacktrace.blog/tags/unit-test/"/>
    
      <category term="junit" scheme="https://e.printstacktrace.blog/tags/junit/"/>
    
      <category term="junit5" scheme="https://e.printstacktrace.blog/tags/junit5/"/>
    
      <category term="gradle" scheme="https://e.printstacktrace.blog/tags/gradle/"/>
    
      <category term="ide" scheme="https://e.printstacktrace.blog/tags/ide/"/>
    
  </entry>
  
  <entry>
    <title>GraalVM and Groovy - how to start?</title>
    <link href="https://e.printstacktrace.blog/graalvm-and-groovy-how-to-start/"/>
    <id>https://e.printstacktrace.blog/graalvm-and-groovy-how-to-start/</id>
    <published>2018-10-03T21:28:49.000Z</published>
    <updated>2018-10-03T21:28:49.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p><a href="https://www.graalvm.org/" target="_blank" rel="noopener">GraalVM</a> became one of the most popular topics in the JVM ecosystem. It promises the highest possible speed of running JVM-based programs (when compiled to native images), hand in hand with the smaller memory footprint. It sounds interesting enough to give it a try. And today we are going to play around a little bit with running simple Groovy program after compiling to a standalone native image.</p></div><a id="more"></a><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>This blog post documents pretty simple use case of running Groovy code compiled to a GraalVM native image. It will give you a good understanding how to start and how to solve the problems you will most probably face when you start playing around with your own examples.</p></div></div></div><div class="sect1"><h2>Prerequisites</h2><div class="sectionbody"><div class="paragraph"><p>We will be using following tools:</p></div><div class="ulist"><ul><li><p><strong>GraalVM</strong> 1.0.0-RC7 <em>(the latest version while writing this blog post)</em></p></li><li><p><strong>Groovy</strong> 2.5.2</p></li></ul></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">The easiest way to install GraalVM and Groovy is to use <a href="https://sdkman.io/" target="_blank" rel="noopener">SDKMAN!</a> command line tool.</td></tr></table></div></div></div><div class="sect1"><h2>Let&#8217;s code</h2><div class="sectionbody"><div class="paragraph"><p>For the purpose of this experiment we are going to use a simple Groovy program that sums and multiplies numbers:</p></div><div class="listingblock"><div class="title">Listing 1. RandomNumber.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">class RandomNumber {    static void main(String[] args) {        def random = new Random().nextInt(1000)        println "The random number is: $random"        def sum = (0..random).sum { int num -&gt; num * 2 }        println "The doubled sum of numbers between 0 and $random is $sum"    }}</code></pre></div></div><div class="paragraph"><p>GraalVM prefers static compilation<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> and that is why we are going to create compiler configuration file like:</p></div><div class="listingblock"><div class="title">Listing 2. compiler.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">withConfig(configuration) {    ast(groovy.transform.CompileStatic)    ast(groovy.transform.TypeChecked)}</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Alternatively you could annotate the class with <code>@groovy.transform.CompileStatic</code> and <code>@groovy.transform.TypeChecked</code>.</td></tr></table></div><div class="paragraph"><p>We are ready to compile our code with <code>groovyc</code> compiler:</p></div><div class="listingblock"><div class="title">Listing 3. Compiling Groovy code</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">groovyc --configscript compiler.groovy RandomNumber.groovy</code></pre></div></div><div class="paragraph"><p>Code compiled. Let&#8217;s make sure we are using a correct GraalVM JDK:</p></div><div class="listingblock"><div class="title">Listing 4. Checking Java version</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">java -versionopenjdk version "1.8.0_172"OpenJDK Runtime Environment (build 1.8.0_172-20180625212755.graaluser.jdk8u-src-tar-g-b11)GraalVM 1.0.0-rc7 (build 25.71-b01-internal-jvmci-0.48, mixed mode)</code></pre></div></div><div class="paragraph"><p>Everything is ready. Let&#8217;s run the code using GraalVM JDK:</p></div><div class="listingblock"><div class="title">Listing 5. Running Java program with GraalVM</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">java -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar" RandomNumberThe random number is: 876The doubled sum of numbers between 0 and 876 is 768252</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Running Groovy compiled code as a Java program requires adding <code>org.codehaus.groovy:groovy:2.5.2:jar</code> to the classpath. In this example I am using JAR file from my local Maven repository.</td></tr></table></div></div></div><div class="sect1"><h2>Creating native image</h2><div class="sectionbody"><div class="paragraph"><p>Running our example inside the JVM was nice, but GraalVM offers much more. We can create standalone native image that will consume much less memory and will execute in a blink of an eye. Let&#8217;s give it a try:</p></div><div class="listingblock"><div class="title">Listing 6. Building native image with GraalVM</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">native-image -H:+ReportUnsupportedElementsAtRuntime \        -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar" \        --no-server \        RandomNumber</code></pre></div></div><div class="paragraph"><p>Running the command will produce a following output:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">[randomnumber:13187]    classlist:   2,144.27 ms[randomnumber:13187]        (cap):     662.01 ms[randomnumber:13187]        setup:   1,245.07 ms[randomnumber:13187]   (typeflow):   7,048.82 ms[randomnumber:13187]    (objects):   6,547.35 ms[randomnumber:13187]   (features):     119.57 ms[randomnumber:13187]     analysis:  15,433.33 ms[randomnumber:13187]     universe:     564.07 ms[randomnumber:13187]      (parse):   1,903.46 ms[randomnumber:13187]     (inline):   2,529.37 ms[randomnumber:13187]    (compile):  11,180.52 ms[randomnumber:13187]      compile:  19,392.95 ms[randomnumber:13187]        image:   1,872.31 ms[randomnumber:13187]        write:     373.53 ms[randomnumber:13187]      [total]:  42,717.44 ms</code></pre></div></div><div class="paragraph"><p>Let&#8217;s run the program then:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">./randomnumber</code></pre></div></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">The random number is: 139Exception in thread "main" groovy.lang.MissingMethodException: No signature of method: RandomNumber$_main_closure1.doCall() is applicable for argument types: (Integer) values: [0]Possible solutions: findAll(), findAll(), isCase(java.lang.Object), isCase(java.lang.Object)at java.lang.Throwable.&lt;init&gt;(Throwable.java:250)at java.lang.Exception.&lt;init&gt;(Exception.java:54)at java.lang.RuntimeException.&lt;init&gt;(RuntimeException.java:51)at groovy.lang.GroovyRuntimeException.&lt;init&gt;(GroovyRuntimeException.java:33)at groovy.lang.MissingMethodException.&lt;init&gt;(MissingMethodException.java:49)at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:256)at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)at groovy.lang.Closure.call(Closure.java:421)at org.codehaus.groovy.runtime.DefaultGroovyMethods.sum(DefaultGroovyMethods.java:6613)at org.codehaus.groovy.runtime.DefaultGroovyMethods.sum(DefaultGroovyMethods.java:6513)at RandomNumber.main(RandomNumber.groovy:8)at com.oracle.svm.core.JavaMainWrapper.run(JavaMainWrapper.java:163)</code></pre></div></div><div class="paragraph"><p>Something went wrong. The first print <code>The random number is: 139</code> was shown in the console, but executing sum operation with a closure failed with the exception. The reason of this is because GraalVM uses <a href="https://www.graalvm.org/docs/reference-manual/aot-compilation/" target="_blank" rel="noopener">AOT (ahead of time) compilation</a>, which comes with some limitations (e.g. when it comes to Java reflection). The good news is that GraalVM allows us to configure manually which classes are loaded via reflection, so GraalVM will be ready to do so. Let&#8217;s create a file called <code>reflection.json</code> with the following content:</p></div><div class="listingblock"><div class="title">Listing 7. reflection.json</div><div class="content"><pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">[  {    "name": "RandomNumber$_main_closure1",    "allDeclaredConstructors": true,    "allPublicConstructors": true,    "allDeclaredMethods": true,    "allPublicMethods": true  }]</code></pre></div></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">More about manual reflection configuration can be found <a href="https://github.com/oracle/graal/blob/master/substratevm/REFLECTION.md#manual-configuration" target="_blank" rel="noopener">here</a>.</td></tr></table></div><div class="paragraph"><p>Let&#8217;s run <code>native-image</code> again, but this time with <code>-H:ReflectionConfigurationFiles=reflection.json</code> parameter added:</p></div><div class="listingblock"><div class="title">Listing 8. Building native image with GraalVM</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">native-image -H:+ReportUnsupportedElementsAtRuntime \        -H:ReflectionConfigurationFiles=reflection.json \        -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar" \        --no-server \        RandomNumber</code></pre></div></div><div class="paragraph"><p>When we run <code>./randomnumber</code> now, we will something like this in the console:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">The random number is: 673java.lang.ClassNotFoundException: org.codehaus.groovy.runtime.dgm$519at java.lang.Throwable.&lt;init&gt;(Throwable.java:287)at java.lang.Exception.&lt;init&gt;(Exception.java:84)at java.lang.ReflectiveOperationException.&lt;init&gt;(ReflectiveOperationException.java:75)at java.lang.ClassNotFoundException.&lt;init&gt;(ClassNotFoundException.java:82)at com.oracle.svm.core.hub.ClassForNameSupport.forName(ClassForNameSupport.java:51)at com.oracle.svm.core.jdk.Target_java_lang_ClassLoader.loadClass(Target_java_lang_ClassLoader.java:126)at org.codehaus.groovy.reflection.GeneratedMetaMethod$Proxy.createProxy(GeneratedMetaMethod.java:101)at org.codehaus.groovy.reflection.GeneratedMetaMethod$Proxy.proxy(GeneratedMetaMethod.java:93)at org.codehaus.groovy.reflection.GeneratedMetaMethod$Proxy.isValidMethod(GeneratedMetaMethod.java:78)at groovy.lang.MetaClassImpl.chooseMethodInternal(MetaClassImpl.java:3232)at groovy.lang.MetaClassImpl.chooseMethod(MetaClassImpl.java:3194)at groovy.lang.MetaClassImpl.getNormalMethodWithCaching(MetaClassImpl.java:1402)at groovy.lang.MetaClassImpl.getMethodWithCaching(MetaClassImpl.java:1317)at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1087)at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)at org.codehaus.groovy.runtime.DefaultGroovyMethods.sum(DefaultGroovyMethods.java:6620)at org.codehaus.groovy.runtime.DefaultGroovyMethods.sum(DefaultGroovyMethods.java:6513)at RandomNumber.main(RandomNumber.groovy:8)at com.oracle.svm.core.JavaMainWrapper.run(JavaMainWrapper.java:163)Exception in thread "main" groovy.lang.GroovyRuntimeException: Failed to create DGM method proxy : java.lang.ClassNotFoundException: org.codehaus.groovy.runtime.dgm$519at java.lang.Throwable.&lt;init&gt;(Throwable.java:287)at java.lang.Exception.&lt;init&gt;(Exception.java:84)at java.lang.RuntimeException.&lt;init&gt;(RuntimeException.java:80)at groovy.lang.GroovyRuntimeException.&lt;init&gt;(GroovyRuntimeException.java:46)at org.codehaus.groovy.reflection.GeneratedMetaMethod$Proxy.createProxy(GeneratedMetaMethod.java:106)at org.codehaus.groovy.reflection.GeneratedMetaMethod$Proxy.proxy(GeneratedMetaMethod.java:93)at org.codehaus.groovy.reflection.GeneratedMetaMethod$Proxy.isValidMethod(GeneratedMetaMethod.java:78)at groovy.lang.MetaClassImpl.chooseMethodInternal(MetaClassImpl.java:3232)at groovy.lang.MetaClassImpl.chooseMethod(MetaClassImpl.java:3194)at groovy.lang.MetaClassImpl.getNormalMethodWithCaching(MetaClassImpl.java:1402)at groovy.lang.MetaClassImpl.getMethodWithCaching(MetaClassImpl.java:1317)at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1087)at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)at org.codehaus.groovy.runtime.DefaultGroovyMethods.sum(DefaultGroovyMethods.java:6620)at org.codehaus.groovy.runtime.DefaultGroovyMethods.sum(DefaultGroovyMethods.java:6513)at RandomNumber.main(RandomNumber.groovy:8)at com.oracle.svm.core.JavaMainWrapper.run(JavaMainWrapper.java:163)Caused by: java.lang.ClassNotFoundException: org.codehaus.groovy.runtime.dgm$519at java.lang.Throwable.&lt;init&gt;(Throwable.java:287)at java.lang.Exception.&lt;init&gt;(Exception.java:84)at java.lang.ReflectiveOperationException.&lt;init&gt;(ReflectiveOperationException.java:75)at java.lang.ClassNotFoundException.&lt;init&gt;(ClassNotFoundException.java:82)at com.oracle.svm.core.hub.ClassForNameSupport.forName(ClassForNameSupport.java:51)at com.oracle.svm.core.jdk.Target_java_lang_ClassLoader.loadClass(Target_java_lang_ClassLoader.java:126)at org.codehaus.groovy.reflection.GeneratedMetaMethod$Proxy.createProxy(GeneratedMetaMethod.java:101)... 12 more</code></pre></div></div><div class="paragraph"><p>This time class <code>org.codehaus.groovy.runtime.dgm$519</code> cannot be found. These <code>dgm$&#8230;&#8203;</code> classes are Groovy classes representing generate meta methods. Let&#8217;s add it to the <code>reflection.json</code> and repeat the last two steps. It will fail one more time - this time class <code>org.codehaus.groovy.runtime.dgm$1172</code> cannot be found. Let&#8217;s add it and repeat. Final <code>reflection.json</code> file should look like this:</p></div><div class="listingblock"><div class="title">Listing 9. reflection.json</div><div class="content"><pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">[  {    "name": "RandomNumber$_main_closure1",    "allDeclaredConstructors": true,    "allPublicConstructors": true,    "allDeclaredMethods": true,    "allPublicMethods": true  },  {    "name": "org.codehaus.groovy.runtime.dgm$519",    "allDeclaredConstructors": true,    "allPublicConstructors": true,    "allDeclaredMethods": true,    "allPublicMethods": true  },  {    "name": "org.codehaus.groovy.runtime.dgm$1172",    "allDeclaredConstructors": true,    "allPublicConstructors": true,    "allDeclaredMethods": true,    "allPublicMethods": true  }]</code></pre></div></div><div class="paragraph"><p>And now when we try to run <code>./randomnumber</code> we will see the following output:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">The random number is: 161The doubled sum of numbers between 0 and 161 is 26082</code></pre></div></div><div class="paragraph"><p>It worked, finally! In this case we only had to add these 3 classes to reflection configuration. When you run your own example you may have to add even more before your program executes as expected.</p></div></div></div><div class="sect1"><h2>Let&#8217;s compare execution times</h2><div class="sectionbody"><div class="paragraph"><p>After building and running standalone executable it is a good time to make a short comparison. We are not going to do a detailed benchmark - we just want to test the cold start of the program in 3 different variants.</p></div><div class="paragraph"><p><strong>1:</strong> Running <code>RandomNumber.groovy</code> with a <code>groovy</code> command line (<strong>1,03s</strong>):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">time groovy RandomNumberThe random number is: 546The doubled sum of numbers between 0 and 546 is 298662groovy RandomNumber  1,03s user 0,06s system 192% cpu 0,567 total</code></pre></div></div><div class="paragraph"><p><strong>2:</strong> Running compiled Groovy code with GraalVM JVM (<strong>0,50s</strong>):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">time java -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar" RandomNumberThe random number is: 437The doubled sum of numbers between 0 and 437 is 191406java -cp  RandomNumber  0,50s user 0,04s system 194% cpu 0,274 total</code></pre></div></div><div class="paragraph"><p><strong>3:</strong> Running standalone native image (<strong>0,00s</strong>):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">time ./randomnumberThe random number is: 675The doubled sum of numbers between 0 and 675 is 456300./randomnumber  0,00s user 0,00s system 92% cpu 0,007 total</code></pre></div></div><div class="paragraph"><p>That&#8217;s amazing! I wouldn&#8217;t thought that Java program can execute in a blink of an eye. And here you can see what does it look like in action:</p></div><script src="https://asciinema.org/a/uSh0zfA1JJede8J4R4lQy4FdK.js" id="asciicast-uSh0zfA1JJede8J4R4lQy4FdK" async></script></div></div><div class="sect1"><h2>Limitations</h2><div class="sectionbody"><div class="paragraph"><p>I must say that not everything look so bright. You have to be aware of many limitations you will face when you start building Groovy native images with GraalVM:</p></div><div class="olist arabic"><ol class="arabic"><li><p>Building native images from dynamic Groovy scripts does not work at the moment<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup>.</p></li><li><p>Dynamic runtime metaprogramming may not work at all in GraalVM (some parts may be fixed by configuring classes for AOT reflection).</p></li><li><p>Closures require manual configuration for reflection and you will face some issues when trying to cast a closure to some other type (e.g. when you use a closure in place of a functional interface).</p></li><li><p><a href="http://docs.groovy-lang.org/latest/html/documentation/grape.html" target="_blank" rel="noopener">Grape</a>, one of the most valuable Groovy scripts feature won&#8217;t work as standalone native image, because it requires Groovy command line tool and its class loader that understand what does <code>@Grab</code> annotation mean.</p></li><li><p>And last but not least - Groovy native image for this example weight 24 MB, which is quite a lot comparing to what this application does.</p></li></ol></div><div class="sect2"><h3>An example</h3><div class="paragraph"><p>Before we close this article, let&#8217;s take a look at example that does not work with GraalVM. Let&#8217;s refactor above example to use Java 8 Stream API and closures in place of lambda expressions:</p></div><div class="listingblock"><div class="title">Listing 10. RandomNumber.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.CompileStaticimport groovy.transform.TypeCheckedimport java.util.stream.IntStream@CompileStatic@TypeCheckedclass RandomNumber {    static void main(String[] args) {        def random = new Random().nextInt(1000)        println "The random number is: $random"        Long sum = IntStream.rangeClosed(0, random)                    .boxed()                    .map { it * 2 }                    .mapToLong { it -&gt; (long) it }                    .sum()        println "The doubled sum of numbers between 0 and $random is $sum"    }}</code></pre></div></div><div class="paragraph"><p>It compiles, GraalVM JDK runs it on JVM, native image builds. But when we try to run it we will see following output:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">The random number is: 226Exception in thread "main" org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object 'RandomNumber$_main_closure1@7fcfe0745d78' with class 'RandomNumber$_main_closure1' to class 'java.util.function.Function'at java.lang.Throwable.&lt;init&gt;(Throwable.java:265)at java.lang.Exception.&lt;init&gt;(Exception.java:66)at java.lang.RuntimeException.&lt;init&gt;(RuntimeException.java:62)at java.lang.ClassCastException.&lt;init&gt;(ClassCastException.java:58)at org.codehaus.groovy.runtime.typehandling.GroovyCastException.&lt;init&gt;(GroovyCastException.java:40)at org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.continueCastOnSAM(DefaultTypeTransformation.java:414)at org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.continueCastOnNumber(DefaultTypeTransformation.java:328)at org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.castToType(DefaultTypeTransformation.java:242)at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.castToType(ScriptBytecodeAdapter.java:617)at RandomNumber.main(RandomNumber.groovy:15)at com.oracle.svm.core.JavaMainWrapper.run(JavaMainWrapper.java:163)</code></pre></div></div><div class="paragraph"><p>As you can see closure we used for <code>map</code> operation cannot be cast to <code>java.util.function.Function</code> and program terminates. This is a huge problem for many Groovy programs - we tend to use closure in place of other types and we expect correct coercion to happen. I&#8217;m guessing this example requires some effort and finding which classes should be configured manually for reflection. I will share an update when I find solution to that problem.</p></div></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I hope you have learned something useful from this blog post. I will continue exploring the world of GraalVM in cooperation with different technologies. I&#8217;m looking forward for learning and experimenting with more real-life and useful examples. I strongly encourage you to keep an eye on GraalVM - it is one of the hottest JVM topics these days for a good reason. And if you are looking for a project that is experimenting actively with GraalVM, take a look at <a href="http://micronaut.io/" target="_blank" rel="noopener">Micronaut</a> framework - people from <a href="https://objectcomputing.com/" target="_blank" rel="noopener">OCI</a> did a great job in this area and they documented their efforts in an official Micronaut user guide.</p></div></div></div><div class="sect1"><h2>Useful resources</h2><div class="sectionbody"><div class="ulist"><ul><li><p><a href="https://github.com/graemerocher/micronaut-graal-experiments" class="bare" target="_blank" rel="noopener">https://github.com/graemerocher/micronaut-graal-experiments</a></p></li><li><p><a href="https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692" class="bare" target="_blank" rel="noopener">https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692</a></p></li><li><p><a href="http://guides.micronaut.io/micronaut-creating-first-graal-app/guide/index.html" class="bare" target="_blank" rel="noopener">http://guides.micronaut.io/micronaut-creating-first-graal-app/guide/index.html</a></p></li><li><p><a href="https://blog.frankel.ch/first-impressions-graalvm/" class="bare" target="_blank" rel="noopener">https://blog.frankel.ch/first-impressions-graalvm/</a></p></li></ul></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://github.com/oracle/graal/issues/346#issuecomment-383015796" class="bare" target="_blank" rel="noopener">https://github.com/oracle/graal/issues/346#issuecomment-383015796</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="https://github.com/oracle/graal/issues/708" class="bare" target="_blank" rel="noopener">https://github.com/oracle/graal/issues/708</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.graalvm.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GraalVM&lt;/a&gt; became one of the most popular topics in the JVM ecosystem. It promises the highest possible speed of running JVM-based programs (when compiled to native images), hand in hand with the smaller memory footprint. It sounds interesting enough to give it a try. And today we are going to play around a little bit with running simple Groovy program after compiling to a standalone native image.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="How to" scheme="https://e.printstacktrace.blog/categories/how-to/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="graalvm" scheme="https://e.printstacktrace.blog/tags/graalvm/"/>
    
      <category term="native-image" scheme="https://e.printstacktrace.blog/tags/native-image/"/>
    
      <category term="openjdk" scheme="https://e.printstacktrace.blog/tags/openjdk/"/>
    
  </entry>
  
  <entry>
    <title>What is the most efficient way to iterate collection in Groovy? Let&#39;s play with JMH!</title>
    <link href="https://e.printstacktrace.blog/what-is-the-most-efficient-way-to-iterate-collection-in-groovy-jmh/"/>
    <id>https://e.printstacktrace.blog/what-is-the-most-efficient-way-to-iterate-collection-in-groovy-jmh/</id>
    <published>2018-10-02T10:43:26.000Z</published>
    <updated>2018-10-02T17:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>I guess you may heard about Groovy&#8217;s <code>Collection.each(Closure cl)</code> method - it was introduced 15 years ago <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> and it was a great alternative for a good old for-loop, for-each or even using an iterator approach. You may also heard, that you should not overuse it, because creating a closure to do such simple operation like collection iteration is an overhead. But what if I tell you that nothing could be further from the truth - Groovy&#8217;s <code>each</code> method may be faster than iterator or Java&#8217;s for-each. Sounds interesting? Enjoy the reading!</p></div><a id="more"></a><div class="sect1"><h2>Preparation</h2><div class="sectionbody"><div class="paragraph"><p>Before we dig deeper, let&#8217;s define the initial conditions. We are going to measure an execution time of a few different iteration variants. Each variant will do the same simple operation - it will accumulate the sum of numbers from 0 to 10 millions. We will do it using <code>AtomicLong</code> object and in the most imperative way possible - it is not about finding the most efficient sum operation - it is about giving all variants a simple job to do, so we can focus on iteration process and draw a conclusion after all.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">We are going to use <a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener">JMH</a> benchmark tool and its <a href="https://github.com/melix/jmh-gradle-plugin" target="_blank" rel="noopener">Gradle plugin</a>.</td></tr></table></div><div class="paragraph"><p>What methods are we going to test? We will compare:</p></div><div class="ulist"><ul><li><p>Groovy&#8217;s <code>each</code> method</p></li><li><p>Java&#8217;s for-loop approach</p></li><li><p>Java&#8217;s for-each approach</p></li><li><p>Java&#8217;s iterator approach</p></li><li><p>Java 8 <code>forEach</code> method using closure</p></li><li><p>Java 8 <code>forEach</code> method using anonymous class</p></li></ul></div><div class="admonitionblock warning"><table><tr><td class="icon"><i class="fa icon-warning" title="Warning"></i></td><td class="content">This test uses Groovy 2.4 which does not support Java 8 lambda expressions - that is why we will use Java 8 <code>forEach</code> method with an anonymous class instead.</td></tr></table></div></div></div><div class="sect1"><h2>The code</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with <code>build.gradle</code> file</p></div><div class="listingblock"><div class="title">Listing 1. build.gradle</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">buildscript {  repositories {    jcenter()    maven {      url "https://plugins.gradle.org/m2/"    }  }  dependencies {    classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.7"  }}apply plugin: "idea"apply plugin: "groovy"apply plugin: "me.champeau.gradle.jmh"repositories {    jcenter()}dependencies {    compile 'org.codehaus.groovy:groovy-all:2.4.12'}jmh {    include = ['bench\\.*'] <i class="conum" data-value="1"></i><b>(1)</b>    benchmarkMode = ['avgt'] <i class="conum" data-value="2"></i><b>(2)</b>    timeUnit = 'ms' <i class="conum" data-value="3"></i><b>(3)</b>    iterations = 120 <i class="conum" data-value="4"></i><b>(4)</b>    timeOnIteration = '1s' <i class="conum" data-value="5"></i><b>(5)</b>    warmup = '60s' <i class="conum" data-value="6"></i><b>(6)</b>    warmupIterations = 1 <i class="conum" data-value="7"></i><b>(7)</b>    batchSize = 1    fork = 1}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Load test classes from <code>bench.</code> package</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Use average execution time measurement</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>Measure time in milliseconds</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>Execute 120 iterations</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>Each iteration is limited to 1 second</td></tr><tr><td><i class="conum" data-value="6"></i><b>6</b></td><td>Warm-up for 60 seconds</td></tr><tr><td><i class="conum" data-value="7"></i><b>7</b></td><td>Use a single iteration to warm-up</td></tr></table></div><div class="paragraph"><p>And now let&#8217;s take a look at our benchmark test class:</p></div><div class="listingblock"><div class="title">Listing 2. src/jmh/groovy/bench/GroovyIterationBenchmarks.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package benchimport org.openjdk.jmh.annotations.Benchmarkimport org.openjdk.jmh.annotations.Scopeimport org.openjdk.jmh.annotations.Stateimport java.util.concurrent.atomic.AtomicLongimport java.util.function.Consumer@State(Scope.Benchmark)class GroovyIterationBenchmarks {    final List&lt;Integer&gt; numbers = 0..10_000_000 <i class="conum" data-value="1"></i><b>(1)</b>    @Benchmark    AtomicLong eachTest() { <i class="conum" data-value="2"></i><b>(2)</b>        final AtomicLong result = new AtomicLong()        numbers.each { result.addAndGet(it) }        return result    }    @Benchmark    AtomicLong forEachTest() { <i class="conum" data-value="3"></i><b>(3)</b>        final AtomicLong result = new AtomicLong()        for (int number : numbers) {            result.addAndGet(number)        }        return result    }    @Benchmark    AtomicLong forLoopTest() { <i class="conum" data-value="4"></i><b>(4)</b>        final AtomicLong result = new AtomicLong()        for (int i = 0; i &lt; numbers.size(); i++) {            result.addAndGet(numbers.get(i))        }        return result    }    @Benchmark    AtomicLong iteratorTest() { <i class="conum" data-value="5"></i><b>(5)</b>        final AtomicLong result = new AtomicLong()        final Iterator&lt;Integer&gt; iterator = numbers.iterator()        while (iterator.hasNext()) {            result.addAndGet(iterator.next())        }        return result    }    @Benchmark    AtomicLong java8ForEachWithClosureTest() { <i class="conum" data-value="6"></i><b>(6)</b>        final AtomicLong result = new AtomicLong()        numbers.forEach { result.addAndGet((int) it) }        return result    }    @Benchmark    AtomicLong java8ForEachWithAnonymousClassTest() { <i class="conum" data-value="7"></i><b>(7)</b>        final AtomicLong result = new AtomicLong()        numbers.forEach(new Consumer&lt;Integer&gt;() {            @Override            void accept(Integer number) {                result.addAndGet(number)            }        })        return result    }}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>List of numbers from 0 to 10 millions</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Groovy <code>each {}</code> test case</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>Old Java for-each loop test case</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>Old Java for-loop test case</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>Old Java iterator test case</td></tr><tr><td><i class="conum" data-value="6"></i><b>6</b></td><td>Java 8 <code>forEach()</code> test case with closure in place of a lambda expression</td></tr><tr><td><i class="conum" data-value="7"></i><b>7</b></td><td>Java 8 <code>forEach()</code> test case with an anonymous class in place of lambda expression</td></tr></table></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Above example can be cloned from <a href="https://github.com/wololock/groovy-jmh" class="bare" target="_blank" rel="noopener">https://github.com/wololock/groovy-jmh</a></td></tr></table></div></div></div><div class="sect1"><h2>The results</h2><div class="sectionbody"><div class="paragraph"><p>We are ready to execute the test using Gradle:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">./gradlew jmh</code></pre></div></div><div class="paragraph"><p>And after about 7 minutes we can take a look at the results:</p></div><div class="listingblock"><div class="title">Listing 3. Benchmark results for 10M collection size</div><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">Benchmark                                       Mode  Cnt    Score   Error  UnitsGroovyBench.eachTest                            avgt  120  652,584 ± 2,064  ms/opGroovyBench.forEachTest                         avgt  120  221,790 ± 1,675  ms/opGroovyBench.forLoopTest                         avgt  120  533,534 ± 2,521  ms/opGroovyBench.iteratorTest                        avgt  120  369,492 ± 0,930  ms/opGroovyBench.java8ForEachWithAnonymousClassTest  avgt  120  248,371 ± 2,803  ms/opGroovyBench.java8ForEachWithClosureTest         avgt  120  785,309 ± 3,096  ms/op</code></pre></div></div><div class="ulist"><ul><li><p>The benchmarks shows clearly that using Groovy <code>each</code> with a closure is almost three times slower than good old Java for-each loop (<code>653</code> ms versus <code>222</code> ms).</p></li><li><p>Java for-each and Java 8 <code>forEach</code> with anonymous class are pretty close - <code>222</code> ms versus <code>248</code> ms.</p></li><li><p>The slowest variant was Java 8 <code>forEach</code> with a closure in place of a lambda expression - it took <code>785</code> ms to execute (<code>133</code> ms more than Groovy <code>each</code>).</p></li></ul></div><div class="paragraph"><p>No matter which variant won in this run it still feels like there is something wrong - iterating collection of 10 millions integers took <code>304</code> milliseconds at best, which is still quite slow. The reason of that is because we were testing Groovy&#8217;s dynamic method invocation which comes with some overhead. Let&#8217;s turn on static compilation and see how it works.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Laptop specs: JDK 1.8.0_162 (Java HotSpot&#8482; 64-Bit Server VM, 25.162-b12), Groovy 2.4.12, Intel&#174; Core&#8482; i7-4900MQ CPU @ 2.80GHz (4 cores, cache size 8192 KB), 16 GB RAM, OS: Fedora 26 (64 bit)</td></tr></table></div><div class="paragraph"><p>Full log can be found here: <a href="https://gist.github.com/wololock/c4039cc75a359660b11f89bc8abd6629" class="bare" target="_blank" rel="noopener">https://gist.github.com/wololock/c4039cc75a359660b11f89bc8abd6629</a></p></div></div></div><div class="sect1"><h2>The improvement: static compilation</h2><div class="sectionbody"><div class="paragraph"><p>Without further ado, let&#8217;s add <code>@CompileStatic</code> and <code>@TypeChekced</code> annotations to our <code>GroovyBench</code> class:</p></div><div class="listingblock"><div class="title">Listing 4. Enabling static compilation and type checks</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package benchimport groovy.transform.CompileStaticimport groovy.transform.TypeCheckedimport org.openjdk.jmh.annotations.Benchmarkimport org.openjdk.jmh.annotations.Scopeimport org.openjdk.jmh.annotations.Stateimport java.util.concurrent.atomic.AtomicLongimport java.util.function.Consumer@State(Scope.Benchmark)@CompileStatic <i class="conum" data-value="1"></i><b>(1)</b>@TypeChecked <i class="conum" data-value="2"></i><b>(2)</b>class GroovyBench {    final List&lt;Integer&gt; numbers = 0..10_000_000    // the same benchmark methods}</code></pre></div></div><div class="paragraph"><p>Let&#8217;s run <code>./gradlew clean jmh</code> and see the results:</p></div><div class="listingblock"><div class="title">Listing 5. Benchmark results for statically compiled Groovy code</div><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">Benchmark                                       Mode  Cnt    Score   Error  UnitsGroovyBench.eachTest                            avgt  120   91,897 ± 0,346  ms/opGroovyBench.forEachTest                         avgt  120   96,422 ± 0,550  ms/opGroovyBench.forLoopTest                         avgt  120  139,119 ± 0,723  ms/opGroovyBench.iteratorTest                        avgt  120  103,568 ± 0,648  ms/opGroovyBench.java8ForEachWithAnonymousClassTest  avgt  120  102,460 ± 2,473  ms/opGroovyBench.java8ForEachWithClosureTest         avgt  120  400,481 ± 1,036  ms/op</code></pre></div></div><div class="paragraph"><p>As you can see, enabling static compilation was a game changer! To sum it up:</p></div><div class="ulist"><ul><li><p>Groovy <code>each</code> recorded the best result - <code>91.897</code> ms (previously: <code>652.584</code> ms)</p></li><li><p>The second best result belongs to Java for-each - <code>96.422</code> ms (previously: <code>221.790</code> ms)</p></li><li><p>Java 8 <code>forEach</code> and iterator recorded almost the same result - <code>102.460</code> ms and <code>103.568</code> ms accordingly.</p></li><li><p>And again the slowest result belongs to Java 8 <code>forEach</code> with a closure - <code>400.481</code> ms (previously: `785.309 ` ms)</p></li></ul></div><div class="paragraph"><p>As you can see Groovy <code>each</code> method with a closure can be faster than other variants when static compilation is enabled. But is it always like that? It depends.</p></div><div class="paragraph"><p>Full log can be found here: <a href="https://gist.github.com/wololock/161aae90bcdaabd0fe6144f5339d1727" class="bare" target="_blank" rel="noopener">https://gist.github.com/wololock/161aae90bcdaabd0fe6144f5339d1727</a></p></div></div></div><div class="sect1"><h2>Small collection size</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s run the same benchmark, but this time let&#8217;s limit the numbers of elements in the input list from 10 millions to 10 thousands and see what the results are.</p></div><div class="listingblock"><div class="title">Listing 6. Benchmark results for a list of size 10K</div><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">Benchmark                                       Mode  Cnt  Score    Error  UnitsGroovyBench.eachTest                            avgt  120  0,087 ±  0,001  ms/opGroovyBench.forEachTest                         avgt  120  0,079 ±  0,001  ms/opGroovyBench.forLoopTest                         avgt  120  0,157 ±  0,002  ms/opGroovyBench.iteratorTest                        avgt  120  0,079 ±  0,002  ms/opGroovyBench.java8ForEachWithAnonymousClassTest  avgt  120  0,085 ±  0,001  ms/opGroovyBench.java8ForEachWithClosureTest         avgt  120  0,402 ±  0,002  ms/op</code></pre></div></div><div class="paragraph"><p>Things got change as you can see.</p></div><div class="ulist"><ul><li><p>For 10k size collection the best result gave Java for-each and iterator - <code>0.079</code> ms average.</p></li><li><p>Java 8 <code>forEach</code> with anonymous class was only <code>0.006</code> ms slower - <code>0.085</code> ms average.</p></li><li><p>Groovy <code>each</code> was only <code>0.008</code> ms slower than the best result - <code>0.087</code> ms average.</p></li><li><p>And again the slowest variant was Java 8 <code>forEach</code> with a closure - <code>0.402</code> ms average.</p></li></ul></div><div class="paragraph"><p>Even though Groovy <code>each</code> didn&#8217;t record the best result this time, it is still very close to the fastest variant.</p></div><div class="paragraph"><p>Full log can be found here: <a href="https://gist.github.com/wololock/3a9b1e169c58abbfb4e067aa69b9bfc0" class="bare" target="_blank" rel="noopener">https://gist.github.com/wololock/3a9b1e169c58abbfb4e067aa69b9bfc0</a></p></div></div></div><div class="sect1"><h2>Benchmarking Java</h2><div class="sectionbody"><div class="paragraph"><p>Before we close this article, let&#8217;s take a quick look at the Java benchmark results to get a better understanding how Groovy efficiency differs from Java. Below you can find results of Java benchmark test for two variants - old Java for-each and iterator:</p></div><div class="listingblock"><div class="title">Listing 7. Benchmark results for Java and 10M collection size</div><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">Benchmark                                       Mode  Cnt    Score   Error  UnitsJavaBench.javaForEach                           avgt  120    8,839 ± 0,011  ms/opJavaBench.javaIteratorTest                      avgt  120    8,865 ± 0,011  ms/op</code></pre></div></div><div class="paragraph"><p>Let&#8217;s compare the results:</p></div><div class="ulist"><ul><li><p>Groovy for-each took in average <code>96.422</code> ms while Java did the same job in approximately <code>8.839</code> ms.</p></li><li><p>Groovy iterator test took in average <code>103.568</code> ms while Java did the same job in approximately <code>8.865</code> ms.</p></li></ul></div><div class="paragraph"><p>Full log can be found here: <a href="https://gist.github.com/wololock/c895114949be2820b0fada72df099fcf" class="bare" target="_blank" rel="noopener">https://gist.github.com/wololock/c895114949be2820b0fada72df099fcf</a></p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Now it is the good time to draw a conclusion.</p></div><div class="ulist"><ul><li><p>When you program in statically compiled Groovy there is no difference if you use <code>each</code> with a closure or you stick to old for-each constructions that don&#8217;t require creating a closure.</p></li><li><p>When you program in a dynamic Groovy and you need more efficient iteration algorithm - extract code to a statically compiled class, otherwise you will lost a lot of milliseconds in case of a huge collections.</p></li><li><p>When you can choose between Groovy and Java and you need blazing fast solution - pick Java.</p></li><li><p>And remember that <em>"premature optimization is root of all evil"</em> <sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup> - before you start refactoring your iteration code make sure that switching from one variant to another will give you a real boost. Your application most probably spends most of the time on I/O (e.g. loading data from the database) and saving a millisecond here or there might not be worth the effort.</p></li></ul></div><div class="paragraph"><p>I hope you have enjoyed reading this blog post. Feel free to leave a comment in the section below, I would love to hear your opinion. Until the next time!</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. The first commit in the repository tree that mentions <code>DefaultGroovyMethods.each(Object self, Closure cl)</code> method comes from <a href="https://github.com/apache/groovy/commit/408b29851d7bbe4d343340832297e4be7e0c5578#diff-d88e358e812ea2b6f64924cfa2b616fdR91" target="_blank" rel="noopener">September 11th 2003</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="https://en.wikiquote.org/wiki/Donald_Knuth#Computer_Programming_as_an_Art_.281974.29" class="bare" target="_blank" rel="noopener">https://en.wikiquote.org/wiki/Donald_Knuth#Computer_Programming_as_an_Art_.281974.29</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;I guess you may heard about Groovy&amp;#8217;s &lt;code&gt;Collection.each(Closure cl)&lt;/code&gt; method - it was introduced 15 years ago &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt; and it was a great alternative for a good old for-loop, for-each or even using an iterator approach. You may also heard, that you should not overuse it, because creating a closure to do such simple operation like collection iteration is an overhead. But what if I tell you that nothing could be further from the truth - Groovy&amp;#8217;s &lt;code&gt;each&lt;/code&gt; method may be faster than iterator or Java&amp;#8217;s for-each. Sounds interesting? Enjoy the reading!&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/programming-tips/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="java-8" scheme="https://e.printstacktrace.blog/tags/java-8/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="jmh" scheme="https://e.printstacktrace.blog/tags/jmh/"/>
    
      <category term="benchmark" scheme="https://e.printstacktrace.blog/tags/benchmark/"/>
    
  </entry>
  
  <entry>
    <title>Hexo git deployer removes commits history? Let&#39;s do something about that!</title>
    <link href="https://e.printstacktrace.blog/hexo-git-deployer-removes-commits-history-lets-do-something-about-that/"/>
    <id>https://e.printstacktrace.blog/hexo-git-deployer-removes-commits-history-lets-do-something-about-that/</id>
    <published>2018-09-24T21:18:31.000Z</published>
    <updated>2018-09-24T21:18:31.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>I have found <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> a great tool for building a blog and apply many well-known software development principles. One of them is automation. This is why I have decided to integrate this blog with <a href="https://travis-ci.org/wololock/wololock.github.io" target="_blank" rel="noopener">Travis CI</a> to perform a deployment to GitHub pages. It was a great decision, however a few days later I have noticed one significant issue - deploying a new version of the blog from the CI server caused removing all commits from <code>master</code> branch and starting with initial commit over and over again. It&nbsp;took me a while to find working solution to this problem. This blog post explains a simple solution to this problem.</p></div><a id="more"></a><div class="sect1"><h2>Why does <code>hexo deploy</code> removes the history in the first place?</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with understanding what actually happens. When you run <code>hexo deploy</code> <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> command for a&nbsp;git deployment option, Hexo creates a hidden folder called <code>.deploy_git</code> and it copies generated files from the <code>public</code> folder to it. Next, it initializes git repository (if it does not yet exist) that targets Hexo&#8217;s remote deploy branch and it executes <code>git push --force</code> from this folder to a repository and a&nbsp;branch you have defined in the <code>_config.yml</code> <sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup> file.</p></div><div class="listingblock"><div class="title">Listing 1. Deployment configuration of e.printstacktrace.blog</div><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">deploy:  type: git  repo: git@github.com:wololock/wololock.github.io.git  branch: master</code></pre></div></div><div class="paragraph"><p>If you build and deploy your blog from your local computer and you never delete (or accidentally lost) your blog source code, you may never face this issue. When you do it from the workspace that does not get wiped, then the folder <code>.deploy_git</code> with it&#8217;s full history exists and <code>hexo deploy</code> pushes only those files that were actually modified. When you move to CI server like Travis CI, this is not true anymore, because it executes build with the clean workspace and the fresh clone of the repository. In&nbsp;this case <code>.deploy_git</code> folder simply does not exist and gets recreated from scratch.</p></div></div></div><div class="sect1"><h2>How to deploy and keep the history then?</h2><div class="sectionbody"><div class="paragraph"><p>The solution I have found working for me well is fairly simple. Previously my <code>.travis.yml</code> file part responsible for the deployment looked something like this:</p></div><div class="listingblock"><div class="title">Listing 2. Previous Travis CI deployment configuration</div><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">deploy:  skip_cleanup: true  provider: script  script: hexo deploy  on:    branch: develop</code></pre></div></div><div class="paragraph"><p>It simply triggered <code>hexo deploy</code> whenever I pushed changes to <code>develop</code> branch. In this case it ended up creating a new <code>.deploy_git</code> folder and force pushing an initial commit to the GitHub repository. Then, I have made a small improvement - I&#8217;ve created a short bash script instead.</p></div><div class="listingblock"><div class="title">Listing 3. Deploy script used by e.printstacktrace.blog</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">#!/bin/bash# Initialize target with currently deployed filesgit clone --depth 1 --branch=master https://github.com/wololock/wololock.github.io.git .deploy_gitcd .deploy_git# Remove all files before they get copied from ../public/# so git can track files that were removed in the last commitfind . -path ./.git -prune -o -exec rm -rf {} \; 2&gt; /dev/nullcd ../# Run deploymenthexo cleanhexo deploy</code></pre></div></div><div class="paragraph"><p>This script does exactly what it says in the comments:</p></div><div class="ulist"><ul><li><p>It clones <code>master</code> branch from remote repository to <code>.deploy_git</code> to get existing commits history.</p></li><li><p>Then it removes all non-git objects repository files from <code>.deploy_git</code> so copying files back from <code>public</code> folder will track deleted files.</p></li><li><p>And finally - it executes <code>hexo deploy</code> command that does the regular deployment.</p></li></ul></div><div class="paragraph"><p>And the last but not least, here is what deployment configuration part looks like after introducing deployment bash script:</p></div><div class="listingblock"><div class="title">Listing 4. Current Travis CI deployment configuration</div><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">deploy:  skip_cleanup: true  provider: script  script: sh deploy.sh  on:    branch: develop</code></pre></div></div><div class="paragraph"><p>Thanks to this solution I was able to keep the history of site updates and to track changes of files that were actually modified with the given site update.</p></div><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/github-hexo-history.png"><img src="/images/github-hexo-history.png" alt="github hexo history"></a></div></div></div></div><div class="sect1"><h2>Final words</h2><div class="sectionbody"><div class="paragraph"><p>I hope you find this post useful. It describes solution for Hexo + Travis CI + GitHub use case, but it can solve problems that other similar static site generators may have when running from CI server environment.</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. Documentation: <a href="https://hexo.io/docs/deployment" class="bare" target="_blank" rel="noopener">https://hexo.io/docs/deployment</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="https://github.com/wololock/wololock.github.io/blob/develop/_config.yml#L88-L93" class="bare" target="_blank" rel="noopener">https://github.com/wololock/wololock.github.io/blob/develop/_config.yml#L88-L93</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;I have found &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; a great tool for building a blog and apply many well-known software development principles. One of them is automation. This is why I have decided to integrate this blog with &lt;a href=&quot;https://travis-ci.org/wololock/wololock.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Travis CI&lt;/a&gt; to perform a deployment to GitHub pages. It was a great decision, however a few days later I have noticed one significant issue - deploying a new version of the blog from the CI server caused removing all commits from &lt;code&gt;master&lt;/code&gt; branch and starting with initial commit over and over again. It&amp;nbsp;took me a while to find working solution to this problem. This blog post explains a simple solution to this problem.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="How to" scheme="https://e.printstacktrace.blog/categories/how-to/"/>
    
    
      <category term="hexo" scheme="https://e.printstacktrace.blog/tags/hexo/"/>
    
      <category term="blogging" scheme="https://e.printstacktrace.blog/tags/blogging/"/>
    
      <category term="git" scheme="https://e.printstacktrace.blog/tags/git/"/>
    
      <category term="github" scheme="https://e.printstacktrace.blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>How Groovy&#39;s equal operator differs from Java?</title>
    <link href="https://e.printstacktrace.blog/how-groovy-equal-operator-is-different-from-java/"/>
    <id>https://e.printstacktrace.blog/how-groovy-equal-operator-is-different-from-java/</id>
    <published>2018-09-22T07:53:42.000Z</published>
    <updated>2018-09-29T09:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>One of the first mistakes people do when starting their journey with Java programming language is using <code>==</code> to compare objects instead calling <code>a.equals(b)</code>. When you begin playing around with Groovy you quickly notice that equal operator <code>==</code> is used to compare objects in place of calling <code>a.equals(b)</code>. <em>"Finally something more intuitive!"</em> you might think. In today&#8217;s article we will dig a little bit deeper to learn avoiding problems equal operator in Groovy may produce.</p></div><a id="more"></a><div class="sect1"><h2>Example - <code>Person</code> class</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with fairly simple example. Below you can find a simple domain class <code>Person</code>:</p></div><div class="listingblock"><div class="title">Listing 1. Exemplary immutable domain class in Groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Person {    String name    int age}</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">The <code>@Immutable</code> <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> annotation makes creating immutable classes much easier - it will make the annotated class final, all fields will be final as well, getter methods will be generated + <code>equals</code> and <code>hashCode</code>.</td></tr></table></div><div class="paragraph"><p>In this case <code>equals(o)</code> method gets generated by AST transformation and it simply compares all object properties to decide if they are equal. Let&#8217;s see how it works:</p></div><div class="listingblock"><div class="title">Listing 2. The default equals behavior</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Person {    String name    int age}def john = new Person(name: 'John', age: 32) <i class="conum" data-value="1"></i><b>(1)</b>def mark = new Person(name: 'Mark', age: 32)println john == mark <i class="conum" data-value="2"></i><b>(2)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>We can use named parameters constructor.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Objects are not equal, so it prints <code>false</code> to the console.</td></tr></table></div></div></div><div class="sect1"><h2>Implementing <code>equals(o)</code></h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s implement our own <code>equals(o)</code> method and let&#8217;s make it print some text to the console to make sure this particular method got triggered.</p></div><div class="listingblock"><div class="title">Listing 3. Shadowing default <code>equals(o)</code> with custom implementation</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Person {    String name    int age    @Override    boolean equals(o) { <i class="conum" data-value="1"></i><b>(1)</b>        println "equals(o) triggered"        if (this.is(o)) return true        if (getClass() != o.class) return false        Person person = (Person) o        if (age != person.age) return false        if (name != person.name) return false        return true    }}def john = new Person(name: 'John', age: 32)def mark = new Person(name: 'Mark', age: 32)println john == mark <i class="conum" data-value="2"></i><b>(2)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Some simple <code>equals(o)</code> method generated by IntelliJ IDEA.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>This line still prints <code>false</code> to the console.</td></tr></table></div><div class="paragraph"><p>The only thing that has changed comparing to the previous example is that <code>equals(o) triggered</code> shows in the console when we run this example.</p></div></div></div><div class="sect1"><h2>Implementing <code>Comparable</code> interface</h2><div class="sectionbody"><div class="paragraph"><p>There is one exception from the rule that <code>==</code> maps to the <code>equals(o)</code> method. This exception has something to do with <code>Comparable</code> interface - if class implements it, then <code>==</code> maps to the <code>compareTo(o)</code> method instead<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup>. Let&#8217;s play around with this use case - we will implement <code>compareTo(o)</code> in a way it only takes person&#8217;s age into account.</p></div><div class="listingblock"><div class="title">Listing 4. Implementing <code>Comparable&lt;Person&gt;</code> interface</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Person implements Comparable&lt;Person&gt; {    String name    int age    @Override    boolean equals(o) { <i class="conum" data-value="1"></i><b>(1)</b>        println "equals(o) triggered"        if (this.is(o)) return true        if (getClass() != o.class) return false        Person person = (Person) o        if (age != person.age) return false        if (name != person.name) return false        return true    }    @Override    int compareTo(Person person) { <i class="conum" data-value="1"></i><b>(1)</b>        println "compareTo(person) triggered"        return this.age &lt;=&gt; person?.age    }}def john = new Person(name: 'John', age: 32)def mark = new Person(name: 'Mark', age: 32)println john == mark <i class="conum" data-value="2"></i><b>(2)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>The <code>compareTo(person)</code> method implementation that compares ages only.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Now it prints <code>true</code>, because both persons are the same age.</td></tr></table></div><div class="paragraph"><p>When we run this example we will also see that only <code>compareTo(person) triggered</code></p></div></div></div><div class="sect1"><h2><code>a.is(b)</code> as an equivalent of Java&#8217;s <code>==</code></h2><div class="sectionbody"><div class="paragraph"><p>If you need to compare objects reference you will have to use Groovy&#8217;s <code>a.is(b)</code> method which translates to the same thing that Java&#8217;s <code>==</code> does.</p></div><div class="listingblock"><div class="title">Listing 5. Comparing objects reference with <code>a.is(b)</code> method</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Person {    String name    int age}def john = new Person(name: 'John', age: 32)def mark = new Person(name: 'Mark', age: 32)def johnCopy = johnprintln john.is(mark) <i class="conum" data-value="1"></i><b>(1)</b>println johnCopy.is(john) <i class="conum" data-value="2"></i><b>(2)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Prints <code>false</code>.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Prints <code>true</code>.</td></tr></table></div></div></div><div class="sect1"><h2>Using <code>Comparable</code> between incompatible types</h2><div class="sectionbody"><div class="paragraph"><p>There is one use case when implementing <code>Comparable</code> interface makes equals operator return <code>false</code> for every comparison. It happens if you implement <code>Comparable</code> interface with incompatible type (the type that has nothing to do with the class we implement <code>Comparable</code> for). I know mentioning such use case may sound bizarre to you, however <a href="https://stackoverflow.com/q/50988701/2194470" target="_blank" rel="noopener">there are some people who actually tried doing it</a> and were surprised it didn&#8217;t work as they could expect. It&#8217;s hard to come up with some logical example, but let&#8217;s say we have a class <code>Profession</code> and each <code>Person</code> has a profession - in this case for some reason we want to compare persons with professions and return <code>true</code> if given person has the profession and <code>false</code> otherwise.</p></div><div class="listingblock"><div class="title">Listing 6. Incorrect usage of <code>Comparable</code> interface</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Profession implements Comparable&lt;Profession&gt; {    static Profession DEVELOPER = new Profession(name: 'Software Developer')    String name    @Override    int compareTo(Profession profession) {        return this.name &lt;=&gt; profession.name    }}@Immutableclass Person implements Comparable&lt;Profession&gt; {    String name    int age    Profession profession    @Override    boolean equals(o) {        println "equals(o) triggered"        if (this.is(o)) return true        if (getClass() != o.class) return false        Person person = (Person) o        if (age != person.age) return false        if (name != person.name) return false        if (profession != person.profession) return false        return true    }    @Override    int compareTo(Profession profession) {        println "compareTo(profession) triggered"        return this.profession &lt;=&gt; profession    }}def john = new Person(name: 'John', age: 32, profession: Profession.DEVELOPER)println john == Profession.DEVELOPER <i class="conum" data-value="1"></i><b>(1)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>What do you think - does it print <code>true</code> or <code>false</code>?</td></tr></table></div><div class="paragraph"><p>The above example compiles and runs without any issue. If we implemented it that way and we expect that <code>john == Profession.DEVELOPER</code> evaluates to <code>true</code>, we will be surprised. If we run it we will notice that <code>compareTo(profession) triggered</code> is not printed to the console, neither the <code>equals(o) triggered</code>. What is printed to the console is <code>false</code>. If none of these two methods got triggered, then how does Groovy decided that <code>john</code> is not equal <code>Profession.DEVELOPER</code>?</p></div><div class="paragraph"><p>The answer to this question can be found in understanding how Groovy executes <code>a.compareTo(b)</code> method. If <code>compareTo</code> gets executed between two different types, Groovy uses <a href="https://github.com/apache/groovy/blob/master/src/main/java/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java#L543" target="_blank" rel="noopener"><code>DefaultTypeTransformation.compareTo(left, right)</code></a> method that tries to cast both sides to a common type so it can perform <code>compareTo</code> between them. Otherwise it simply returns <code>-1</code> and that&#8217;s it.</p></div></div></div><div class="sect1"><h2>Special use case: comparing object references</h2><div class="sectionbody"><div class="paragraph"><p>There is one special use case where Groovy <code>==</code> operator behaves exactly the same as Java - it happens when you compare <code>object1 == object1</code>. How is this possible? You have to understand that Groovy translates <code>left == right</code> to something like this:</p></div><div class="listingblock"><div class="title">Listing 7. Java representation of Groovy <code>==</code> operator</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">ScriptBytecodeAdapter.compareEqual(left, right)</code></pre></div></div><div class="paragraph"><p>If we take a quick look at the <a href="https://github.com/apache/groovy/blob/GROOVY_2_4_X/src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java#L685" target="_blank" rel="noopener">source code of this method</a> we will notice that in the first line it does:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">if (left==right) return true;</code></pre></div></div><div class="paragraph"><p>It means that in case of comparing a references to the same object, Groovy does not trigger <code>equals(o)</code> or <code>compareTo(o)</code> methods, but it simply returns <code>true</code>, similarly to what Java does in such case.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">I have provided even more detailed explanation of this use case <a href="https://stackoverflow.com/q/52555849/2194470" target="_blank" rel="noopener">in the following Stack Overflow answer</a>.</td></tr></table></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I hope you have learned something interesting from this article. Let&#8217;s sum it up with the following:</p></div><div class="ulist"><ul><li><p>Use <code>==</code> to compare objects, but be aware what might happen under the hood.</p></li><li><p>You can always call <code>a.equals(b)</code> or <code>a.compareTo(b)</code> directly if you don&#8217;t want to Groovy decide for you which method should be executed.</p></li><li><p>If you want to compare object <code>a</code> with wide variety of different types, implement <code>Comparable&lt;Object&gt;</code> (or simply <code>Comparable</code> with any generic type) and make all casts between types implicit.</p></li><li><p>If you read this article up to this point - thank you very much! Don&#8217;t hesitate to leave a comment and tell others what is your favorite Groovy feature.</p></li></ul></div><div class="paragraph"><p>See you next time.</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. For more information about <code>@Immutable</code> transformation <a href="http://docs.groovy-lang.org/docs/latest/html/documentation/#xform-Immutable" target="_blank" rel="noopener">check Groovy official documentation.</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="http://docs.groovy-lang.org/docs/latest/html/documentation/#_behaviour_of_code_code" class="bare" target="_blank" rel="noopener">http://docs.groovy-lang.org/docs/latest/html/documentation/#_behaviour_of_code_code</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;One of the first mistakes people do when starting their journey with Java programming language is using &lt;code&gt;==&lt;/code&gt; to compare objects instead calling &lt;code&gt;a.equals(b)&lt;/code&gt;. When you begin playing around with Groovy you quickly notice that equal operator &lt;code&gt;==&lt;/code&gt; is used to compare objects in place of calling &lt;code&gt;a.equals(b)&lt;/code&gt;. &lt;em&gt;&quot;Finally something more intuitive!&quot;&lt;/em&gt; you might think. In today&amp;#8217;s article we will dig a little bit deeper to learn avoiding problems equal operator in Groovy may produce.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/programming-tips/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="equals" scheme="https://e.printstacktrace.blog/tags/equals/"/>
    
      <category term="operator" scheme="https://e.printstacktrace.blog/tags/operator/"/>
    
  </entry>
  
  <entry>
    <title>Groovy: static propertyMissing and methodMissing methods - limitations and possible issues</title>
    <link href="https://e.printstacktrace.blog/groovy-static-propertymissing-and-methodmissing-methods-limitations-and-possible-issues/"/>
    <id>https://e.printstacktrace.blog/groovy-static-propertymissing-and-methodmissing-methods-limitations-and-possible-issues/</id>
    <published>2018-09-08T21:22:19.000Z</published>
    <updated>2018-09-08T21:22:19.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Some time ago I have found another interesting <a href="https://stackoverflow.com/q/51921068/2194470" target="_blank" rel="noopener">Groovy related question on Stack Overflow</a>. This time someone was asking about static variants of popular <code>propertyMissing</code> and <code>methodMissing</code> methods. The official Groovy documentation does not explain how to do it - it only explains how to add any static method through <code>metaClass</code>. Today we are going to learn how to define these methods in two different ways.</p></div><a id="more"></a><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>Before we move on - I must admit that I never had to use static <code>methodMissing</code> and <code>propertyMissing</code> method variants in my daily Groovy practice. I use Groovy&#8217;s metaprogramming capability very, very rarely, yet I still prefer more compile-time metaprogramming features to make it as explicit as possible. However, there are some rare cases where doing runtime metaprogramming might make sense and it fits better to the problem we are trying to solve.</p></div><div class="paragraph"><p>Let&#8217;s say we have a very simple domain class <code>Person</code>.</p></div><div class="listingblock"><div class="title">Listing 1. Person domain class</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.EqualsAndHashCodeimport groovy.transform.ToString@ToString@EqualsAndHashCodeclass Person {    final String name    Person(String name) {        this.name = name    }}</code></pre></div></div><div class="paragraph"><p>Now, let&#8217;s say that for some reason we want to instantiate an object not by calling a constructor directly, but by accessing non-existing property which holds person&#8217;s name, for instance:</p></div><div class="listingblock"><div class="title">Listing 2. Creating <code>Person</code> instances through accessing non-existing class properties</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">assert Person.John == new Person('John')assert Person.'Mary Jane' == new Person('Mary Jane')</code></pre></div></div></div></div><div class="sect1"><h2>Adding static <code>propertyMissing</code> through <code>Person.metaClass</code></h2><div class="sectionbody"><div class="paragraph"><p>As you can see we are going to use static variant of <code>propertyMissing</code> method. How to define it? The official <a href="http://groovy-lang.org/metaprogramming.html#_static_methods" target="_blank" rel="noopener">documentation says</a> we can do it similarly to adding an instance method, but with <code>static</code> qualifier added right before the method name. Something like this:</p></div><div class="listingblock"><div class="title">Listing 3. Defining static <code>propertyMissing</code> method for <code>Person</code> class</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.EqualsAndHashCodeimport groovy.transform.ToString@ToString@EqualsAndHashCodeclass Person {    final String name    Person(String name) {        this.name = name    }}Person.metaClass.static.propertyMissing = { String name -&gt; <i class="conum" data-value="1"></i><b>(1)</b>    return new Person(name)}assert Person.John == new Person('John')assert Person.'Mary Jane' == new Person('Mary Jane') <i class="conum" data-value="2"></i><b>(2)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>We define <code>propertyMissing</code> with <code>static</code> qualifier as a closure.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>We can put property name in quotes if it contains e.g. whitespace.</td></tr></table></div><div class="paragraph"><p>Looks like we are done and expression <code>Person.John</code> works as expected. The only thing we may don&#8217;t like is the fact we have to define this method outside the class definition. The first question that comes to mind is - where to put it? I have a single <code>Person</code> class file and I would like to use it whenever this class gets imported.</p></div></div></div><div class="sect1"><h2>Adding static <code>propertyMissing</code> as a class method</h2><div class="sectionbody"><div class="paragraph"><p>Solution to this problem is very simple. The only problem is that you won&#8217;t find it in the official documentation. If we take a look at the source code of <code>groovy.lang.MetaClassImpl</code> class, <a href="https://github.com/apache/groovy/blob/GROOVY_2_5_X/src/main/groovy/groovy/lang/MetaClassImpl.java#L120-L124" target="_blank" rel="noopener">between lines 120 and 124</a> we can find something like this:</p></div><div class="listingblock"><div class="title">Listing 4. A part of <code>groovy.lang.MetaClassImpl</code> source code (lines 120-124)</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">    protected static final String STATIC_METHOD_MISSING = "$static_methodMissing";    protected static final String STATIC_PROPERTY_MISSING = "$static_propertyMissing";    protected static final String METHOD_MISSING = "methodMissing";    protected static final String PROPERTY_MISSING = "propertyMissing";    protected static final String INVOKE_METHOD_METHOD = "invokeMethod";</code></pre></div></div><div class="paragraph"><p>Method <code>$static_propertyMissing</code> sounds like something we are looking for. Let&#8217;s add this method to a <code>Person</code> class and see how it works:</p></div><div class="listingblock"><div class="title">Listing 5. <code>Person</code> class with implemented <code>$static_propertyMissing</code> method</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.EqualsAndHashCodeimport groovy.transform.ToString@ToString@EqualsAndHashCodeclass Person {    final String name    Person(String name) {        this.name = name    }    static def $static_propertyMissing(String name) {        return new Person(name)    }}assert Person.John == new Person('John')assert Person.'Mary Jane' == new Person('Mary Jane')</code></pre></div></div><div class="paragraph"><p>Works like a charm. <code>$static_propertyMissing</code> is a member of <code>Person</code> class and this behavior gets imported with the class.</p></div></div></div><div class="sect1"><h2>Adding static <code>methodMissing</code> variant</h2><div class="sectionbody"><div class="paragraph"><p>I guess you have already figured out how to implement static variant of <code>methodMissing</code> method. The source code reveals that the name of this method is <code>$static_methodMissing</code>. Let&#8217;s see what we can do with it. If you know Grails Framework then you also know <a href="http://gorm.grails.org/" target="_blank" rel="noopener">GORM</a>. For those of you who are not familiar with it - in a simple words, GORM takes advantage of Groovy metaprogramming and it "translates" methods like <code>User.findByNameAndEmail(name, email)</code> to a Hibernate HQL queries. It&#8217;s a total simplification of what GORM is, but it doesn&#8217;t matter at this point. Let&#8217;s try to use <code>$static_methodMissing</code> implemented in <code>Person</code> class to support GORM-like methods:</p></div><div class="ulist"><ul><li><p><code>findByName(name)</code></p></li><li><p><code>findByNameAndAge(name, age)</code></p></li><li><p><code>findByNameOrAge(name, age)</code></p></li></ul></div><div class="paragraph"><p>Without any further ado let&#8217;s take a look at following example:</p></div><div class="listingblock"><div class="title">Listing 6. An example of GORM-like dynamic <code>findByXXX</code> method in <code>Person</code> class</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.EqualsAndHashCodeimport groovy.transform.ToStringimport java.util.concurrent.CopyOnWriteArraySet@ToString@EqualsAndHashCodeclass Person {    private static Set&lt;Person&gt; people = [ <i class="conum" data-value="1"></i><b>(1)</b>        new Person('John', 42)    ] as CopyOnWriteArraySet    final String name    final int age    Person(String name, int age) {        this.name = name        this.age = age    }    static def $static_methodMissing(String name, Object args) {        if (name.startsWith('findBy')) { <i class="conum" data-value="2"></i><b>(2)</b>            final String[] parts =  name.replace('findBy', '')                    .split('(?=\\p{Upper})') <i class="conum" data-value="3"></i><b>(3)</b>                    .collect { it.toLowerCase() } <i class="conum" data-value="4"></i><b>(4)</b>            <i class="conum" data-value="5"></i><b>(5)</b>            final Closure&lt;Boolean&gt; predicate = parts.size() == 1 ? { it.@(parts[0]) == args[0] } :                    parts.size() == 3 ?                            parts[1] == 'and' ?                                    { it.@(parts[0]) == args[0] &amp;&amp; it.@(parts[2]) == args[1] } :                                    parts[1] == 'or' ?                                            { it.@(parts[0]) == args[0] || it.@(parts[2]) == args[1] } :                                            {} : {}            return people.find(predicate) <i class="conum" data-value="6"></i><b>(6)</b>        }        throw new MissingMethodException(name, Person, args)    }}assert Person.findByNameAndAge('John', 21) == nullassert Person.findByNameAndAge('John', 42) == new Person('John', 42)assert Person.findByNameOrAge('Denis', 42) == new Person('John', 42)assert Person.findByName('John') == new Person('John', 42)assert Person.findByName('Denis') == null</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>We use internal <code>Set</code> to store some objects.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>We consider only missing methods that starts with <code>findBy</code> prefix.</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>We split remaining part by uppercase (e.g. <code>['Name', 'And', 'Age']</code>).</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>It&#8217;s time to lowercase <code>['name', 'and', 'age']</code>.</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>Here we create a predicate expressed as a closure (very dirty and verbose way).</td></tr><tr><td><i class="conum" data-value="6"></i><b>6</b></td><td>And finally we call <code>find()</code> method to get the first element that matches predicate.</td></tr></table></div></div></div><div class="sect1"><h2>Limitations</h2><div class="sectionbody"><div class="paragraph"><p>There is one huge limitation if it comes to static variants of <code>propertyMissing</code> and <code>methodMissing</code> methods - you can&#8217;t define both of them in a single class. Not literally. You can still do it, but if you add <code>$static_propertyMissing</code> then your <code>$static_methodMissing</code> stops working and starts throwing exception like:</p></div><div class="listingblock"><div class="title">Listing 7. Exception thrown when both static variants are defined in the class</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Caught: groovy.lang.MissingMethodException: No signature of method: Person.call() is applicable for argument types: (String, Integer) values: [John, 21]Possible solutions: wait(), any(), wait(long, int), collect(), dump(), find()groovy.lang.MissingMethodException: No signature of method: Person.call() is applicable for argument types: (String, Integer) values: [John, 21]Possible solutions: wait(), any(), wait(long, int), collect(), dump(), find()at test.run(test.groovy:70)</code></pre></div></div><div class="paragraph"><p>It happens because the method responsible for invoking static methods <a href="https://github.com/apache/groovy/blob/GROOVY_2_5_X/src/main/groovy/groovy/lang/MetaClassImpl.java#L1477" target="_blank" rel="noopener">calls <code>getProperty()</code></a> just in case caller might actually want to access property and not execute method. This sounds like a bug, because such behavior does not exist for non static variants of these two methods.</p></div><div class="listingblock"><div class="title">Listing 8. Combining <code>$static_propertyMissing</code> and <code>$static_methodMissing</code> causes excpetion</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.EqualsAndHashCodeimport groovy.transform.ToStringimport java.util.concurrent.CopyOnWriteArraySet@ToString@EqualsAndHashCodeclass Person {    private static Set&lt;Person&gt; people = [        new Person('John', 42)    ] as CopyOnWriteArraySet    final String name    final int age    Person(String name, int age) {        this.name = name        this.age = age    }    static def $static_propertyMissing(String name) {        return new Person(name, 0)    }    static def $static_methodMissing(String name, Object args) {        if (name.startsWith('findBy')) {            final String[] parts =  name.replace('findBy', '')                    .split('(?=\\p{Upper})')                    .collect { it.toLowerCase() }            final Closure&lt;Boolean&gt; predicate = parts.size() == 1 ? { it.@(parts[0]) == args[0] } :                    parts.size() == 3 ?                            parts[1] == 'and' ?                                    { it.@(parts[0]) == args[0] &amp;&amp; it.@(parts[2]) == args[1] } :                                    parts[1] == 'or' ?                                            { it.@(parts[0]) == args[0] || it.@(parts[2]) == args[1] } :                                            {} : {}            return people.find(predicate)        }        throw new MissingMethodException(name, Person, args)    }}assert Person.findByNameAndAge('John', 21) == null <i class="conum" data-value="1"></i><b>(1)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>This line throws <code>groovy.lang.MissingMethodException</code></td></tr></table></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Personally, I don&#8217;t use much runtime metaprogramming in my Groovy code. Mostly because it makes reasoning about the program at least a few times harder. But if you want to start playing around and write some DSL with Groovy then you might find runtime metaprogramming an interesting starting point. Happy hacking!</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Some time ago I have found another interesting &lt;a href=&quot;https://stackoverflow.com/q/51921068/2194470&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Groovy related question on Stack Overflow&lt;/a&gt;. This time someone was asking about static variants of popular &lt;code&gt;propertyMissing&lt;/code&gt; and &lt;code&gt;methodMissing&lt;/code&gt; methods. The official Groovy documentation does not explain how to do it - it only explains how to add any static method through &lt;code&gt;metaClass&lt;/code&gt;. Today we are going to learn how to define these methods in two different ways.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/programming-tips/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="metaprogramming" scheme="https://e.printstacktrace.blog/tags/metaprogramming/"/>
    
      <category term="static" scheme="https://e.printstacktrace.blog/tags/static/"/>
    
  </entry>
  
</feed>
