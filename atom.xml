<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>e.printStackTrace(); // Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://e.printstacktrace.blog/"/>
  <updated>2019-03-26T16:50:06.000Z</updated>
  <id>https://e.printstacktrace.blog/</id>
  
  <author>
    <name>Szymon Stepniak</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pragmatic Thinking and Learning - book review</title>
    <link href="https://e.printstacktrace.blog/pragmatic-thinking-and-learning-book-review/"/>
    <id>https://e.printstacktrace.blog/pragmatic-thinking-and-learning-book-review/</id>
    <published>2019-03-26T16:50:06.000Z</published>
    <updated>2019-03-26T16:50:06.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>There are books you read once, and you don&#8217;t plan to read them back again any time soon. However, some books are so influential and valuable that when you decide to study them the second time, you realize that it was the right choice, and you could make this call a few years earlier. Today I would like to show you a book that belongs to this second group â€” no doubts about that.</p></div><a id="more"></a><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">The two links to Amazon.com in the following blog posts are <strong>affiliate links</strong>. If you decide to purchase a book through those links, I will earn a small commission, without affecting the regular price. This way you can support the work I do on this blog. Thanks for your understanding!</td></tr></table></div><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>I bought my paperback copy of <a href="https://amzn.to/2UaLwkT" target="_blank" rel="noopener"><em>"Pragmatic Thinking and Learning"</em></a> book six years ago (March 27th, 2013), and it has blown my mind during the first read. It was written by <a href="https://twitter.com/PragmaticAndy" target="_blank" rel="noopener">Andy Hunt</a> and was published by the <a href="https://pragprog.com/" target="_blank" rel="noopener">Pragmatic Bookshelf</a> in 2008. It introduced me to the entirely new ways of learning, practicing and crafting technical skills, the existence of I was unaware. Like most of the people, I was blindly following unpractical learning techniques we all have learned in the school. I was consuming the content without studying and experiencing it. <em>"Pragmatic Thinking and Learning"</em> has changed me profoundly. I started questioning the traditional learning techniques, and I started benefiting from more pragmatic and practical ways of learning.</p></div><div class="paragraph"><p>It was one of the most influential books I read back in 2013. Six years later, in early 2019, I&#8217;ve decided to study this book again. It&#8217;s funny how many important lessons I have already forgotten. I quickly realized that getting back to this book was one of the best decisions I could make.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/pragmatic-thinking-and-learning-03.jpg"><img src="/images/pragmatic-thinking-and-learning-03.jpg" alt="pragmatic thinking and learning 03"></a></div></div></div></div></div></div><div class="sect1"><h2>What&#8217;s inside?</h2><div class="sectionbody"><div class="paragraph"><p><strong>Chapter one</strong> <em>(Introduction)</em> explains the importance of developing communication, learning and thinking skills. Software developers (and any knowledge workers) have to learn continuously to make good use of their abilities. This chapter also briefly describes the content of all the following chapters. <strong>Chapter two</strong> <em>(Journey from Novice to Expert)</em> uses <em>The Five Dreyfus Model Stages</em> to explain the differences between novices and experts. Those stages are:</p></div><div class="ulist"><ul><li><p><strong>Novice</strong> <em>(a person who requires explicit and context-free recipes to follow)</em></p></li><li><p><strong>Advanced Beginner</strong> <em>(a person who wants to process fast information and is not interested in the bigger picture)</em></p></li><li><p><strong>Competent</strong> <em>(a person who can troubleshoot and start solving problems he/she hasn&#8217;t faced before)</em></p></li><li><p><strong>Proficient</strong> <em>(a person who needs to understand the big picture and can self-correct their previous poor task performance)</em></p></li><li><p><strong>Expert</strong> <em>(a person who works from intuition, not from reason)</em></p></li></ul></div><div class="paragraph"><p>The following sections of this chapter explain how to use this model effectively to success and level-up. It also reveals that the Dreyfus Model applies to all your skills - you can be Novice in some areas, while you are <em>Proficient</em> or <em>Expert</em> in a few others.</p></div><div class="paragraph"><p><strong>Chapter three</strong> <em>(This Is Your Brain)</em> focuses on our central processing unit - the brain. It describes two different processing modes: a linear mode (called <em>L-mode</em>) and non-linear mode (called <em>R-mode</em>, from <em>rich mode</em>). It explains how the brain works, how it memorizes the information, and how it works in the write-only mode all the time (each read is a read-write operation). Learning more about your brain allows you to use it more effectively. Especially the non-linear processing mode is critical in becoming an expert in a specific field. It also provides positive information - our brain is neuroplastic, so we can learn how to rewire it. <em>(An example from page 70 with a blind man blown my mind).</em></p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/pragmatic-thinking-and-learning-02.jpg"><img src="/images/pragmatic-thinking-and-learning-02.jpg" alt="pragmatic thinking and learning 02"></a></div></div></div></div><div class="paragraph"><p><strong>Chapter four</strong> <em>(Get in Your Right Mind)</em> teaches us how to engage a non-linear processing mode to the linear one flow. It gives tons of examples and exercises on how to take advantage of the <em>R-mode</em> and how to harvest from it even more. <strong>Chapter five</strong> <em>(Debug Your Mind)</em> starts with explaining a bunch of cognitive biases that affect our perception and decision making. Some of them are influenced by the generation we have born in, or by our personality tendencies. They are also affected by so-called <em>"lizard logic"</em> - the primitive reactions that were very useful 50,000 years ago. The chapter ends with a few ideas and guidance on how to turn on the debug mode to understand better the source of our reactions to prevent (or at least limit) the destructive ones.</p></div><div class="paragraph"><p><strong>Chapter six</strong> <em>(Learn Deliberately)</em> introduces a <strong>Pragmatic Investment Plan</strong> - an approach that helps to learn more effectively. It explains various learning techniques and helps to find ones that work best in our case. It describes the <strong>SQ3R</strong> reading technique, mind mapping visualizing method<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>, or <em>"Learn By Teaching"</em> approach, to name a few.</p></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content"><em>"Teaching clarifies your understanding and reveals many of your underlying assumptions."</em></td></tr></table></div><div class="paragraph"><p><strong>Chapter seven</strong> <em>(Gain Experience)</em> explains how important it is to explore <em>("play with")</em> the learning material before studying the facts. This exploration and experience are essential to building mental models in our brain. Those models make the learning process more effective. <strong>Chapter eight</strong> <em>(Manage Focus)</em> gives several practical advice on how to increase the level of attention, manage our knowledge portfolio, and optimize the process of loading information in the current context. It covers some tips and tricks that help to stay in the "zone". <strong>The final chapter</strong> <em>(Beyond Expertise)</em> summarizes the book and recommends to <em>start with a plan</em>, <em>accept errors</em> (inaction is the real enemy), <em>recognize that developing new habits take time</em>, <em>believe in own capabilities</em>, <em>and always take small next steps.</em></p></div></div></div><div class="sect1"><h2>What are my main takeaways from this book?</h2><div class="sectionbody"><div class="paragraph"><p>I enjoyed reading <em>"Pragmatic Thinking and Learning"</em>, but apart from that it encouraged me to do the following things:</p></div><div class="ulist"><ul><li><p>I started using the <strong>SQ3R</strong> books studying technique <em>(survey, question, read, recite, review)</em> to all books I read. I already used a few other books studying techniques, but the SQ3R sounds like an approach that makes the learning process more effective.</p></li><li><p>I created my <strong>Pragmatic Investment Plan</strong> in the three key areas for my professional career. I started by <em>"reverse-engineering"</em> myself and applying the Dreyfus Model stages to several skills I want to work out. I created a concrete plan using <em>S.M.A.R.T.</em> objectives. I also researched and experimented with different ways of absorbing the knowledge and crafting experience to progress.</p></li><li><p>I decided to give the <strong>mind mapping</strong> a try. A few years ago I tried it, but I failed. This time I want to use hand-drawn mind maps with the one crucial thing in mind - <strong>the documenting</strong> is more important than documentation.</p></li><li><p>According to the minimal user interface rule I removed a few distractions from my work environment. <em>(I already practice "no notifications" principles for a couple of years).</em></p></li><li><p>I started exploring and playing around with the new things before getting deep into the details and facts.</p></li></ul></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/pragmatic-thinking-and-learning-04.jpg"><img src="/images/pragmatic-thinking-and-learning-04.jpg" alt="pragmatic thinking and learning 04"></a></div></div></div></div></div></div><div class="sect1"><h2>You may ask yourself - should I read it?</h2><div class="sectionbody"><div class="paragraph"><p>It depends. If you have already read a few positions from the bibliography, you might not benefit much from reading the book, because you already know the things it covers. However, if you find yourself in a position where you feel stuck in the learning progression, and a portion of practical advises could give you a real shot of motivation, this book is definitely for you. When I started studying this book for the second time, I felt like I need some <em>"code review"</em> of methods and techniques I use for learning and becoming a more experienced programmer. This book offered me the guidance I needed most at the moment.</p></div><div class="paragraph"><p>I hope you enjoyed reading this blog post and you have found valuable information in it. Don&#8217;t hesitate to leave a comment below if you have any question related to the book. I tried to express my feelings and opinions about it most accurately, but I accept that I might miss something important. Let me know, and I will do my best to help you find the answers you are looking for. Or maybe you have also read the <a href="https://amzn.to/2UaLwkT" target="_blank" rel="noopener"><em>"Pragmatic Thinking and Learning"</em></a> book and you have a different opinion? Please share it with us. I&#8217;d love to hear it from you.</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://en.wikipedia.org/wiki/Mind_map" class="bare" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Mind_map</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;There are books you read once, and you don&amp;#8217;t plan to read them back again any time soon. However, some books are so influential and valuable that when you decide to study them the second time, you realize that it was the right choice, and you could make this call a few years earlier. Today I would like to show you a book that belongs to this second group â€” no doubts about that.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programmer&#39;s Bookshelf" scheme="https://e.printstacktrace.blog/categories/programmer-s-bookshelf/"/>
    
    
      <category term="learning" scheme="https://e.printstacktrace.blog/tags/learning/"/>
    
      <category term="book" scheme="https://e.printstacktrace.blog/tags/book/"/>
    
      <category term="review" scheme="https://e.printstacktrace.blog/tags/review/"/>
    
      <category term="reading" scheme="https://e.printstacktrace.blog/tags/reading/"/>
    
      <category term="pragmatic" scheme="https://e.printstacktrace.blog/tags/pragmatic/"/>
    
      <category term="mind-mapping" scheme="https://e.printstacktrace.blog/tags/mind-mapping/"/>
    
      <category term="brain" scheme="https://e.printstacktrace.blog/tags/brain/"/>
    
  </entry>
  
  <entry>
    <title>Installing GraalVM EE 1.0.0-RC14 with SDKMAN!</title>
    <link href="https://e.printstacktrace.blog/installing-graalvm-ee-1-0-0-rc14-with-sdkman/"/>
    <id>https://e.printstacktrace.blog/installing-graalvm-ee-1-0-0-rc14-with-sdkman/</id>
    <published>2019-03-20T09:15:56.000Z</published>
    <updated>2019-03-20T09:15:56.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>I love <a href="https://sdkman.io/" target="_blank" rel="noopener"><strong><em>SDKMAN!</em></strong></a>. It made using multiple different Java distributions in a single operating system much more comfortable. You can install Java across different versions (from 6 to 13.EA) and different vendors (OpenJDK, Oracle, Zulu, Corretto or GraalVM CE to name a few). Switching between those versions is as simple as executing a single <code>sdk use java {version}</code> command and you are ready to use whatever Java you want. However, not all Java versions are available by default, but luckily, <em>SDKMAN!</em> has a simple solution to this problem.</p></div><a id="more"></a><div class="sect1"><h2>Installing GraalVM EE 1.0.0-RC14</h2><div class="sectionbody"><div class="paragraph"><p>I run some experiments with <a href="https://www.graalvm.org/" target="_blank" rel="noopener">GraalVM</a> and the only version I can install directly with <em>SDKMAN!</em> is GraalVM Community Edition. However, there is also GraalVM Enterprise Edition which provides some additional features, like improved performance. The main reason GraalVM EE is not available in <em>SDKMAN!</em> is that it is distributed over OTN (Oracle Technology Network) only, so you need to accept OTN license agreement<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> and log in to start the file download. OK, so I downloaded <strong>graalvm-ee-1.0.0-rc14-linux-amd64.tar.gz</strong> file successfully. What&#8217;s next?</p></div><div class="paragraph"><p>Let&#8217;s start with the extracting files from the downloaded archive.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ tar -xvf graalvm-ee-1.0.0-rc14-linux-amd64.tar.gz</code></pre></div></div><div class="paragraph"><p>After extracting all files, we can install local Java distribution with the following command.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ sdk install java graal-ee-rc14 /path/to/graalvm-ee-1.0.0-rc14</code></pre></div></div><div class="paragraph"><p>In the above example, <strong>graal-ee-rc14</strong> is a version used by <em>SDKMAN!</em> we want to associate with the Java installation located in <strong>/path/to/graalvm-ee-1.0.0-rc14</strong>.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><em>SDKMAN!</em> limits version to 15 characters.</td></tr></table></div><div class="paragraph"><p>When you execute <code>sdk list java</code> command, you will see local GraalVM EE added to SDKMAN&#8217;s Java distributions list.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ sdk list java================================================================================Available Java Versions================================================================================   + graal-ee-rc14     * 8.0.202-amzn     13.ea.11-open       8.0.202.j9-adpt     12.0.0-open         8.0.202.hs-adpt     11.0.2-sapmchn      8.0.202-zulufx     11.0.2-zulu     &gt; * 8.0.201-oracle   * 11.0.2-open         7.0.211-zulu     11.0.2-amzn         6.0.119-zulu     11.0.2.j9-adpt    * 1.0.0-rc-14-grl     11.0.2.hs-adpt    * 1.0.0-rc-13-grl     11.0.2-zulufx       1.0.0-rc-12-grl     10.0.2-zulu         1.0.0-rc-11-grl     10.0.2-open         1.0.0-rc-10-grl     9.0.7-zulu          1.0.0-rc-9-grl     9.0.4-open          1.0.0-rc-8-grl   * 8.0.202-zulu================================================================================+ - local version* - installed&gt; - currently in use================================================================================</code></pre></div></div><div class="paragraph"><p>The last thing to do to use GraalVM EE is to switch to a proper Java version, and you are ready to go.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ sdk use java graal-ee-rc14Using java version graal-ee-rc14 in this shell.$ java -versionjava version "1.8.0_202"Java(TM) SE Runtime Environment (build 1.8.0_202-b08)Java HotSpot(TM) GraalVM EE 1.0.0-rc14 (build 25.202-b08-jvmci-0.56, mixed mode)</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">If you don&#8217;t know where to keep extracted GraalVM EE sources, there is one workaround that allows keeping all Java distributions together. Instead of extracting <em>graalvm-ee-1.0.0-rc14-linux-amd64.tar.gz</em> at some random location, extract it directly to <code>~/.sdkman/candidates/java/graal-ee-rc14</code> directory. After doing so, you don&#8217;t have to execute <code>sdk install java &#8230;&#8203;</code> command, because your GraalVM EE is already available on <code>sdk list java</code> distributions list.</td></tr></table></div><script id="asciicast-235036" src="https://asciinema.org/a/235036.js" async></script></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I hope you have learned something useful from this short blog post. <em>SDKMAN!</em> is a powerful tool that makes developer&#8217;s life easier. I use it to manage in a convenient way all my Java, Groovy, or Gradle installations. If you haven&#8217;t used it so far, I strongly recommend giving <em>SDKMAN!</em> a chance.</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://www.oracle.com/technetwork/licenses/early-adopter-license-2299792.html" class="bare" target="_blank" rel="noopener">https://www.oracle.com/technetwork/licenses/early-adopter-license-2299792.html</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;I love &lt;a href=&quot;https://sdkman.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;&lt;em&gt;SDKMAN!&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;. It made using multiple different Java distributions in a single operating system much more comfortable. You can install Java across different versions (from 6 to 13.EA) and different vendors (OpenJDK, Oracle, Zulu, Corretto or GraalVM CE to name a few). Switching between those versions is as simple as executing a single &lt;code&gt;sdk use java {version}&lt;/code&gt; command and you are ready to use whatever Java you want. However, not all Java versions are available by default, but luckily, &lt;em&gt;SDKMAN!&lt;/em&gt; has a simple solution to this problem.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="How to" scheme="https://e.printstacktrace.blog/categories/how-to/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="graalvm" scheme="https://e.printstacktrace.blog/tags/graalvm/"/>
    
      <category term="graalvm-ee" scheme="https://e.printstacktrace.blog/tags/graalvm-ee/"/>
    
      <category term="sdkman" scheme="https://e.printstacktrace.blog/tags/sdkman/"/>
    
  </entry>
  
  <entry>
    <title>Groovy regular expressions - the definitive guide</title>
    <link href="https://e.printstacktrace.blog/groovy-regular-expressions-the-definitive-guide/"/>
    <id>https://e.printstacktrace.blog/groovy-regular-expressions-the-definitive-guide/</id>
    <published>2019-03-18T11:46:39.000Z</published>
    <updated>2019-03-18T11:46:39.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>I&#8217;ve never enjoyed working with regular expressions in Java. It was always very error-prone. You had to remember to escape backslashes, and a very simple <em>match elements</em> check required writing at least 5 lines of code. Booooring. However, Groovy solved most of these issues, and today we are going to take a closer look at features like <em>pattern operator</em>, <em>find operator</em> or <em>exact match operator</em>. We will focus on learning the new syntax, as well as measuring and comparing its performance. Let&#8217;s begin!</p></div><a id="more"></a><div class="sect1"><h2>The <em>pattern</em> operator (<code>~string</code>)</h2><div class="sectionbody"><div class="paragraph"><p>Groovy makes initializing <code>java.util.regex.Pattern</code> class simple thanks to <em>pattern operator</em>. It means that you can <em>glue</em> <code>~</code> in front of the string literal (for instance <code>~"([Gg])roovy"</code> or <code>~/([Gg])roovy/</code>) and it will produce an object of type <code>java.util.regex.Pattern</code> instead of <code>java.lang.String</code> (or <code>groovy.lang.GString</code>).</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import java.util.regex.Patterndef pattern = ~/([Gg])roovy/assert pattern.class == Pattern</code></pre></div></div><div class="paragraph"><p>You can think of this operator as an equivalent of a good old <code>Pattern.compile(str)</code> method call.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import java.util.regex.Patterndef pattern = Pattern.compile(/([Gg])roovy/)assert pattern.class == Pattern</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><div class="paragraph"><p>The <em>slashy</em> form of a Groovy string has a huge advantage over double (or single) quoted string - you don&#8217;t have to escape backslashes.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">assert /Version \d+\.\d+\.\d+/ == 'Version \\d+\\.\\d+\\.\\d+'</code></pre></div></div></td></tr></table></div></div></div><div class="sect1"><h2>The <em>find</em> operator (<code>=~</code>)</h2><div class="sectionbody"><div class="paragraph"><p>When we have <code>java.util.regex.Pattern</code> object created, the next step is to create an instance of <code>java.util.regex.Matcher</code> class. Groovy offers so called <em>find operator</em> <code>=~</code> which simplifies this operation to something like this: <code>text =~ pattern</code>.</p></div><div class="paragraph"><p>Let&#8217;s consider the example that matches all words that end with <code>-er</code>.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def matcher = "My code is groovier and better when I use Groovy there" =~ /\S+er\b/ <i class="conum" data-value="1"></i><b>(1)</b>assert matcher.find() <i class="conum" data-value="2"></i><b>(2)</b>assert matcher.size() == 2 <i class="conum" data-value="3"></i><b>(3)</b>assert matcher[0..-1] == ["groovier", "better"] <i class="conum" data-value="4"></i><b>(4)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>matches the text with the pattern (the pattern can be represented as <code>java.util.regex.Pattern</code> or <code>java.lang.String</code>)</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>checks if <strong>any</strong> element matches the pattern <code>/\S+er\b/</code></td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>returns a number of matching elements</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>returns a list of all matching elements</td></tr></table></div><div class="paragraph"><p>Matcher object can be also used in the context of the <em>boolean expression</em> (for instance, as an if-statement condition expression). In this case Groovy invokes <code>matcher.find()</code> implicitly.</p></div><div class="listingblock"><div class="title">Listing 1. Using matcher in context of <em>boolean</em> expression</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">if ("My code is groovier and better when I use Groovy there" =~ /\S+er\b/) {    println "At least one element matches the pattern"}</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Remember that: when <code>java.util.regex.Matcher</code> is used in the <em>boolean expression</em> context, it verifies if <strong>any element matches the pattern</strong>.</td></tr></table></div><div class="paragraph"><p>Groovy also allows us to use multiple assignment from <em>find</em> operator to variables. We could rewrite the previous example to something even more elegant.</p></div><div class="listingblock"><div class="title">Listing 2. Using multiple assignment with <em>find</em> operator</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def (first,second) = "My code is groovier and better when I use Groovy there" =~ /\S+er\b/assert first == "groovier"assert second == "better"</code></pre></div></div><div class="paragraph"><p>However, there is one limitation we have to be aware of. If we try to assign more variables then the number of matching elements, we will get <code>java.lang.IndexOutOfBoundsException</code>. For instance, if we change our code so it expects three matching elements instead of two, we will get:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">java.lang.IndexOutOfBoundsException: index is out of range -2..1 (index = 2)</code></pre></div></div></div></div><div class="sect1"><h2>The <em>exact match</em> operator (<code>==~</code>)</h2><div class="sectionbody"><div class="paragraph"><p>Groovy also offers the <em>exact match</em> operator <code>==~</code>. It does not return <code>java.util.regex.Matcher</code>, but a <code>boolean</code> value instead. You can think of it as an alias to <code>java.util.regex.Matcher.matches()</code> method that checks if <strong>the entire text matches the pattern</strong>. If we use the pattern and the text from the previous example, we can expect that <code>==~</code> returns <code>false</code> in this case.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">assert !("My code is groovier and better when I use Groovy there" ==~ /\S+er\b/)</code></pre></div></div><div class="paragraph"><p>However, if we change the pattern to the one that checks if the text starts with <em>"My code "</em> and ends with <em>" there"</em>, then we can match the entire text with the pattern.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">assert "My code is groovier and better when I use Groovy there" ==~ /^My code .* there$/</code></pre></div></div></div></div><div class="sect1"><h2>Using matcher as a <code>switch</code> case</h2><div class="sectionbody"><div class="paragraph"><p>Groovy allows you to use <code>java.util.regex.Matcher</code> as a case in the <code>switch</code> statement. Consider the following example.</p></div><div class="listingblock"><div class="title">Listing 3. Using matcher object as a switch case</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def input = "test"switch (input) {    case ~/\d{3}/:        println "The number has 3 digits"        break    case ~/\w{4}/:        println "The word has 4 letters"        break    default:        println "Unrecognized..."}</code></pre></div></div><div class="paragraph"><p>In this case the program will print <code>The word has 4 letters</code> to the console.</p></div></div></div><div class="sect1"><h2>Replacing matching elements</h2><div class="sectionbody"><div class="paragraph"><p>We can do even more with regular expressions. Groovy enhances <code>java.lang.String</code> class with the methods like:</p></div><div class="ulist"><ul><li><p><code>String.replaceFirst(Pattern pattern, Closure closure)</code></p></li><li><p><code>String.replaceAll(Pattern pattern, Closure closure)</code></p></li></ul></div><div class="paragraph"><p>What is so interesting in those methods? Both accept a closure as a second parameter, and a closure combined with multiple assignment can be very powerful in this case. Let&#8217;s consider the following use case. Let&#8217;s say we want to implement a function that takes a string that represents a version literal like <code>v3.4.23</code>, and we want to <em>"bump"</em> the minor part so the next generated version is <code>v3.5.0</code>.</p></div><div class="paragraph"><p>We could do it in a single line, but let&#8217;s use four lines for the better readability.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def version = "v3.4.23"def pattern = ~/^v(\d{1,3})\.(\d{1,3})\.\d{1,4}$/def newVersion = version.replaceFirst(pattern) { _,major,minor -&gt; "v${major}.${(minor as int) + 1}.0"}assert newVersion == "v3.5.0"</code></pre></div></div></div></div><div class="sect1"><h2>Performance</h2><div class="sectionbody"><div class="paragraph"><p>I think the most of us agree that Groovy syntax for handling regular expressions operations is much cleaner and more concise. We can express complex expectations using more declarative and accurate syntax. However, what is the performance cost? Let&#8217;s not speculate, but let&#8217;s measure it instead. We will use JMH and we will measure the performance of the dynamically as well as statically compiled Groovy code. All measurements use <a href="https://en.wikipedia.org/wiki/Microsecond" target="_blank" rel="noopener">microsecond</a> unit of time.</p></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content"><strong>1 Î¼s</strong> is equal to <strong>0.001 ms</strong> (millisecond) and <strong>0.000001 s</strong> (second).</td></tr></table></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><div class="paragraph"><p>All benchmark tests used in this blog post can be found in the <a href="https://github.com/wololock/groovy-regexp-examples" target="_blank" rel="noopener">following Github repository</a>.</p></div><div class="paragraph"><p>You can run benchmarks on your own computer with the following command:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ ./gradlew jmh</code></pre></div></div><div class="paragraph"><p>I run all benchmark tests on a Lenovo ThinkPad T440p laptop with <strong>Intel&#174; Core&#8482; i7-4900MQ CPU @ 2.80GHz</strong> and <strong>16 GBs RAM</strong>. I used <strong>JDK 1.8.0_201</strong> <em>(Java HotSpot&#8482; 64-Bit Server VM, 25.201-b09)</em>.</p></div><div class="paragraph"><p>Below you can find JMH settings used for each benchmark test case:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text"># JMH version: 1.21# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09# VM invoker: /home/wololock/.sdkman/candidates/java/8.0.201-oracle/jre/bin/java# VM options: &lt;none&gt;# Warmup: 1 iterations, 23 s each# Measurement: 42 iterations, 1 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Average time, time/op</code></pre></div></div></td></tr></table></div><div class="sect2"><h3>Pattern operator - 0.22875 Î¼s (avg)</h3><div class="paragraph"><p><a href="https://github.com/wololock/groovy-regexp-examples/blob/master/src/jmh/groovy/bench/A1_Create_Pattern_Bench.groovy" target="_blank" rel="noopener">In this test</a> we measure a performance of creating <code>java.util.regex.Pattern</code> object using <em>pattern operator</em> and we compare it to the <code>Pattern.compile(str)</code> method.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def pattern1 = ~"([Gg])roovy"// versusdef pattern2 = Pattern.compile("([Gg])roovy")</code></pre></div></div><div class="paragraph"><p>Here are the results for <strong>Groovy 2.5.6</strong>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">A1_Create_Pattern_Bench.pattern_compile_dynamic             avgt   42    0,233 Â±  0,001  us/opA1_Create_Pattern_Bench.pattern_compile_static              avgt   42    0,225 Â±  0,001  us/opA1_Create_Pattern_Bench.pattern_operator_dynamic            avgt   42    0,229 Â±  0,001  us/opA1_Create_Pattern_Bench.pattern_operator_sstatic            avgt   42    0,228 Â±  0,001  us/op</code></pre></div></div><div class="paragraph"><p>And here are the results for <strong>Groovy 3.0.0-alpha-4</strong>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">A1_Create_Pattern_Bench.pattern_compile_dynamic             avgt   42    0,232 Â±  0,001  us/opA1_Create_Pattern_Bench.pattern_compile_static              avgt   42    0,227 Â±  0,001  us/opA1_Create_Pattern_Bench.pattern_operator_dynamic            avgt   42    0,229 Â±  0,001  us/opA1_Create_Pattern_Bench.pattern_operator_sstatic            avgt   42    0,224 Â±  0,001  us/op</code></pre></div></div><div class="paragraph"><p>Here are results as graph:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-regexp-jmh-pattern-operatror.png"><img src="/images/groovy-regexp-jmh-pattern-operatror.png" alt="groovy regexp jmh pattern operatror"></a></div></div></div></div><div class="paragraph"><p>Conclusion - there is no difference if we use <em>pattern operator</em> or if we call <code>Pattern.compile(str)</code> method explicitly. Switching from dynamic to static compilation does not introduce a huge difference.</p></div></div><div class="sect2"><h3>Find operator (short string) - 5.11275 Î¼s (avg)</h3><div class="paragraph"><p><a href="https://github.com/wololock/groovy-regexp-examples/blob/master/src/jmh/groovy/bench/A2_Create_Matcher_Bench.groovy" target="_blank" rel="noopener">In the next test</a> we measure a performance of using a <em>find operator</em> and retrieving all matching elements. We use pretty simple regular expression - we want to match all words that end with <code>-er</code>. To give you a better sense of the performance, we also compare results with an alternative approach that does not use regular expressions. The pattern in this test is precompiled, so we focus only on creating a <code>java.util.regex.Matcher</code> object and using it to find matching elements.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def text = "My code is groovier and better when I use Groovy there" <i class="conum" data-value="1"></i><b>(1)</b>def matcher = text =~ pattern <i class="conum" data-value="2"></i><b>(2)</b>assert matcher.class.equals(Matcher)assert matcher[0..-1].equals(['groovier', 'better']) <i class="conum" data-value="3"></i><b>(3)</b>//versusdef matcher1 = pattern.matcher(text) <i class="conum" data-value="4"></i><b>(4)</b>assert matcher1.class.equals(Matcher)assert matcher1[0..-1].equals(['groovier', 'better'])//versusdef result = shortText.tokenize().findAll { it.endsWith("er") } <i class="conum" data-value="5"></i><b>(5)</b>assert result.equals(['groovier', 'better'])</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>input string (short one)</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>matcher created using the <em>find operator</em></td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>retrieving all matching elements</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>matcher created using the <code>Pattern.matcher(str)</code> method call</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>an alternative approach that does not use regular expressions</td></tr></table></div><div class="paragraph"><p>Results for <strong>Groovy 2.5.6</strong>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">A2_Create_Matcher_Bench.short_text_find_operator_dynamic    avgt   42    4,761 Â±  0,008  us/opA2_Create_Matcher_Bench.short_text_find_operator_static     avgt   42    5,264 Â±  0,006  us/opA2_Create_Matcher_Bench.short_text_pattern_matches_dynamic  avgt   42    5,168 Â±  0,006  us/opA2_Create_Matcher_Bench.short_text_pattern_matches_static   avgt   42    5,258 Â±  0,007  us/opA2_Create_Matcher_Bench.short_text_tokenize_dynamic         avgt   42    1,066 Â±  0,002  us/opA2_Create_Matcher_Bench.short_text_tokenize_static          avgt   42    0,963 Â±  0,001  us/op</code></pre></div></div><div class="paragraph"><p>Results for <strong>Groovy 3.0.0-alpha-4</strong>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">A2_Create_Matcher_Bench.short_text_find_operator_dynamic    avgt   42    5,548 Â±  0,005  us/opA2_Create_Matcher_Bench.short_text_find_operator_static     avgt   42    4,652 Â±  0,003  us/opA2_Create_Matcher_Bench.short_text_pattern_matches_dynamic  avgt   42    5,240 Â±  0,005  us/opA2_Create_Matcher_Bench.short_text_pattern_matches_static   avgt   42    4,804 Â±  0,006  us/opA2_Create_Matcher_Bench.short_text_tokenize_dynamic         avgt   42    1,082 Â±  0,001  us/opA2_Create_Matcher_Bench.short_text_tokenize_static          avgt   42    0,964 Â±  0,001  us/op</code></pre></div></div><div class="paragraph"><p>Here is the graph:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-regexp-jmh-find-operatror.png"><img src="/images/groovy-regexp-jmh-find-operatror.png" alt="groovy regexp jmh find operatror"></a></div></div></div></div><div class="paragraph"><p>Conclusions:</p></div><div class="ulist"><ul><li><p>Using <code>tokenize</code> + <code>findAll</code> + <code>str.endsWith("er")</code> <strong>is the fastest way</strong> to find all matching elements.</p></li><li><p>Groovy 2.5.6 performs <strong>0.787 Î¼s faster</strong> than Groovy 3.0.0-alpha-4 in case of using <em>find operator</em> without static compilation.</p></li><li><p>Static compilation made the <em>find operator</em> and <code>pattern.matches(str)</code> calls a little bit slower in Groovy 2.5.6.</p></li></ul></div><div class="paragraph"><p>It is also worth mentioning that the difference between the fastest and the slowest matcher usage is less than 1 Î¼s.</p></div></div><div class="sect2"><h3>Find operator (longer text) - 291.23525 Î¼s (avg)</h3><div class="paragraph"><p>Let&#8217;s use the <em>find operator</em> with a different context. Instead of testing its performance using pretty short text, let&#8217;s use a <a href="https://github.com/wololock/groovy-regexp-examples/blob/master/src/jmh/groovy/bench/A2_Create_Matcher_Bench.groovy#L18-L39" target="_blank" rel="noopener">longer one instead</a> (2232 characters long). We test the same use cases as before, only the input string changes. Here are the results.</p></div><div class="paragraph"><p>Results for <strong>Groovy 2.5.6</strong>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">A2_Create_Matcher_Bench.long_text_find_operator_dynamic     avgt   42  283,605 Â±  0,322  us/opA2_Create_Matcher_Bench.long_text_find_operator_static      avgt   42  271,025 Â±  0,202  us/opA2_Create_Matcher_Bench.long_text_pattern_matches_dynamic   avgt   42  273,443 Â±  0,254  us/opA2_Create_Matcher_Bench.long_text_pattern_matches_static    avgt   42  336,868 Â±  0,458  us/opA2_Create_Matcher_Bench.long_text_tokenize_dynamic          avgt   42   22,775 Â±  0,058  us/opA2_Create_Matcher_Bench.long_text_tokenize_static           avgt   42   20,497 Â±  0,207  us/op</code></pre></div></div><div class="paragraph"><p>Results for <strong>Groovy 3.0.0-alpha-4</strong>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">A2_Create_Matcher_Bench.long_text_find_operator_dynamic     avgt   42  271,472 Â±  0,429  us/opA2_Create_Matcher_Bench.long_text_find_operator_static      avgt   42  300,051 Â±  0,339  us/opA2_Create_Matcher_Bench.long_text_pattern_matches_dynamic   avgt   42  259,320 Â±  0,283  us/opA2_Create_Matcher_Bench.long_text_pattern_matches_static    avgt   42  348,165 Â±  0,562  us/opA2_Create_Matcher_Bench.long_text_tokenize_dynamic          avgt   42   22,807 Â±  0,041  us/opA2_Create_Matcher_Bench.long_text_tokenize_static           avgt   42   20,460 Â±  0,035  us/op</code></pre></div></div><div class="paragraph"><p>Here is the graph:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-regexp-jmh-find-operatror-long.png"><img src="/images/groovy-regexp-jmh-find-operatror-long.png" alt="groovy regexp jmh find operatror long"></a></div></div></div></div><div class="paragraph"><p>Conclusions:</p></div><div class="ulist"><ul><li><p>Non-regexp solution is still <strong>the fastest</strong>. <em>(The difference is even more significant in this case).</em></p></li><li><p><code>pattern.matches(str)</code> and matching elements retrieval <strong>performs much better</strong> in non-static compilation in both, Groovy 2.5.6 and Groovy 3.0.0-alpha-4.</p></li><li><p>Groovy 2.5.6 does <strong>a little bit better</strong> than Groovy 3.0.0-alpha-4 in the static <em>find operator</em> use case.</p></li></ul></div></div><div class="sect2"><h3>Match operator - 0.17125 Î¼s (avg)</h3><div class="paragraph"><p><a href="https://github.com/wololock/groovy-regexp-examples/blob/master/src/jmh/groovy/bench/A3_Match_Operator_Bench.groovy" target="_blank" rel="noopener">In the next test</a> we want to measure a performance of the <em>exact match</em> operator. We will use it in a pretty common use case - we have a pattern that matches pretty short strings containing some digits and uppercase letters. Pattern is precompiled, so we measure only a performance of <code>==~</code> operator compared to <code>matcher.matches()</code>. Here is what the test looks like:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def input = "1605-FACD-0000-EXIT"def pattern = ~/^\d{4}-[A-Z]{4}-0000-EXIT$/ <i class="conum" data-value="1"></i><b>(1)</b>assert input ==~ pattern <i class="conum" data-value="2"></i><b>(2)</b>// versusassert pattern.matcher(input).matches() <i class="conum" data-value="3"></i><b>(3)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>simple regexp for matching short string in a specific format</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td><em>exact match</em> operator use case</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>regular <code>matcher.matches()</code> use case</td></tr></table></div><div class="paragraph"><p>Results for <strong>Groovy 2.5.6</strong>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">A3_Match_Operator_Bench.match_operator_dynamic              avgt   42    0,211 Â±  0,001  us/opA3_Match_Operator_Bench.match_operator_static               avgt   42    0,213 Â±  0,001  us/opA3_Match_Operator_Bench.matcher_matches_dynamic             avgt   42    0,138 Â±  0,001  us/opA3_Match_Operator_Bench.matcher_matches_static              avgt   42    0,123 Â±  0,001  us/op</code></pre></div></div><div class="paragraph"><p>Results for <strong>Groovy 3.0.0-alpha-4</strong>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">A3_Match_Operator_Bench.match_operator_dynamic              avgt   42    0,211 Â±  0,001  us/opA3_Match_Operator_Bench.match_operator_static               avgt   42    0,214 Â±  0,001  us/opA3_Match_Operator_Bench.matcher_matches_dynamic             avgt   42    0,136 Â±  0,001  us/opA3_Match_Operator_Bench.matcher_matches_static              avgt   42    0,126 Â±  0,001  us/op</code></pre></div></div><div class="paragraph"><p>Here is the graph:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-regexp-jmh-match-operatror.png"><img src="/images/groovy-regexp-jmh-match-operatror.png" alt="groovy regexp jmh match operatror"></a></div></div></div></div><div class="paragraph"><p>Conclusions:</p></div><div class="ulist"><ul><li><p>The <em>exact match</em> operator is <strong>~0.1 Î¼s</strong> slower than <code>matcher.matches()</code>.</p></li><li><p>There is literally <strong>no difference</strong> between dynamic or static compilation in both cases.</p></li></ul></div></div><div class="sect2"><h3>Bonus: <code>String.replaceFirst(regexp)</code> - 0.81325 Î¼s (avg)</h3><div class="paragraph"><p><a href="https://github.com/wololock/groovy-regexp-examples/blob/master/src/jmh/groovy/bench/A4_Regexp_Replace_Bench.groovy" target="_blank" rel="noopener">In the last test</a> let&#8217;s measure a performance of Groovy&#8217;s <code>String.replaceFirst(regexp,closure)</code> method. The one that makes replacing parts of the text much easier. We will compare the performance of this method with the good old imperative style of achieving the same goal. Here is the script we are going to benchmark:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def version = "v3.4.23"def expected = "v3.5.0"def pattern = ~/^v(\d{1,3})\.(\d{1,3})\.\d{1,4}$/def newVersion = version.replaceFirst(pattern) { _,major,minor -&gt; "v${major}.${(minor as int) + 1}.0"}assert newVersion.equals(expected)//versusdef matcher = pattern.matcher(version)if (!matcher.matches()) {    throw new IllegalStateException("Pattern didn't match!")}def major = matcher.group(1)def minor = matcher.group(2)def newVersion2 = "v${major}.${(minor as int) + 1}.0".toString()assert newVersion2.equals(expected)</code></pre></div></div><div class="paragraph"><p>Results for <strong>Groovy 2.5.6</strong>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">A4_Regexp_Replace_Bench.matcher_matches_use_case_dynamic    avgt   42    0,503 Â±  0,001  us/opA4_Regexp_Replace_Bench.matcher_matches_use_case_static     avgt   42    0,472 Â±  0,001  us/opA4_Regexp_Replace_Bench.string_replace_first_dynamic        avgt   42    0,828 Â±  0,002  us/opA4_Regexp_Replace_Bench.string_replace_first_static         avgt   42    0,799 Â±  0,001  us/op</code></pre></div></div><div class="paragraph"><p>Results for <strong>Groovy 3.0.0-alpha-4</strong>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">A4_Regexp_Replace_Bench.matcher_matches_use_case_dynamic    avgt   42    0,516 Â±  0,001  us/opA4_Regexp_Replace_Bench.matcher_matches_use_case_static     avgt   42    0,472 Â±  0,001  us/opA4_Regexp_Replace_Bench.string_replace_first_dynamic        avgt   42    0,813 Â±  0,001  us/opA4_Regexp_Replace_Bench.string_replace_first_static         avgt   42    0,813 Â±  0,002  us/op</code></pre></div></div><div class="paragraph"><p>Here is the graph:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-regexp-jmh-string-replace.png"><img src="/images/groovy-regexp-jmh-string-replace.png" alt="groovy regexp jmh string replace"></a></div></div></div></div><div class="paragraph"><p>Conclusions:</p></div><div class="ulist"><ul><li><p>The one-liner <code>String.replaceFirst(regexp,closure)</code> is only <strong>~0.3 Î¼s slower</strong> compared to the imperative multiline approach.</p></li><li><p>There is literally <strong>no difference</strong> between dynamic or static compilation in both cases.</p></li></ul></div></div></div></div><div class="sect1"><h2>Summary</h2><div class="sectionbody"><div class="paragraph"><p>Groovy makes working with regular expressions much easier compared to the Java way. It removes a lot of verbosity at the low and acceptable cost.</p></div><div class="admonitionblock important"><table><tr><td class="icon"><i class="fa icon-important" title="Important"></i></td><td class="content"><div class="paragraph"><p><strong>ATTENTION</strong>: keep in mind that all benchmarks results are tighlty coupled to the examples they were used with. Consider benchmarking your own usage scenario before picking one solution over another. <strong>Context always matters.</strong></p></div></td></tr></table></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;I&amp;#8217;ve never enjoyed working with regular expressions in Java. It was always very error-prone. You had to remember to escape backslashes, and a very simple &lt;em&gt;match elements&lt;/em&gt; check required writing at least 5 lines of code. Booooring. However, Groovy solved most of these issues, and today we are going to take a closer look at features like &lt;em&gt;pattern operator&lt;/em&gt;, &lt;em&gt;find operator&lt;/em&gt; or &lt;em&gt;exact match operator&lt;/em&gt;. We will focus on learning the new syntax, as well as measuring and comparing its performance. Let&amp;#8217;s begin!&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="jmh" scheme="https://e.printstacktrace.blog/tags/jmh/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="benchmark" scheme="https://e.printstacktrace.blog/tags/benchmark/"/>
    
      <category term="regexp" scheme="https://e.printstacktrace.blog/tags/regexp/"/>
    
      <category term="regular-expressions" scheme="https://e.printstacktrace.blog/tags/regular-expressions/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA and Git&#39;s &quot;gpg failed to sign the data&quot;</title>
    <link href="https://e.printstacktrace.blog/intellij-idea-git-gpg-failed-to-sign-the-data/"/>
    <id>https://e.printstacktrace.blog/intellij-idea-git-gpg-failed-to-sign-the-data/</id>
    <published>2019-03-10T14:24:29.000Z</published>
    <updated>2019-03-16T11:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Today I&#8217;ve decided to improve my Github account settings a bit. I thought that it would be nice to add GPG key to it and sign all commits pushed from my computer. Everything worked great until I tried to commit the first change directly from my IntelliJ IDEA.</p></div><a id="more"></a><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>Why even bother with signing commits with GPG key? The most important reason is quite simple - it proves that you are the author of a given commit. Or to be more precise - the key that was used to sign this commit matches the key associated with your account. Github honors signing commits with this pretty lovely badge added to the commit history log.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/github-gpg-signing.png"><img src="/images/github-gpg-signing.png" alt="github gpg signing"></a></div></div></div></div><div class="paragraph"><p>Signing git commits make even more sense if you use tools like <a href="https://keybase.io/wololock" target="_blank" rel="noopener">Keybase.io</a> to chat and share files in a secure (encrypted) fashion.</p></div></div></div><div class="sect1"><h2>How to sign Git commits?</h2><div class="sectionbody"><div class="paragraph"><p>First of all, you need to have a GPG key. Github&#8217;s help page<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> explains in details how to generate a key, as well as how to associate it with your account. I encourage you to read it - it won&#8217;t take more than 5 minutes of your time.</p></div><div class="paragraph"><p>Next, you need to configure your Git client to use the key. Depending on your preferences, you might want to set up GPG signing globally, or you can do it locally for a single repository. In my case, I decided to set up signing commits at the global level with the following two commands:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ git config --global commit.gpgsign true$ git config --global user.signingkey YOURKEYHERE</code></pre></div></div><div class="paragraph"><p>If you use Git from the command line, that is all you have to do. You can create the first commit and push it to Github to see <em>"Verified"</em> badge next to your commit history log entry.</p></div></div></div><div class="sect1"><h2>Getting into troubles with IntelliJ IDEA</h2><div class="sectionbody"><div class="paragraph"><p>I assume you also use your IDE&#8217;s built-in Git client. I use IntelliJ IDEA daily, and I use its Git client a lot. When I tried to create the first commit after enabling GPG signing, IDEA&#8217;s client stopped working, and it started failing with the following error:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">gpg failed to sign the data fatal: failed to write commit object</code></pre></div></div><div class="paragraph"><p>I started googling to see what the problem is. It quickly turned out that this is not the IDEA&#8217;s problem, but rather Git and GnuPG issue. It fails to sign the commit if Git command is executed without TTY, so GPG cannot prompt to ask you for a password. I&#8217;ve quickly found a solution that suggested creating an alias that executes gpg with <code>--batch --no-tty</code> options. I created a script:</p></div><div class="listingblock"><div class="title">Listing 1. /usr/local/bin/gpg-no-tty</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">#!/bin/bash/usr/bin/gpg --batch --no-tty "$@"</code></pre></div></div><div class="paragraph"><p>Then I added the following block to my <code>.gitconfig</code> file.</p></div><div class="listingblock"><div class="title">Listing 2. .gitconfig</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">[gpg]program = gpg-no-tty</code></pre></div></div><div class="paragraph"><p>The solutions I&#8217;ve found promised that in this case IDEA will use <code>gpg-agent</code> that can store the password in the keyring and automatically sign the commit. Well, it didn&#8217;t work for me. At least not right away.</p></div></div></div><div class="sect1"><h2>Fedora Linux 29 use case</h2><div class="sectionbody"><div class="paragraph"><p>I use Fedora Linux, and it seemed to be a critical factor in this story. I had to went through a few more articles, and I&#8217;ve finally found the answer. When I applied the solution that uses <code>--batch --no-tty</code> for the first time, it didn&#8217;t take any effect. However, it turned out that <code>gpg-agent</code> works with GPG 2.x. When I run <code>gpg --version</code> I noticed the following:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ gpg --versiongpg (GnuPG) 1.4.23Copyright (C) 2015 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Home: ~/.gnupgObsÅ‚ugiwane algorytmy:Asymetryczne: RSA, RSA-E, RSA-S, ELG-E, DSASymetryczne: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,             TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256SkrÃ³tÃ³w: MD5, SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224Kompresji: Nieskompresowany, ZIP, ZLIB, BZIP2</code></pre></div></div><div class="paragraph"><p>It revealed that <code>gpg</code> in my system points to version <code>1.4.23</code>. Would it mean that there is no GPG 2.x in Fedora Linux? Nope, not really. GPG 2.x is available for Fedora Linux, but as a <code>gpg2</code> shell command.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ gpg2 --versiongpg (GnuPG) 2.2.13libgcrypt 1.8.4Copyright (C) 2019 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Home: /home/wololock/.gnupgObsÅ‚ugiwane algorytmy:Asymetryczne: RSA, ELG, DSA, ECDH, ECDSA, EDDSASymetryczne: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,             TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256SkrÃ³tÃ³w: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224Kompresji: Nieskompresowany, ZIP, ZLIB, BZIP2</code></pre></div></div><div class="paragraph"><p>When I replaced the initial script with <code>gpg2</code> - it worked as expected.</p></div><div class="listingblock"><div class="title">Listing 3. The final version of /usr/local/bin/gpg-no-tty</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">#!/bin/bash/usr/bin/gpg2 --batch --no-tty "$@"</code></pre></div></div><div class="paragraph"><p>I was able to create the first commit from IntelliJ IDEA. The <code>gpg-agent</code> prompted for the password and I was able to store it in the keyring.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/github-gpg-idea.png"><img src="/images/github-gpg-idea.png" alt="github gpg idea"></a></div></div></div></div></div></div><div class="sect1"><h2>UPDATE: <code>--batch --no-tty</code> not needed with GPG2</h2><div class="sectionbody"><div class="paragraph"><p>I just make some experiments and it seems like using intermediate script that adds <code>--batch --no-tty</code> switches is no needed when you use <code>gpg2</code> with <code>gpg-agent</code>. <em>(At least in my case)</em>. My current setup is the following. I have changed the default gpg program to <code>gpg2</code> in my <code>~/.gitconfig</code> file:</p></div><div class="listingblock"><div class="title">Listing 4. Make sure the following two lines are added at the end of your `~/.gitconfig file</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">[gpg]program = gpg2</code></pre></div></div><div class="paragraph"><p>Here is my <code>gpg-agent</code> version.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ gpg-agent --versiongpg-agent (GnuPG) 2.2.13libgcrypt 1.8.4Copyright (C) 2019 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.</code></pre></div></div><div class="paragraph"><p>Make sure that <code>gpg-agent</code> daemon is running. You can start it with the following command:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ gpg-agent --daemon</code></pre></div></div><div class="paragraph"><p>When you create a first signed commit via command line or from IntelliJ IDEA (I&#8217;ve checked both cases after removing remembered password from the keyring), <code>gpg-agent</code> will prompt and ask you for a password that can be stored in the keyring.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/github-gpg-idea.png"><img src="/images/github-gpg-idea.png" alt="github gpg idea"></a></div></div></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><div class="paragraph"><p>If you removed remembered GPG key password from the keyring and you want to test if <code>gpg-agent</code> prompts again for the password correctly, remember to shut down the daemon and restart it.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">$ gpgconf --kill gpg-agent$ gpg-agent --daemon</code></pre></div></div></td></tr></table></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>If you are interested in enabling GPG signing of your Git commits, consider checking <a href="https://github.com/pstadler/keybase-gpg-github" target="_blank" rel="noopener">this step-by-step guide</a>, where you can find even more information about the setup process. Happy hacking!</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://help.github.com/en/articles/managing-commit-signature-verification" class="bare" target="_blank" rel="noopener">https://help.github.com/en/articles/managing-commit-signature-verification</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Today I&amp;#8217;ve decided to improve my Github account settings a bit. I thought that it would be nice to add GPG key to it and sign all commits pushed from my computer. Everything worked great until I tried to commit the first change directly from my IntelliJ IDEA.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="How to" scheme="https://e.printstacktrace.blog/categories/how-to/"/>
    
    
      <category term="git" scheme="https://e.printstacktrace.blog/tags/git/"/>
    
      <category term="github" scheme="https://e.printstacktrace.blog/tags/github/"/>
    
      <category term="gpg" scheme="https://e.printstacktrace.blog/tags/gpg/"/>
    
      <category term="intellij-idea" scheme="https://e.printstacktrace.blog/tags/intellij-idea/"/>
    
  </entry>
  
  <entry>
    <title>Release It! 2nd edition - book review</title>
    <link href="https://e.printstacktrace.blog/release-it-2nd-edition-book-review/"/>
    <id>https://e.printstacktrace.blog/release-it-2nd-edition-book-review/</id>
    <published>2019-03-02T23:17:25.000Z</published>
    <updated>2019-03-02T23:17:25.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>We are software developers. Our daily duty is to write programs. We spend a lot of time and effort into doing the right things and doing them right. At some point, the production launch day comes and depending on our level of confidence - we are calm and ready for the first wave of unpredictable users, or deadly terrified.</p></div><a id="more"></a><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>How to build a level of confidence that helps us releasing new versions of the system and preventing heart attacks? There is no simple answer, but there are reliable tools, techniques, and patterns every software developer should consider using. The book called <a href="https://pragprog.com/book/mnee2/release-it-second-edition" target="_blank" rel="noopener"><em>"Release It! 2nd edition: Design and Deploy Production-Ready Software"</em></a> by <a href="https://twitter.com/mtnygard" target="_blank" rel="noopener">Michael T. Nygard</a> covers most of them.</p></div></div></div><div class="sect1"><h2>What&#8217;s inside?</h2><div class="sectionbody"><div class="paragraph"><p>In the <strong>first chapter</strong> <em>(Living in Production)</em> the author explains what does it mean that the system is production-ready and how everything that happens before the production deployment is just a prelude. He gives several short examples that illustrate how big mistake people make when they believe that any lab-sterile testing can mimic real, and often crazy, users. The <strong>second chapter</strong> is a case study - a thriller starring an unexpected exception as a villain, and a huge airline company as a victim. This chapter made me love this book. Micheal Nygard is a great storyteller, and this chapter is the best proof. He guides the reader step by step, explaining the way he analyzed and solved that problem. <strong>Chapter three</strong> <em>(Stabilize Your System)</em> focuses on defining what stability of the system means. It asks a few questions that can be summarized with "Let&#8217;s think what may go wrong" sentence. <strong>Chapter four</strong> <em>(Stability Antipatterns)</em> provides a list of possible failures, their root causes, and anti-solutions people quite often apply to solve them. In the <strong>next chapter</strong> <em>(Stability Patterns)</em> the author focuses on the simplest and most reliable solutions like timeouts, circuit breakers or backpressure to name just a few.</p></div><div class="paragraph"><p><strong>Chapter six</strong> opens the second part of the book called <em>"Design for Production"</em> and it starts with the second case study, which shows how massive marketing campaign incorporated with the broken e-commerce system may cause damage. The <strong>seventh chapter</strong> <em>(Foundations)</em> introduces production-ready design layers. They are (from bottom to top): Foundation, Instances, Interconnect, Control Plane, and Operations. In this chapter the author focuses on the first layer - he briefly explains the networking basics, physical hosts, VMs and containers. The <strong>next chapter</strong> <em>(Processes on Machines)</em> uncovers the layer called "Instances". It provides the definitions of services, instances, executables, etc. It also focuses on the code (including the configuration as a code approach) and logging. In the <strong>ninth chapter</strong>, we are introduced to the instances' interconnection strategies. It starts with a simple (and error-prone) DNS-only approach and ends up with ready-to-scale service discovery solution example. <strong>Chapter ten</strong> <em>(Control Plane)</em> treats of automation, monitoring, distributed log collection, provisioning, and possible platforms that may help to achieve the desired level of control. It does not suggest any silver-bullet solution - it explains the possibilities and tells what should we focus on instead. <strong>Chapter eleven</strong> is a comprehensive tour on OWASP top 10 security vulnerabilities.</p></div><div class="paragraph"><p><strong>Chapter twelve</strong> opens the 3rd part of the book called <em>"Deliver Your System"</em> and it starts with yet another case study. <strong>Chapter thirteen</strong> <em>(Design For Deployment)</em> explains the importance of smaller and more frequent deployments towards making significant changes possible with a series of small and predictable steps. The <strong>next chapter</strong> <em>(Handling Versions)</em> focuses on different ways of handling API versioning. It explains the importance of supporting backward compatible changes only and shows how to make consumer-producer integration less painful.</p></div><div class="paragraph"><p><strong>Chapter fifteen</strong> <em>(Trampled by Your Own Customers)</em> opens the last part of the book called <em>"Solve Systematic Problems"</em>. It starts with a case study - a history of a redesigned e-commerce system which was crashed by 250k active sessions in 30 minutes after the first launch. The <strong>next chapter</strong> <em>(Adaption)</em> teaches us how to adapt to the changing environment and grow over time through planning releases cycle. The <strong>last chapter seventeen</strong> <em>(Chaos Engineering)</em> gives a brief introduction to the idea of chaos engineering. It accepts that systems are fragile and failures show up sooner than later. And the more control over them we have, the better. Building resilient systems require breaking them regularly and in a controlled way.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/release-it-img1.jpg"><img src="/images/release-it-img1.jpg" alt="release it img1"></a></div></div></div></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p><em>"Release It!"</em> is a great book <strong>every</strong> software developer, architect, designer or even QA engineer should read. It focuses on <strong>principles</strong> and <strong>guidance</strong> so it may feel like it misses some level of details. However, if it focused more on the specific tools instead of principles, it would quickly become outdated. You won&#8217;t regret spending time with the book - it is 336 pages of useful and never outdating knowledge. Highly recommended!</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;We are software developers. Our daily duty is to write programs. We spend a lot of time and effort into doing the right things and doing them right. At some point, the production launch day comes and depending on our level of confidence - we are calm and ready for the first wave of unpredictable users, or deadly terrified.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programmer&#39;s Bookshelf" scheme="https://e.printstacktrace.blog/categories/programmer-s-bookshelf/"/>
    
    
      <category term="book" scheme="https://e.printstacktrace.blog/tags/book/"/>
    
      <category term="review" scheme="https://e.printstacktrace.blog/tags/review/"/>
    
      <category term="devops" scheme="https://e.printstacktrace.blog/tags/devops/"/>
    
      <category term="deploy" scheme="https://e.printstacktrace.blog/tags/deploy/"/>
    
      <category term="production" scheme="https://e.printstacktrace.blog/tags/production/"/>
    
      <category term="release" scheme="https://e.printstacktrace.blog/tags/release/"/>
    
  </entry>
  
  <entry>
    <title>How to remove any class annotation with Groovy compiler configuration script?</title>
    <link href="https://e.printstacktrace.blog/how-to-remove-class-annotation-groovy-compiler-configuration/"/>
    <id>https://e.printstacktrace.blog/how-to-remove-class-annotation-groovy-compiler-configuration/</id>
    <published>2019-02-19T18:14:38.000Z</published>
    <updated>2019-02-20T13:08:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>One of the most interesting Groovy features is its ability to configure advanced compiler<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> options using DSL script. It becomes handy when you want to apply some global modifications to all Groovy classes. (For instance, you want to add <code>@CompileStatic</code> annotation to all classes, without applying changes to the source code). In most cases, you want to add something to the existing source code, e.g., classes imports or useful annotations, but what if we want to remove one annotation or another?</p></div><a id="more"></a><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Kudos to <a href="https://twitter.com/sbglasius" target="_blank" rel="noopener">SÃ¸ren Glasius</a> who brought the question about removing annotations at the compile time to the <strong>Groovy Community Slack</strong>!<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup></td></tr></table></div><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start by defining a simple example. Imagine you work with a Groovy code base, and all classes are annotated with the <code>@CompileStatic</code> annotation. It&#8217;s an excellent practice to favor <strong>static compilation</strong> over the dynamic one if we don&#8217;t use Groovy&#8217;s dynamic language capabilities. However, let&#8217;s say that at some point we need to compile the same source code with a static compilation disabled. There are various ways to do it. We could temporarily remove all annotations from the code, but it doesn&#8217;t sound like a good solution. Instead, let&#8217;s use a compiler configuration script to do it for us (without making a single change to the source code).</p></div></div></div><div class="sect1"><h2>An example</h2><div class="sectionbody"><div class="paragraph"><p>We use a simple <code>Person</code> class to illustrate the use case.</p></div><div class="listingblock"><div class="title">Listing 1. Person.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.CompileStatic@CompileStaticclass Person {    private String firstName    private String lastName    String introduceYourself() {        "${firstName} ${lastName}"    }    String greet(Person person) {        "${introduceYourself()} greets ${person.introduceYourself()}"    }    static void main(String[] args) {        def joe = new Person(firstName: "Joe", lastName: "Doe")        def mark = new Person(firstName: "Mark", lastName: "Smith")        println joe.greet(mark)    }}</code></pre></div></div><div class="paragraph"><p>As you can see this class uses static compilation, so when we compile it, we get a bytecode that is an equivalent of the following Java code.</p></div><div class="listingblock"><div class="title">Listing 2. Decompiled Person.class file</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//import groovy.lang.GroovyObject;import groovy.lang.MetaClass;import org.codehaus.groovy.runtime.DefaultGroovyMethods;import org.codehaus.groovy.runtime.GStringImpl;import org.codehaus.groovy.runtime.ScriptBytecodeAdapter;import org.codehaus.groovy.runtime.typehandling.ShortTypeHandling;public class Person implements GroovyObject {    private String firstName;    private String lastName;    public Person() {        MetaClass var1 = this.$getStaticMetaClass();        this.metaClass = var1;    }    public String introduceYourself() {        return (String)ShortTypeHandling.castToString(new GStringImpl(new Object[]{this.firstName, this.lastName}, new String[]{"", " ", ""}));    }    public String greet(Person person) {        return (String)ShortTypeHandling.castToString(new GStringImpl(new Object[]{this.introduceYourself(), person.introduceYourself()}, new String[]{"", " greets ", ""}));    }    public static void main(String... args) {        Person var1 = new Person();        String var2 = "Joe";        ScriptBytecodeAdapter.setGroovyObjectProperty(var2, Person.class, var1, (String)"firstName");        String var3 = "Doe";        ScriptBytecodeAdapter.setGroovyObjectProperty(var3, Person.class, var1, (String)"lastName");        Person var5 = new Person();        String var6 = "Mark";        ScriptBytecodeAdapter.setGroovyObjectProperty(var6, Person.class, var5, (String)"firstName");        String var7 = "Smith";        ScriptBytecodeAdapter.setGroovyObjectProperty(var7, Person.class, var5, (String)"lastName");        DefaultGroovyMethods.println(Person.class, var1.greet(var5));        Object var10000 = null;    }}</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">I use Groovy 2.5.6 version in this example. Depending on Groovy version, the output bytecode represented as a Java code may look differently.</td></tr></table></div></div></div><div class="sect1"><h2>Using compiler configuration script</h2><div class="sectionbody"><div class="paragraph"><p>A Groovy compiler allows us to use the <strong>compiler configuration script</strong> to add some useful features. For instance, if we would like to add <code>@CompileStatic</code> annotation to all classes, we would create a <code>config.groovy</code> script like the one below.</p></div><div class="listingblock"><div class="title">Listing 3. config.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">withConfig(configuration) {    ast(groovy.transform.CompileStatic)}</code></pre></div></div><div class="paragraph"><p>Now, all we have to do is to use <code>--configscript</code> switch to enable our custom compiler configuration.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">groovyc --configscript config.groovy Person.groovy</code></pre></div></div><div class="paragraph"><p>OK, so we know how to add an annotation - let&#8217;s see how we can remove one from all Groovy classes. We need to create an AST transformation customizer, but instead of creating a new class that extends <code>org.codehaus.groovy.control.customizers.ASTTransformationCustomizer</code> class we are going to use <code>inline</code> directive that allows us using a closure directly in the configuration script instead.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import org.codehaus.groovy.ast.ClassNodeimport org.codehaus.groovy.classgen.GeneratorContextimport org.codehaus.groovy.control.SourceUnitwithConfig(configuration) {    inline(phase:'CONVERSION') { SourceUnit source, GeneratorContext context, ClassNode classNode -&gt; <i class="conum" data-value="1"></i><b>(1)</b>        context.compileUnit.classes.each { clazz -&gt; <i class="conum" data-value="2"></i><b>(2)</b>            clazz.annotations.removeAll { antn -&gt; antn.classNode.name  == 'CompileStatic' } <i class="conum" data-value="3"></i><b>(3)</b>        }    }}</code></pre></div></div><div class="paragraph"><p>In this compiler configuration, <em class="conum" data-value="1"></em> we attach our customizer to the <code>CompilePhase.CONVERSION</code> phase<sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnotedef_3" title="View footnote.">3</a>]</sup> - the phase that is responsible for creating an abstract syntax tree (AST). <em class="conum" data-value="2"></em> We take the compilation unit to access all Groovy classes from our source code. <em class="conum" data-value="3"></em> Then for each class node, we remove <code>@CompileStatic</code> annotation. Thanks to this we have a chance to modify the source unit before it gets analyzed and compiled. If we take a compiled class file and we decompile it, we get a bytecode represented as the following Java code equivalent.</p></div><div class="listingblock"><div class="title">Listing 4. Decompiled Person.class file (the one compiled without static compilation)</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//import groovy.lang.GroovyObject;import groovy.lang.MetaClass;import org.codehaus.groovy.runtime.BytecodeInterface8;import org.codehaus.groovy.runtime.GStringImpl;import org.codehaus.groovy.runtime.ScriptBytecodeAdapter;import org.codehaus.groovy.runtime.callsite.CallSite;import org.codehaus.groovy.runtime.typehandling.ShortTypeHandling;public class Person implements GroovyObject {    private String firstName;    private String lastName;    public Person() {        CallSite[] var1 = $getCallSiteArray();        super();        MetaClass var2 = this.$getStaticMetaClass();        this.metaClass = var2;    }    public String introduceYourself() {        CallSite[] var1 = $getCallSiteArray();        return (String)ShortTypeHandling.castToString(new GStringImpl(new Object[]{this.firstName, this.lastName}, new String[]{"", " ", ""}));    }    public String greet(Person person) {        CallSite[] var2 = $getCallSiteArray();        return !__$stMC &amp;&amp; !BytecodeInterface8.disabledStandardMetaClass() ? (String)ShortTypeHandling.castToString(new GStringImpl(new Object[]{this.introduceYourself(), var2[2].call(person)}, new String[]{"", " greets ", ""})) : (String)ShortTypeHandling.castToString(new GStringImpl(new Object[]{var2[0].callCurrent(this), var2[1].call(person)}, new String[]{"", " greets ", ""}));    }    public static void main(String... args) {        CallSite[] var1 = $getCallSiteArray();        Object joe = var1[3].callConstructor(Person.class, ScriptBytecodeAdapter.createMap(new Object[]{"firstName", "Joe", "lastName", "Doe"}));        Object mark = var1[4].callConstructor(Person.class, ScriptBytecodeAdapter.createMap(new Object[]{"firstName", "Mark", "lastName", "Smith"}));        var1[5].callStatic(Person.class, var1[6].call(joe, mark));    }}</code></pre></div></div><div class="paragraph"><p>You see the difference. Compiling the same Groovy class produced the same bytecode as if we remove <code>@CompileStatic</code> annotation from the source file.</p></div></div></div><div class="sect1"><h2>Imported annotation vs. fully qualified name</h2><div class="sectionbody"><div class="paragraph"><p>There is one corner case worth explaining. You have seen in the previous example that we can access annotation name through the <code>ClassNode</code> field of <code>AnnotatedNode</code> class. We silently assumed that all annotations use imports and simple names like <code>@CompileStatic that</code>. However, that is not always true, and you may find yourself in a situation where the same annotation is added using the qualified name <code>@groovy.transform.CompileStatic</code>. It affects our compiler script significantly because this annotation cannot be found using its simple name - <code>classNode.name</code> in this case returns <code>groovy.transform.CompileStatic</code>.</p></div><div class="paragraph"><p>How to deal with that? We could define a predicate that searches for both names, a simple and qualified one.</p></div><div class="listingblock"><div class="title">Listing 5. Predicate that gets satisifed by simple and qualified <code>@CompileStatic</code> annotation name</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">{ antn -&gt; antn.classNode.name in ['CompileStatic', 'groovy.transform.CompileStatic'] }</code></pre></div></div><div class="paragraph"><p>Alternatively, we could <em>"unqualify"</em> all annotation names using <code>tokenize()</code> and capturing the last segment - just in case one of the classes is annotated using qualified annotation name.</p></div><div class="listingblock"><div class="title">Listing 6. Groovy compiler script that supports qualified and simple annotation names</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import org.codehaus.groovy.ast.ClassNodeimport org.codehaus.groovy.classgen.GeneratorContextimport org.codehaus.groovy.control.SourceUnitwithConfig(configuration) {    inline(phase:'CONVERSION') { SourceUnit source, GeneratorContext context, ClassNode classNode -&gt;        context.compileUnit.classes.each { ClassNode clazz -&gt;            clazz.annotations.removeAll { antn -&gt; antn.classNode.name.tokenize(/./).last() == 'CompileStatic' }        }    }}</code></pre></div></div><div class="paragraph"><p>Choose whatever works for you better.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I hope you have learned something useful from this blog post. A Groovy compiler configuration script gives you a lot of different options to customize a compiler behavior. If you want to learn more about it, check the official Groovy documentation<sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnotedef_4" title="View footnote.">4</a>]</sup> for more examples. See you next time!</p></div><div class="video-container"><iframe width="560" height="315" src="https://www.youtube.com/embed/7TJwpuNsDS8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="http://docs.groovy-lang.org/latest/html/documentation/tools-groovyc.html" class="bare" target="_blank" rel="noopener">http://docs.groovy-lang.org/latest/html/documentation/tools-groovyc.html</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="https://groovycommunity.com/" class="bare" target="_blank" rel="noopener">https://groovycommunity.com/</a></div><div class="footnote" id="_footnotedef_3"><a href="#_footnoteref_3">3</a>. <a href="http://docs.groovy-lang.org/latest/html/api/org/codehaus/groovy/control/CompilePhase.html" class="bare" target="_blank" rel="noopener">http://docs.groovy-lang.org/latest/html/api/org/codehaus/groovy/control/CompilePhase.html</a></div><div class="footnote" id="_footnotedef_4"><a href="#_footnoteref_4">4</a>. <a href="http://groovy-lang.org/dsls.html#_customizer_builder" class="bare" target="_blank" rel="noopener">http://groovy-lang.org/dsls.html#_customizer_builder</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;One of the most interesting Groovy features is its ability to configure advanced compiler&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt; options using DSL script. It becomes handy when you want to apply some global modifications to all Groovy classes. (For instance, you want to add &lt;code&gt;@CompileStatic&lt;/code&gt; annotation to all classes, without applying changes to the source code). In most cases, you want to add something to the existing source code, e.g., classes imports or useful annotations, but what if we want to remove one annotation or another?&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="compiler-configuration" scheme="https://e.printstacktrace.blog/tags/compiler-configuration/"/>
    
      <category term="compile-static" scheme="https://e.printstacktrace.blog/tags/compile-static/"/>
    
      <category term="annotation" scheme="https://e.printstacktrace.blog/tags/annotation/"/>
    
      <category term="ast" scheme="https://e.printstacktrace.blog/tags/ast/"/>
    
  </entry>
  
  <entry>
    <title>Ratpack on GraalVM - how to start?</title>
    <link href="https://e.printstacktrace.blog/ratpack-graalvm-how-to-start/"/>
    <id>https://e.printstacktrace.blog/ratpack-graalvm-how-to-start/</id>
    <published>2019-02-15T02:10:39.000Z</published>
    <updated>2019-02-15T02:10:39.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>The journey inside the exciting world of <a href="https://www.graalvm.org/" target="_blank" rel="noopener">GraalVM</a> continues. Today I would like to share with you results of running <a href="https://ratpack.io/" target="_blank" rel="noopener">Ratpack</a> on GraalVM experiment. You are going to learn how to build a native binary of a simple "Hello, World!" Ratpack application. In the end we are going to run some benchmarks to see if running GraalVM executable produces better results than running JAR on a regular Oracle JDK.</p></div><a id="more"></a><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">The source code of <em>ratpack-graalvm-demo</em> application can be found here <a href="https://github.com/wololock/ratpack-graalvm-demo" target="_blank" rel="noopener">wololock/ratpack-graalvm-demo</a></td></tr></table></div><div class="sect1"><h2>Prerequisites</h2><div class="sectionbody"><div class="paragraph"><p>Below you can find information about the GraalVM and Ratpack versions I used in the experiment:</p></div><div class="ulist"><ul><li><p><strong>GraalVM</strong> 1.0.0-RC12 (the most recent version available while writing this blog post)</p></li><li><p><strong>Ratpack</strong> 1.6.0</p></li></ul></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">Don&#8217;t know how to install GraalVM on your machine? With SDKMAN! installing GraalVM is as easy as executing the following command in the console <code>sdk install java 1.0.0-rc-13-grl</code>.</td></tr></table></div></div></div><div class="sect1"><h2>Hello World application</h2><div class="sectionbody"><div class="paragraph"><p>We start the experiments with the most straightforward possible application - a good old Hello World app.</p></div><div class="listingblock"><div class="title">Listing 1. src/main/java/com/github/wololock/RatpackGraalDemoApp.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock;import ratpack.server.RatpackServer;import java.util.HashMap;import java.util.Map;import static ratpack.jackson.Jackson.json;final class RatpackGraalDemoApp {    public static void main(String[] args) throws Exception {        final Map&lt;String, String&gt; message = new HashMap&lt;&gt;();        message.put("message", "Hello, World!");        RatpackServer.start(server -&gt;                server.serverConfig(config -&gt; config.sysProps().development(false))                        .handlers(chain -&gt; chain.get(ctx -&gt; ctx.render(json(message))))        );    }}</code></pre></div></div><div class="paragraph"><p>When we send an HTTP request to the <code>localhost:5050</code> we get the following response:</p></div><div class="listingblock"><div class="title">Listing 2. HTTP response of <code>(GET) localhost:5050</code> request</div><div class="content"><pre class="highlightjs highlight"><code class="language-http hljs" data-lang="http">HTTP/1.1 200 OKcontent-encoding: gzipcontent-type: application/jsontransfer-encoding: chunked{    "message": "Hello, World!"}</code></pre></div></div></div></div><div class="sect1"><h2>Preparing for GraalVM</h2><div class="sectionbody"><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">I strongly recommend reading <a href="https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692" target="_blank" rel="noopener"><em>"Instant Netty Startup using GraalVM Native Image Generation"</em></a> article by <a href="https://twitter.com/cstancu" target="_blank" rel="noopener">Codrut Stancu</a>. It explains in details how to prepare Netty-based application for GraalVM native binary compilation.</td></tr></table></div><div class="paragraph"><p>We need to do some additional work to prepare our <em>"Hello World"</em> application for GraalVM.</p></div><div class="sect2"><h3>1. Reflection configuration</h3><div class="paragraph"><p>We start with preparing a configuration file for classes used via Java reflection mechanism. GraalVM uses <a href="https://github.com/oracle/graal/tree/master/substratevm" target="_blank" rel="noopener">Substrate VM</a> - a framework that allows aggressive ahead-of-time optimizations. Classes, methods or fields accessed via reflection have to be known at the compile time to make AOT compilation possible. Substrate VM resolves most of the basic reflection calls like <code>Class.forName(&#8230;&#8203;)</code>, but in more complex scenarios it requires additional information to be provided.</p></div><div class="listingblock"><div class="title">Listing 3. reflections.json</div><div class="content"><pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">[  {    "name": "io.netty.channel.socket.nio.NioServerSocketChannel",    "methods": [      {        "name": "&lt;init&gt;",        "parameterTypes": []      }    ]  },  {    "name": "com.github.benmanes.caffeine.cache.SSMS",    "methods": [      {        "name": "&lt;init&gt;",        "parameterTypes": ["com.github.benmanes.caffeine.cache.Caffeine", "com.github.benmanes.caffeine.cache.CacheLoader", "boolean"]      }    ]  },  {    "name": "com.github.benmanes.caffeine.cache.PSMS",    "methods": [      {        "name": "&lt;init&gt;"      }    ]  }]</code></pre></div></div><div class="paragraph"><p>In the case of our demo app we need to provide information about these 3 classes. <code>SSMS</code> and <code>PSMS</code> are Caffeine caching library generated classes that are used to initialize paths handler internal cache.</p></div></div><div class="sect2"><h3>2. Dynamic proxies configuration</h3><div class="paragraph"><p>To make dependency injection via Guice possible, we need to <a href="https://github.com/oracle/graal/blob/master/substratevm/DYNAMIC_PROXY.md#manual-configuration" target="_blank" rel="noopener">generate dynamic proxies</a> at the compile time. It requires defining a list of interfaces that dynamic proxies implement. In our case, we only have to configure <code>java.lang.reflect.TypeVariable</code> interface.</p></div><div class="listingblock"><div class="title">Listing 4. proxies.json</div><div class="content"><pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">[  ["java.lang.reflect.TypeVariable"]]</code></pre></div></div></div><div class="sect2"><h3>3. Unsafe memory access configuration</h3><div class="paragraph"><p>Using <code>sun.misc.Unsafe</code> in Substrate VM generates <a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md#unsafe-memory-access" target="_blank" rel="noopener">other limitations</a>. Codrut in his <em>"Instant Netty Startup using GraalVM Native Image Generation"</em> article explained which <code>sun.misc.Unsafe</code> usages <a href="https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692#020c" target="_blank" rel="noopener">require additional configuration</a> in Netty-based application. It applies to our demo application as well + we need to configure Caffeine&#8217;s <code>com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess</code> class. Let&#8217;s add the following static classes to the main application class.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock;import com.oracle.svm.core.annotate.Alias;import com.oracle.svm.core.annotate.RecomputeFieldValue;import com.oracle.svm.core.annotate.TargetClass;import ratpack.server.RatpackServer;import java.util.HashMap;import java.util.Map;import static ratpack.jackson.Jackson.json;final class RatpackGraalDemoApp {    public static void main(String[] args) throws Exception {        final Map&lt;String, String&gt; message = new HashMap&lt;&gt;();        message.put("message", "Hello, World!");        RatpackServer.start(server -&gt;                server.serverConfig(config -&gt; config.sysProps().development(false))                        .handlers(chain -&gt; chain.get(ctx -&gt; ctx.render(json(message))))        );    }    @TargetClass(className = "io.netty.util.internal.PlatformDependent0")    static final class Target_io_netty_util_internal_PlatformDependent0 {        @Alias        @RecomputeFieldValue(kind = RecomputeFieldValue.Kind.FieldOffset, declClassName = "java.nio.Buffer", name = "address")        private static long ADDRESS_FIELD_OFFSET;    }    @TargetClass(className = "io.netty.util.internal.CleanerJava6")    static final class Target_io_netty_util_internal_CleanerJava6 {        @Alias        @RecomputeFieldValue(kind = RecomputeFieldValue.Kind.FieldOffset, declClassName = "java.nio.DirectByteBuffer", name = "cleaner")        private static long CLEANER_FIELD_OFFSET;    }    @TargetClass(className = "io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess")    static final class Target_io_netty_util_internal_shaded_org_jctools_util_UnsafeRefArrayAccess {        @Alias        @RecomputeFieldValue(kind = RecomputeFieldValue.Kind.ArrayIndexShift, declClass = Object[].class)        public static int REF_ELEMENT_SHIFT;    }    @TargetClass(className = "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess")    static final class Target_com_github_benmanes_caffeine_cache_UnsafeRefArrayAccess {        @Alias        @RecomputeFieldValue(kind = RecomputeFieldValue.Kind.ArrayIndexShift, declClass = Object[].class)        public static int REF_ELEMENT_SHIFT;    }}</code></pre></div></div><div class="paragraph"><p>Of course, it also means that we need to add Substrate SDK to the <code>build.gradle</code>.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">buildscript {    repositories {        jcenter()    }    dependencies {        classpath "io.ratpack:ratpack-gradle:1.6.0"        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.4"    }}apply plugin: "io.ratpack.ratpack-java"apply plugin: "com.github.johnrengelman.shadow"apply plugin: "idea"repositories {    jcenter()}mainClassName = 'com.github.wololock.RatpackGraalDemoApp'dependencies {    runtime 'org.slf4j:slf4j-simple:1.7.25'    compile 'com.oracle.substratevm:svm:1.0.0-rc12' <i class="conum" data-value="1"></i><b>(1)</b>    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Substrate VM SDK dependency.</td></tr></table></div></div></div></div><div class="sect1"><h2>Building native binary</h2><div class="sectionbody"><div class="paragraph"><p>We are finally ready to compile native binary. We use the <code>native-image</code> command with the following parameters:</p></div><div class="listingblock"><div class="title">Listing 5. build-native-image.sh</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">native-image --no-server \    -jar build/libs/ratpack-graalvm-demo-all.jar \    -H:Name=ratpack-graalvm-demo \    -H:EnableURLProtocols=http \    -H:+AllowVMInspection \    -H:+ReportUnsupportedElementsAtRuntime \    -H:ReflectionConfigurationFiles=reflections.json \    -H:DynamicProxyConfigurationFiles=proxies.json \    --allow-incomplete-classpath \    --delay-class-initialization-to-runtime=io.netty.handler.codec.http.HttpObjectEncoder,io.netty.handler.ssl.ReferenceCountedOpenSslEngine,io.netty.handler.ssl.ReferenceCountedOpenSslClientContext,io.netty.handler.ssl.ReferenceCountedOpenSslServerContext,io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator,io.netty.handler.ssl.JettyNpnSslEngine,io.netty.handler.ssl.ConscryptAlpnSslEngine,io.netty.util.internal.logging.Log4JLogger \    -Dratpack.epoll.disable=true <i class="conum" data-value="1"></i><b>(1)</b></code></pre></div></div><div class="paragraph"><p>As you can see in <em class="conum" data-value="1"></em> we disabled Epoll transport to use NIO instead. The reason for that is because <a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md#java-native-interface-jni" target="_blank" rel="noopener">JNI support is limited</a> and at least at the moment all tries to run Ratpack with Epoll transport on Linux ends with the following exception:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">[main] INFO ratpack.server.RatpackServer - Starting server...Exception in thread "main" ratpack.api.UncheckedException: java.lang.reflect.InvocationTargetExceptionat ratpack.util.Exceptions.uncheck(Exceptions.java:54)at ratpack.util.internal.TransportDetector$NativeTransportImpl.eventLoopGroup(TransportDetector.java:229)at ratpack.util.internal.TransportDetector$NativeTransport.eventLoopGroup(TransportDetector.java:133)at ratpack.util.internal.TransportDetector.eventLoopGroup(TransportDetector.java:65)at ratpack.exec.internal.DefaultExecController.&lt;init&gt;(DefaultExecController.java:61)at ratpack.server.internal.DefaultRatpackServer.start(DefaultRatpackServer.java:126)at ratpack.server.RatpackServer.start(RatpackServer.java:93)at com.github.wololock.RatpackGraalDemoApp.main(RatpackGraalDemoApp.java:12)Caused by: java.lang.reflect.InvocationTargetExceptionat java.lang.reflect.Constructor.newInstance(Constructor.java:423)at ratpack.util.internal.TransportDetector$NativeTransportImpl.eventLoopGroup(TransportDetector.java:227)... 6 moreCaused by: java.lang.UnsatisfiedLinkError: io.netty.channel.epoll.Native.epollCreate()I [symbol: Java_io_netty_channel_epoll_Native_epollCreate or Java_io_netty_channel_epoll_Native_epollCreate__]at com.oracle.svm.jni.access.JNINativeLinkage.getOrFindEntryPoint(JNINativeLinkage.java:145)at com.oracle.svm.jni.JNIGeneratedMethodSupport.nativeCallAddress(JNIGeneratedMethodSupport.java:54)at io.netty.channel.epoll.Native.epollCreate(Native.java)at io.netty.channel.epoll.Native.newEpollCreate(Native.java:107)at io.netty.channel.epoll.EpollEventLoop.&lt;init&gt;(EpollEventLoop.java:100)at io.netty.channel.epoll.EpollEventLoopGroup.newChild(EpollEventLoopGroup.java:135)at io.netty.channel.epoll.EpollEventLoopGroup.newChild(EpollEventLoopGroup.java:35)at io.netty.util.concurrent.MultithreadEventExecutorGroup.&lt;init&gt;(MultithreadEventExecutorGroup.java:84)at io.netty.util.concurrent.MultithreadEventExecutorGroup.&lt;init&gt;(MultithreadEventExecutorGroup.java:58)at io.netty.util.concurrent.MultithreadEventExecutorGroup.&lt;init&gt;(MultithreadEventExecutorGroup.java:47)at io.netty.channel.MultithreadEventLoopGroup.&lt;init&gt;(MultithreadEventLoopGroup.java:59)at io.netty.channel.epoll.EpollEventLoopGroup.&lt;init&gt;(EpollEventLoopGroup.java:104)at io.netty.channel.epoll.EpollEventLoopGroup.&lt;init&gt;(EpollEventLoopGroup.java:91)at io.netty.channel.epoll.EpollEventLoopGroup.&lt;init&gt;(EpollEventLoopGroup.java:68)</code></pre></div></div><div class="paragraph"><p>I will be exploring Epoll support and will post an update when get the working example of Ratpack application with Epoll transport on GraalVM.</p></div></div></div><div class="sect1"><h2>Running the application</h2><div class="sectionbody"><div class="paragraph"><p>At this point, we have <code>ratpack-graalvm-demo</code> binary file compiled and ready to use.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">ratpack-graalvm-demo [master] % ls -lah ratpack-graalvm-demo-rwxrwxr-x. 1 wololock wololock 24M 02-15 04:25 ratpack-graalvm-demo</code></pre></div></div><div class="paragraph"><p>As you can see a single <code>ratpack-graalvm-demo</code> file is 24 MB size. Let&#8217;s run it and execute HTTP request to see if it works.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">ratpack-graalvm-demo [master] % ./ratpack-graalvm-demo[main] INFO ratpack.server.RatpackServer - Starting server...[main] INFO ratpack.server.RatpackServer - Building registry...[main] INFO ratpack.server.RatpackServer - Ratpack started for http://localhost:5050</code></pre></div></div><div class="paragraph"><p>The first thing you will notice is that the server is ready almost instantly. Ratpack application run on a regular JVM starts quickly (in about 550-600 milliseconds), but this one starts in a blink of an eye.</p></div><div class="paragraph"><p>Let&#8217;s try to measure startup time of regular Java and GraalVM Ratpack application. I&#8217;m going to add <code>System.exit(0)</code> at the end of the <code>main</code> method, so the application shuts down right after it becomes ready to handle HTTP connections.</p></div><script id="asciicast-227675" src="https://asciinema.org/a/227675.js" async></script><div class="paragraph"><p>The difference is <strong>HUGE</strong>! Let&#8217;s compare best results - GraalVM&#8217;s best <strong>10</strong> milliseconds result versus Oracle JDK&#8217;s best <strong>581</strong> milliseconds result. It makes the difference.</p></div></div></div><div class="sect1"><h2>Benchmark</h2><div class="sectionbody"><div class="paragraph"><p>Application startup time is one thing. It&#8217;s time to run a more critical comparison test. Let&#8217;s compare the throughput of both, GraalVM and Oracle JDK runtime environments.</p></div><div class="paragraph"><p>We will start with a small number of requests so that the Oracle JDK wonâ€™t have enough time to warm up properly. In this test, we use <a href="https://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener">Apache Bench</a> tool, and we execute 200 concurrent requests with a total of 1000 requests. Letâ€™s start with GraalVM.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">~ % ab -c 200 -n 1000 http://localhost:5050/This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking localhost (be patient)Completed 100 requestsCompleted 200 requestsCompleted 300 requestsCompleted 400 requestsCompleted 500 requestsCompleted 600 requestsCompleted 700 requestsCompleted 800 requestsCompleted 900 requestsCompleted 1000 requestsFinished 1000 requestsServer Software:Server Hostname:        localhostServer Port:            5050Document Path:          /Document Length:        27 bytesConcurrency Level:      200Time taken for tests:   0.090 secondsComplete requests:      1000Failed requests:        0Total transferred:      117000 bytesHTML transferred:       27000 bytesRequests per second:    11153.00 [#/sec] (mean)Time per request:       17.932 [ms] (mean)Time per request:       0.090 [ms] (mean, across all concurrent requests)Transfer rate:          1274.32 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    4   1.2      4       6Processing:     1    7   4.8      5      22Waiting:        1    6   4.7      4      19Total:          6   11   4.2      9      23Percentage of the requests served within a certain time (ms)  50%      9  66%      9  75%     10  80%     12  90%     20  95%     22  98%     22  99%     22 100%     23 (longest request)</code></pre></div></div><div class="paragraph"><p>That was fast. Now let&#8217;s see regular Oracle JDK in action.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">I start demo application with the following command <code>java -jar build/libs/ratpack-graalvm-demo-all.jar -Dratpack.epoll.disable=true</code></td></tr></table></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">ab -c 200 -n 1000 http://localhost:5050/This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking localhost (be patient)Completed 100 requestsCompleted 200 requestsCompleted 300 requestsCompleted 400 requestsCompleted 500 requestsCompleted 600 requestsCompleted 700 requestsCompleted 800 requestsCompleted 900 requestsCompleted 1000 requestsFinished 1000 requestsServer Software:Server Hostname:        localhostServer Port:            5050Document Path:          /Document Length:        27 bytesConcurrency Level:      200Time taken for tests:   0.335 secondsComplete requests:      1000Failed requests:        0Total transferred:      117000 bytesHTML transferred:       27000 bytesRequests per second:    2985.77 [#/sec] (mean)Time per request:       66.984 [ms] (mean)Time per request:       0.335 [ms] (mean, across all concurrent requests)Transfer rate:          341.15 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    1   1.8      0       7Processing:     5   29  13.3     25      98Waiting:        5   29  13.3     25      94Total:          5   30  13.7     25      98Percentage of the requests served within a certain time (ms)  50%     25  66%     31  75%     36  80%     39  90%     47  95%     56  98%     70  99%     83 100%     98 (longest request)</code></pre></div></div><div class="paragraph"><p>The difference between the cold Oracle JDK and GraalVM is enormous:</p></div><div class="ulist"><ul><li><p><strong>17.93</strong> ms vs. <strong>66.98</strong> ms mean time per request in GraalVM' favour.</p></li><li><p><strong>11153</strong> vs. <strong>2985</strong> requests per second in GraalVM&#8217;s favour.</p></li></ul></div><div class="paragraph"><p>However, letâ€™s be fair - Oracle JDK shows its full potential when JIT jumps in and runs its optimizations. In the next round, we will let it warm up correctly and then we can compare the results. We will run 800 concurrent requests with a total of 500,000 requests, and we are going to do it twice - the first run is used to warm up the JVM so that we take only the second result into account. Let&#8217;s start with GraalVM.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">ab -c 800 -n 500000 http://localhost:5050/This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking localhost (be patient)Completed 50000 requestsCompleted 100000 requestsCompleted 150000 requestsCompleted 200000 requestsCompleted 250000 requestsCompleted 300000 requestsCompleted 350000 requestsCompleted 400000 requestsCompleted 450000 requestsCompleted 500000 requestsFinished 500000 requestsServer Software:Server Hostname:        localhostServer Port:            5050Document Path:          /Document Length:        27 bytesConcurrency Level:      800Time taken for tests:   40.725 secondsComplete requests:      500000Failed requests:        0Total transferred:      58500000 bytesHTML transferred:       13500000 bytesRequests per second:    12277.48 [#/sec] (mean)Time per request:       65.160 [ms] (mean)Time per request:       0.081 [ms] (mean, across all concurrent requests)Transfer rate:          1402.80 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0   37 110.8     25    3130Processing:     3   28   9.4     27     117Waiting:        0   18   8.3     17      90Total:         18   65 112.0     55    3156Percentage of the requests served within a certain time (ms)  50%     55  66%     61  75%     63  80%     64  90%     68  95%     72  98%     84  99%   1072 100%   3156 (longest request)</code></pre></div></div><div class="paragraph"><p>Now let&#8217;s do the same with Oracle JDK.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">ab -c 800 -n 500000 http://localhost:5050/This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking localhost (be patient)Completed 50000 requestsCompleted 100000 requestsCompleted 150000 requestsCompleted 200000 requestsCompleted 250000 requestsCompleted 300000 requestsCompleted 350000 requestsCompleted 400000 requestsCompleted 450000 requestsCompleted 500000 requestsFinished 500000 requestsServer Software:Server Hostname:        localhostServer Port:            5050Document Path:          /Document Length:        27 bytesConcurrency Level:      800Time taken for tests:   35.889 secondsComplete requests:      500000Failed requests:        0Total transferred:      58500000 bytesHTML transferred:       13500000 bytesRequests per second:    13931.95 [#/sec] (mean)Time per request:       57.422 [ms] (mean)Time per request:       0.072 [ms] (mean, across all concurrent requests)Transfer rate:          1591.83 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0   28   8.1     27    1034Processing:     2   30   7.7     30     249Waiting:        0   17   6.9     16     242Total:          6   57   5.3     57    1065Percentage of the requests served within a certain time (ms)  50%     57  66%     58  75%     59  80%     60  90%     62  95%     64  98%     66  99%     68 100%   1065 (longest request)</code></pre></div></div><div class="paragraph"><p>It looks like if we give Oracle JDK enough time to warm up, it runs a little bit more efficient than the GraalVM application. Take a look at these two charts to see the main difference.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/ratpack-graalvm-rps-benchmark.png"><img src="/images/ratpack-graalvm-rps-benchmark.png" alt="ratpack graalvm rps benchmark"></a></div></div></div></div><div class="paragraph"><p>If we compare RPS between cold Oracle JDK and GraalVM, there is no doubt that GraalVM does better. However, if we only give a regular Oracle JDK a chance to warm up, it turns out that it can handle almost 1700 more requests. It&#8217;s a significant difference.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/ratpack-graalvm-latency-benchmark.png"><img src="/images/ratpack-graalvm-latency-benchmark.png" alt="ratpack graalvm latency benchmark"></a></div></div></div></div><div class="paragraph"><p>Latency benchmark also reveals interesting details. GraalVM wins when we compare it to cold Oracle JDK, and we let both applications handle reasonably small traffic (200 requests with a total of 1000). When we increase the number of concurrent requests to 800, and we need to handle the total of 500,000 requests, warmed up Oracle JDK works much better. While GraalVM slows down to the ~65ms per request when we increase the traffic, Oracle JDK speeds up to ~57ms per request.</p></div><div class="paragraph"><p>There are also two things worth mentioning. I&#8217;ve tried to execute more concurrent requests, but it turned out that GraalVM starts throwing <code>IOException</code> when I increased the number of concurrent requests to 1,000.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">[main] INFO ratpack.server.RatpackServer - Starting server...[main] INFO ratpack.server.RatpackServer - Building registry...[main] INFO ratpack.server.RatpackServer - Ratpack started for http://localhost:5050[ratpack-compute-2-1] WARN io.netty.channel.DefaultChannelPipeline - An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.java.io.IOException: Accept failedat com.oracle.svm.core.posix.PosixJavaNIOSubstitutions$Util_sun_nio_ch_ServerSocketChannelImpl.accept0(PosixJavaNIOSubstitutions.java:1261)at sun.nio.ch.ServerSocketChannelImpl.accept0(ServerSocketChannelImpl.java:1188)at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:422)at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:250)at io.netty.util.internal.SocketUtils$5.run(SocketUtils.java:110)at io.netty.util.internal.SocketUtils$5.run(SocketUtils.java:107)at java.security.AccessController.doPrivileged(AccessController.java:82)at io.netty.util.internal.SocketUtils.accept(SocketUtils.java:107)at io.netty.channel.socket.nio.NioServerSocketChannel.doReadMessages(NioServerSocketChannel.java:143)at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:75)at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:656)at io.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:556)at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:510)at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:470)at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)at ratpack.exec.internal.DefaultExecController$ExecControllerBindingThreadFactory.lambda$newThread$0(DefaultExecController.java:137)at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)at java.lang.Thread.run(Thread.java:748)at com.oracle.svm.core.thread.JavaThreads.threadStartRoutine(JavaThreads.java:481)at com.oracle.svm.core.posix.thread.PosixJavaThreads.pthreadStartRoutine(PosixJavaThreads.java:193)</code></pre></div></div><div class="paragraph"><p>Oracle JDK at the same time was able to handle 1,000 concurrent requests without any issue.</p></div><div class="paragraph"><p>And the last thing - memory consumption. GraalVM does much better when it comes to memory consumption right after the startup - the demo application consumes around 30 MB after startup on GraalVM and about 90 MB when running on Oracle JDK. However, when the application starts handling firsts requests, memory consumptions jumps significantly - GraalVM consumes around 300 MB, while Oracle JDK consumes around 150 MB only.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I must admit that the final benchmark results surprised me a bit. This demo application is not a rock-solid proof - if we used much larger and much more complicated Ratpack application, we could get completely different results. It proved that in some use cases Ratpack application does not need GraalVM to run fast. GraalVM may offer much faster startup, but fine-tuned and adequately warmed up JDK may perform much better in terms of metrics like RPS or latency in milliseconds.</p></div><div class="paragraph"><p>Summary:</p></div><div class="ulist"><ul><li><p>GraalVM runs much faster compared to cold JDK. This is a good news for things like FaaS or running non-daemon like programs - you don&#8217;t have to wait until JIT does it job to optimize runtime environment.</p></li><li><p>GraalVM seems to allocate much more memory while running the demo program. It starts with much smaller memory footprint at the beginning, but when the benchmark is over, Oracle JDK consumed around 170 MB while GraalVM was consuming ~300 MB of the memory.</p></li></ul></div><div class="paragraph"><p>I hope you learned something new from this blog post. Iâ€™m pleased I have finally run the Ratpack example on GraalVM. It took me hours to make it running, and I almost gave up, but I couldn&#8217;t accept the failure. The final result makes me happy even more. Itâ€™s 06:03 AM. Time to go to sleep. See you soon!</p></div><div class="video-container"><iframe width="560" height="315" src="https://www.youtube.com/embed/aOszDmbSsyM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;The journey inside the exciting world of &lt;a href=&quot;https://www.graalvm.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GraalVM&lt;/a&gt; continues. Today I would like to share with you results of running &lt;a href=&quot;https://ratpack.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ratpack&lt;/a&gt; on GraalVM experiment. You are going to learn how to build a native binary of a simple &quot;Hello, World!&quot; Ratpack application. In the end we are going to run some benchmarks to see if running GraalVM executable produces better results than running JAR on a regular Oracle JDK.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Ratpack Cookbook" scheme="https://e.printstacktrace.blog/categories/ratpack-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="ratpack" scheme="https://e.printstacktrace.blog/tags/ratpack/"/>
    
      <category term="graalvm" scheme="https://e.printstacktrace.blog/tags/graalvm/"/>
    
      <category term="native-image" scheme="https://e.printstacktrace.blog/tags/native-image/"/>
    
      <category term="non-blocking" scheme="https://e.printstacktrace.blog/tags/non-blocking/"/>
    
  </entry>
  
  <entry>
    <title>GraalVM native image inside docker container - does it make sense?</title>
    <link href="https://e.printstacktrace.blog/graalvm-native-image-inside-docker-container-does-it-make-sense/"/>
    <id>https://e.printstacktrace.blog/graalvm-native-image-inside-docker-container-does-it-make-sense/</id>
    <published>2019-01-19T12:19:22.000Z</published>
    <updated>2019-01-19T12:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>We have learned how to create <a href="https://www.graalvm.org/" target="_blank" rel="noopener">GraalVM</a> native image from standalone Groovy script <a href="/graalvm-groovy-grape-creating-native-image-of-standalone-script/" title="in the previous blog post">in the previous blog post</a>. Today we continue the experiments, and this time we are going to create a <a href="https://www.docker.com/why-docker" target="_blank" rel="noopener">Docker</a> image to see what are the benefits and drawbacks of this solution.</p></div><a id="more"></a><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>In the previous blog post, we have created a standalone Groovy script that uses Jsoup library as a dependency. This script connects to the given URL and counts how many links the specified website contains. We saw a significant improvement in execution time - from <strong>1.7 s</strong> (using Groovy command line processor) to <strong>0.2 s</strong> (using GraalVM native image). However, building the final native image required installing GraalVM on our local system. Also, we may need to compile OS-specific executable every time we want to run the program on a different platform or operating system. This is where we start thinking about containerization, and today we are going to dockerize a Groovy script to play around with it.</p></div></div></div><div class="sect1"><h2>Dockerfile</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with defining a Dockerfile<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>. We use official <a href="https://github.com/oracle/docker-images/blob/master/GraalVM/CE/1.0.0-rc11/Dockerfile" target="_blank" rel="noopener">GraalVM docker base image</a>. Inside the image, we install SDKMAN! and Groovy 2.5.2, then we compile the script and create a native executable with GraalVM. Finally, we create an entry point which exposes executable and accepts parameters.</p></div><div class="listingblock"><div class="title">Listing 1. Dockerfile</div><div class="content"><pre class="highlightjs highlight"><code class="language-dockerfile hljs" data-lang="dockerfile">FROM oracle/graalvm-ce:1.0.0-rc11 <i class="conum" data-value="1"></i><b>(1)</b>ADD . /app/ <i class="conum" data-value="2"></i><b>(2)</b>ENV GROOVY_HOME=/root/.sdkman/candidates/groovy/2.5.2 <i class="conum" data-value="3"></i><b>(3)</b>RUN yum install -y zip unzip <i class="conum" data-value="4"></i><b>(4)</b>RUN curl -s "https://get.sdkman.io" | bash <i class="conum" data-value="5"></i><b>(5)</b>RUN bash -c "source $HOME/.sdkman/bin/sdkman-init.sh &amp;&amp; \ <i class="conum" data-value="6"></i><b>(6)</b>    echo \"sdkman_auto_answer=true\" &gt; $SDKMAN_DIR/etc/config &amp;&amp; \ <i class="conum" data-value="7"></i><b>(7)</b>    sdk install groovy 2.5.2 &amp;&amp; \ <i class="conum" data-value="8"></i><b>(8)</b>    groovy -version &amp;&amp; \    cd /app/ &amp;&amp; \    groovyc --configscript=config/compiler.groovy CountLinks.groovy &amp;&amp; \    sh ./compile-native-image.sh"ENTRYPOINT bash -c "cd /app &amp;&amp; ./countlinks.sh $0"</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>The official Oracle GraalVM 1.0.0-RC11 base image</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>We copy all files from current directory to <code>/app</code> directory inside the image</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>We set up required <code>GROOVY_HOME</code> env variable</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>We install <code>zip</code> and <code>unzip</code> (required by SDKMAN!)</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>We install SDKMAN!</td></tr><tr><td><i class="conum" data-value="6"></i><b>6</b></td><td>We init SDKMAN! after successful installation</td></tr><tr><td><i class="conum" data-value="7"></i><b>7</b></td><td>We set auto answer to <code>true</code> so SDKMAN! does not ask as if we want to install Groovy</td></tr><tr><td><i class="conum" data-value="8"></i><b>8</b></td><td>We install Groovy 2.5.2</td></tr></table></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">All files used in this blog post can be found in <a href="https://github.com/wololock/graalvm-groovy-examples/tree/master/grape-script-example" target="_blank" rel="noopener">wololock/graalvm-groovy-examples</a> Git repository.</td></tr></table></div></div></div><div class="sect1"><h2>Building the Docker image</h2><div class="sectionbody"><div class="paragraph"><p>It&#8217;s time to build the Docker image.</p></div><div class="listingblock"><div class="title">Listing 2. Building Docker image with <code>countlinks</code> tag</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">docker build -t countlinks .</code></pre></div></div><script id="asciicast-222451" src="https://asciinema.org/a/222451.js" async></script><div class="paragraph"><p>After approximately 3-4 minutes our Docker image is created and ready to use. You can find it with <code>docker images</code> command. Keep in mind that the created image is almost 2.2 GB because our base Docker image is based on Oracle Linux official docker image.</p></div></div></div><div class="sect1"><h2>Running the container</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s run our program inside the container.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">time docker run --rm --read-only countlinks https://e.printstacktrace.blog <i class="conum" data-value="1"></i><b>(1)</b>Website https://e.printstacktrace.blog contains 96 links.real0m0,810s <i class="conum" data-value="2"></i><b>(2)</b>user0m0,027ssys0m0,021s</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td><code>--rm</code> option removes the container when it exists, <code>--read-only</code> mounts the file system with the read-only mode (we don&#8217;t need write permission in this case)</td></tr></table></div><div class="paragraph"><p>The first thing we notice is that the execution time increased from <strong>0.2 s</strong> to somewhere around <strong>0.8 s</strong>. It means that our program executed as a Docker container runs 4 times slower. Why?</p></div><div class="paragraph"><p>The thing is that creating and starting a new container comes with a cost. It takes around <strong>600 ms</strong> on my computer. For instance, if I run <code>echo</code> command inside the newly created Alpine container (4 MB image), it takes almost 600 ms to complete.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">time docker run --rm --read-only --entrypoint "echo" alpinereal0m0,631suser0m0,030ssys0m0,024s</code></pre></div></div></div></div><div class="sect1"><h2>Executing command inside a running container</h2><div class="sectionbody"><div class="paragraph"><p>There is an alternative approach, however. Instead of creating and starting a new container each time we want to run a program, we can start a container, keep it running and attach and execute a command when needed. Let&#8217;s give it a try. Firstly, we run a container that executes <code>tail -f /var/log/yum.log</code> command to keep it running. We need to override entry point to do so and add <code>-d</code> option to detach from the container. We also use <code>--name</code> parameter to specify the name of this container so that we can use it instead of container ID. Next, we use <code>docker exec</code> to execute another command inside the running container.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">docker run -d --name countlinks --rm --read-only --entrypoint "tail" countlinks -f /var/log/yum.logb75eef8c3a3aa696d87e284fc59600261baaf126c1fd2efc196f4df5ff9a4ee0 <i class="conum" data-value="1"></i><b>(1)</b>time docker exec countlinks cd /app &amp;&amp; time ./countlinks.sh https://e.printstacktrace.blogreal0m0,100s <i class="conum" data-value="2"></i><b>(2)</b>user0m0,024ssys0m0,014sWebsite https://e.printstacktrace.blog contains 96 links.real0m0,209s <i class="conum" data-value="3"></i><b>(3)</b>user0m0,021ssys0m0,008s</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Container ID returned when detaching from the container.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Time consumed by attaching <code>docker exec</code> to the running container</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>Time consumed by running the command inside the container</td></tr></table></div><div class="paragraph"><p>In this case, we use <code>time</code> command twice. The first one counts the time of attaching to the running container, while the second one counts the time of the inner command execution. We see that it produces a much better result - attaching to the container takes around 110 ms. So the total execution time takes approximately <strong>300 ms average</strong>. It is still slower comparing to the result we get when running native executable outside the container, but in most cases, 110 ms is an acceptable cost.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>So is it worth dockerizing GraalVM native images? It depends. If our goal is to produce an executable that completes in a blink of an eye, and where every millisecond counts - running the command inside a container won&#8217;t be the best choice. However, if this is not our case, we can benefit from dockerizing the native image. It allows us building the executable without having GraalVM or Groovy installed on the computer - it only requires Docker on board. It also makes the distribution of the executable easier - the image once created and pushed to the repository can be reused easily.</p></div><div class="paragraph"><p>And last but not least - dockerizing native executable means that we benefit from ahead-of-time compilation and much lower memory footprint. However, we always have to be careful when it comes to running any Java program inside the container - things like available resources (CPU, memory), secure access or networking may cause some issues. You just have to consider all pros and cons when choosing one option over another.</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://docs.docker.com/engine/reference/builder/" class="bare" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;We have learned how to create &lt;a href=&quot;https://www.graalvm.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GraalVM&lt;/a&gt; native image from standalone Groovy script &lt;a href=&quot;/graalvm-groovy-grape-creating-native-image-of-standalone-script/&quot; title=&quot;in the previous blog post&quot;&gt;in the previous blog post&lt;/a&gt;. Today we continue the experiments, and this time we are going to create a &lt;a href=&quot;https://www.docker.com/why-docker&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker&lt;/a&gt; image to see what are the benefits and drawbacks of this solution.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="graalvm" scheme="https://e.printstacktrace.blog/tags/graalvm/"/>
    
      <category term="native-image" scheme="https://e.printstacktrace.blog/tags/native-image/"/>
    
      <category term="grape" scheme="https://e.printstacktrace.blog/tags/grape/"/>
    
      <category term="docker" scheme="https://e.printstacktrace.blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>GraalVM with Groovy and Grape - creating native image of a standalone script</title>
    <link href="https://e.printstacktrace.blog/graalvm-groovy-grape-creating-native-image-of-standalone-script/"/>
    <id>https://e.printstacktrace.blog/graalvm-groovy-grape-creating-native-image-of-standalone-script/</id>
    <published>2019-01-16T14:14:42.000Z</published>
    <updated>2019-01-19T09:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p><a href="https://www.graalvm.org/" target="_blank" rel="noopener">GraalVM</a> 1.0.0-RC11 was released yesterday, and I thought it would be an excellent excuse to play around with it a while. I decided to create a simple Groovy script that uses <a href="http://docs.groovy-lang.org/latest/html/documentation/grape.html" target="_blank" rel="noopener">Grape dependency management</a> system to load an external library and create a standalone native image from it. I thought it wouldn&#8217;t be possible, but luckily - I was wrong.</p></div><a id="more"></a><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">The source code of the examples explained below can be found here <a href="https://github.com/wololock/graalvm-groovy-examples/tree/master/grape-script-example" target="_blank" rel="noopener">wololock/graalvm-groovy-examples</a></td></tr></table></div><div class="sect1"><h2>Prerequisites</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with defining runtime environment.</p></div><div class="ulist"><ul><li><p><strong>GraalVM</strong> 1.0.0-RC11 (the most recent version available while writing this blog post)</p></li><li><p><strong>Groovy</strong> 2.5.2</p></li></ul></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">I use a great command line tool called <a href="https://sdkman.io/" target="_blank" rel="noopener">SDKMAN!</a> to install both, GraalVM JDK and Groovy library. It allows me to install GraalVM with the following command: <code>sdk install java 1.0.0-rc-11-grl</code> and then I can switch to this Java version for current shell session with <code>sdk use java 1.0.0-rc-11-grl</code>.</td></tr></table></div></div></div><div class="sect1"><h2>The code</h2><div class="sectionbody"><div class="paragraph"><p>In this article, I will use a reasonably simple Groovy script. This script expects a single command line argument - a website URL, and it displays to the console the information about how many links given website contains. Nothing fancy, but you probably see how we could extend this example to do something more useful.</p></div><div class="listingblock"><div class="title">Listing 1. src/CountLinks.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">#!groovyimport org.jsoup.Jsoupimport org.jsoup.nodes.Document@Grab(group='org.jsoup', module='jsoup', version='1.11.3')final String url = args[0]final Document doc = Jsoup.connect(url).get()final int links = doc.select("a").size()println "Website ${url} contains ${links} links."</code></pre></div></div><div class="paragraph"><p>We can run it and see how much time it took to produce the output.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; time groovy CountLinks.groovy https://e.printstacktrace.blogWebsite https://e.printstacktrace.blog contains 95 links.groovy CountLinks.groovy https://e.printstacktrace.blog  6,29s user 0,26s system 390% cpu 1,677 total</code></pre></div></div><div class="paragraph"><p>It took around <strong>1.7 seconds</strong> to produce the result. Quite long, especially for a script that does not do much work. We can assume that network communication consumed around 200 milliseconds, according to <code>curl</code> results.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; time curl -o /tmp/output "https://e.printstacktrace.blog"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100 23256    0 23256    0     0  23256      0 --:--:-- --:--:-- --:--:--  118kcurl -o /tmp/output "https://e.printstacktrace.blog"  0,02s user 0,01s system 10% cpu 0,206 total</code></pre></div></div><div class="paragraph"><p>It looks like that starting JVM and running Grape dependency manager takes around 1.5 seconds in this case. Let&#8217;s try to improve the performance by executing our script as a Java compiled class.</p></div></div></div><div class="sect1"><h2>Compiling script to Java bytecode</h2><div class="sectionbody"><div class="paragraph"><p>We need to explain one important thing. Grape dependency manager has some limitations<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>, and it does not work without Groovy class loader. There is a configuration annotation called <code>@GrabConfig(systemClassLoader = true)</code>, but it does not have any effect when we compile the script to a Java bytecode class file. A script containing this annotation generates the same bytecode as the one that misses it. If this annotation had any effect when running compiled bytecode as a Java program, then we could use <code>-Djava.system.class.loader</code> to specify the Groovy class loader.</p></div><div class="paragraph"><p>Here is the full Java command (with configured classpath) and the error Grape library throws because of the invalid class loader:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; java -Djava.system.class.loader=groovy.lang.GroovyClassLoader -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar:$HOME/.m2/repository/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar" CountLinks https://e.printstacktrace.blogException in thread "main" java.lang.ExceptionInInitializerErrorCaused by: java.lang.RuntimeException: No suitable ClassLoader found for grabat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)at java.lang.reflect.Constructor.newInstance(Constructor.java:423)...at org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite.invoke(StaticMetaMethodSite.java:46)at org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite.callStatic(StaticMetaMethodSite.java:102)at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:55)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:197)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:217)at CountLinks.&lt;clinit&gt;(CountLinks.groovy)</code></pre></div></div><div class="paragraph"><p>However, there is workaround we can apply. We can turn off Grape dependency manager with <code>-Dgroovy.grape.enabled=false</code> option and we can add Jsoup library JAR file to the classpath manually instead. Let&#8217;s give it a shot and see what happens.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">java -Dgroovy.grape.enable=false -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar:$HOME/.groovy/grapes/org.jsoup/jsoup/jars/jsoup-1.11.3.jar" CountLinks https://e.printstacktrace.blogWebsite https://e.printstacktrace.blog contains 95 links.</code></pre></div></div><div class="paragraph"><p>In this case, we only added <code>groovy-all-2.5.2.jar</code> and <code>jsoup-1.11.3.jar</code> to execute the script successfully. Measuring execution time of the compiled Java program without Grape dependency manager shown that it takes around <strong>1 second</strong> in average to produce the same output as it was before. We still suffer from JVM boot time, but we can improve in this area as well. It&#8217;s time to create GraalVM native image.</p></div></div></div><div class="sect1"><h2>Creating GraalVM native image</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s use the existing CountLinks.class file to create a GraalVM native image from it. We need two JSON files containing reflection configuration for GraalVM. The first one <a href="https://gist.github.com/wololock/e99d748e724bf5ae6ce930c1b8cb9a90" target="_blank" rel="noopener">can be found here</a>, and it contains a configuration of all dynamically generated runtime methods for Groovy 2.5.2. The second one contains only Groovy script class we created.</p></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">You can also generate <code>dgm.json</code> file on your own <a href="https://gist.github.com/wololock/ac83a8196a8252fbbaacf4ac84e10b36" target="_blank" rel="noopener">using the following Groovy script</a>.</td></tr></table></div><div class="listingblock"><div class="title">Listing 2. src/countlinks.json</div><div class="content"><pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">[  {    "name": "CountLinks",    "allDeclaredConstructors": true,    "allPublicConstructors": true,    "allDeclaredMethods": true,    "allPublicMethods": true  }]</code></pre></div></div><div class="listingblock"><div class="title">Listing 3. Creating native image</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; native-image -Dgroovy.grape.enable=false \    --enable-url-protocols=https \    --allow-incomplete-classpath \    -H:+AllowVMInspection \    -H:+ReportUnsupportedElementsAtRuntime \    -H:ReflectionConfigurationFiles=dgm.json,countlinks.json \    --no-server \    -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar:$HOME/.groovy/grapes/org.jsoup/jsoup/jars/jsoup-1.11.3.jar" \    CountLinks[countlinks:305]    classlist:   2,110.17 ms[countlinks:305]        (cap):     998.28 ms[countlinks:305]        setup:   2,746.31 ms[countlinks:305]   (typeflow):  47,883.31 ms[countlinks:305]    (objects): 107,634.87 ms[countlinks:305]   (features):   1,475.31 ms[countlinks:305]     analysis: 158,631.80 ms[countlinks:305]     universe:   1,639.31 ms[countlinks:305]      (parse):   5,070.39 ms[countlinks:305]     (inline):   4,234.00 ms[countlinks:305]    (compile):  34,543.96 ms[countlinks:305]      compile:  46,402.57 ms[countlinks:305]        image:  10,556.78 ms[countlinks:305]        write:   1,365.01 ms[countlinks:305]      [total]: 223,632.13 ms</code></pre></div></div><div class="paragraph"><p>The native image generation succeeds. Let&#8217;s run it.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; ./countlinks https://e.printstacktrace.blogException in thread "main" groovy.lang.MissingMethodException: No signature of method: static org.codehaus.groovy.runtime.InvokerHelper.runScript() is applicable for argument types: (Class, [Ljava.lang.String;) values: [class CountLinks, [https://e.printstacktrace.blog]]at groovy.lang.MetaClassImpl.invokeStaticMissingMethod(MetaClassImpl.java:1528)at groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1514)at org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:52)at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:136)at CountLinks.main(CountLinks.groovy)</code></pre></div></div><div class="paragraph"><p>No luck. GraalVM throws this exception because at the current stage of the development<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup> it is not possible to invoke any Groovy script class that is not statically compiled. Let&#8217;s fix it. We use compiler configuration script file named <code>compiler.groovy</code>. It adds static compilation and type checking.</p></div><div class="listingblock"><div class="title">Listing 4. src/compiler.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">withConfig(configuration) {    ast(groovy.transform.CompileStatic)    ast(groovy.transform.TypeChecked)}</code></pre></div></div><div class="paragraph"><p>Let&#8217;s recompile the code using compiler configuration script.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; groovyc --configscript=compiler.groovy CountLinks.groovyorg.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:CountLinks.groovy: 7: [Static type checking] - The variable [args] is undeclared. @ line 7, column 20.   final String url = args[0]                      ^1 error</code></pre></div></div><div class="paragraph"><p>Bad luck. The error thrown by the static type checking says that there is no args variable available. We need to modify our initial script to make args variable available.</p></div><div class="listingblock"><div class="title">Listing 5. src/CountLinks.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">#!groovyimport org.jsoup.Jsoupimport org.jsoup.nodes.Document@Grab(group='org.jsoup', module='jsoup', version='1.11.3')final String[] args = getProperty("args") as String[]final String url = args[0]final Document doc = Jsoup.connect(url).get()final int links = doc.select("a").size()println "Website ${url} contains ${links} links."</code></pre></div></div><div class="paragraph"><p>Before we create a native image, let&#8217;s run this statically compiled Groovy script as a Java program to see if it makes any difference comparing to the previous example. It is not a bulletproof benchmark, but it looks like the new bytecode executes in around 830 milliseconds.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; time java -Dgroovy.grape.enable=false -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar:$HOME/.groovy/grapes/org.jsoup/jsoup/jars/jsoup-1.11.3.jar" CountLinks https://e.printstacktrace.blogWebsite https://e.printstacktrace.blog contains 95 links.java -Dgroovy.grape.enable=false -cp  CountLinks   2,59s user 0,13s system 330% cpu 0,823 total</code></pre></div></div><div class="paragraph"><p>Let&#8217;s recreate the native image.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; native-image -Dgroovy.grape.enable=false \    --enable-url-protocols=https \    --allow-incomplete-classpath \    -H:+AllowVMInspection \    -H:+ReportUnsupportedElementsAtRuntime \    -H:ReflectionConfigurationFiles=dgm.json,countlinks.json \    --no-server \    -cp ".:$HOME/.m2/repository/org/codehaus/groovy/groovy/2.5.2/groovy-2.5.2.jar:$HOME/.groovy/grapes/org.jsoup/jsoup/jars/jsoup-1.11.3.jar" \    CountLinks[countlinks:17259]    classlist:   1,989.96 ms[countlinks:17259]        (cap):     989.83 ms[countlinks:17259]        setup:   2,380.31 ms[countlinks:17259]   (typeflow):  42,717.13 ms[countlinks:17259]    (objects): 105,959.35 ms[countlinks:17259]   (features):   1,133.75 ms[countlinks:17259]     analysis: 151,461.35 ms[countlinks:17259]     universe:   1,489.67 ms[countlinks:17259]      (parse):   4,564.73 ms[countlinks:17259]     (inline):   4,501.88 ms[countlinks:17259]    (compile):  33,623.14 ms[countlinks:17259]      compile:  45,452.90 ms[countlinks:17259]        image:   9,294.79 ms[countlinks:17259]        write:     743.83 ms[countlinks:17259]      [total]: 212,978.90 ms</code></pre></div></div><div class="paragraph"><p>And let&#8217;s run it.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">&gt; time ./countlinks https://e.printstacktrace.blogWARNING: The sunec native library, required by the SunEC provider, could not be loaded. This library is usually shipped as part of the JDK and can be found under &lt;JAVA_HOME&gt;/jre/lib/&lt;platform&gt;/libsunec.so. It is loaded at run time via System.loadLibrary("sunec"), the first time services from SunEC are accessed. To use this provider's services the java.library.path system property needs to be set accordingly to point to a location that contains libsunec.so. Note that if java.library.path is not set it defaults to the current working directory.Exception in thread "main" org.codehaus.groovy.runtime.InvokerInvocationException: java.lang.UnsatisfiedLinkError: sun.security.ec.ECDSASignature.verifySignedDigest([B[B[B[B)Z [symbol: Java_sun_security_ec_ECDSASignature_verifySignedDigest or Java_sun_security_ec_ECDSASignature_verifySignedDigest___3B_3B_3B_3B]at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:111)at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:326)at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1235)at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)at org.codehaus.groovy.runtime.InvokerHelper.invokePogoMethod(InvokerHelper.java:1018)at org.codehaus.groovy.runtime.InvokerHelper.invokeMethod(InvokerHelper.java:1001)at org.codehaus.groovy.runtime.InvokerHelper.runScript(InvokerHelper.java:423)at CountLinks.main(CountLinks.groovy)Caused by: java.lang.UnsatisfiedLinkError: sun.security.ec.ECDSASignature.verifySignedDigest([B[B[B[B)Z [symbol: Java_sun_security_ec_ECDSASignature_verifySignedDigest or Java_sun_security_ec_ECDSASignature_verifySignedDigest___3B_3B_3B_3B]at com.oracle.svm.jni.access.JNINativeLinkage.getOrFindEntryPoint(JNINativeLinkage.java:145)at com.oracle.svm.jni.JNIGeneratedMethodSupport.nativeCallAddress(JNIGeneratedMethodSupport.java:54)</code></pre></div></div><div class="paragraph"><p>Another error. We already used to it, right? :) This time the error we see is entirely expected. GraalVM does not support HTTPS protocol by default<sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnotedef_3" title="View footnote.">3</a>]</sup>, that is why we had to add <code>--enable-url-protocols=https</code>. However, the image we have built does not include required native library. It tries to load it, but it uses the current working directory, and it fails. The solution is simple - we need to add <code>-Djava.library.path</code> in the command line, and we are good to go.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">&gt; time ./countlinks -Djava.library.path=$JAVA_HOME/jre/lib/amd64 https://e.printstacktrace.blogWebsite https://e.printstacktrace.blog contains 95 links../countlinks -Djava.library.path=$JAVA_HOME/jre/lib/amd64   0,02s user 0,01s system 18% cpu 0,196 total</code></pre></div></div><div class="paragraph"><p>Finally! <strong>It worked!</strong> Running the program several times shows that the average execution time is around <strong>200 ms</strong> (the best time recorded: <strong>151 ms</strong>). Our program is still affected by network latency, but this is something we cannot do anything with. However, we reduced the total execution time from <strong>1.7 s</strong> to <strong>0.2 s</strong>, using almost the same script (we only have to apply the changes required by static compilation).</p></div><script id="asciicast-Q4kI1S3hKDfTvGBOdgkAIAv0q" src="https://asciinema.org/a/Q4kI1S3hKDfTvGBOdgkAIAv0q.js" async></script></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Groovy and Grape dependency management is a powerful pair of tools. And even if we can&#8217;t use Grape directly in the Java program, or we can&#8217;t invoke dynamic Groovy script in the GraalVM, we can still use almost the same bytecode and generate a standalone native image to remove the cost of the JVM boot and Grape dependency check.</p></div><div class="paragraph"><p>Of course, these benefits don&#8217;t come without a cost. The size of the generated native image is 50 MB, while the total size of the Groovy script and the two JAR dependencies it uses is around 5,6 MB. Also, the Groovy script you may want to compile to the native image might require some reworking to make it compatible with static compilation. So for some of the scripts, this might be not possible to do.</p></div><div class="paragraph"><p>I hope you&#8217;ve enjoyed reading this article and you&#8217;ve learned something useful from it. Please share your thoughts in the comments section below. I would love to hear your opinion.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Continue reading - <a href="/graalvm-native-image-inside-docker-container-does-it-make-sense/" title="GraalVM native image inside docker container - does it make sense?">GraalVM native image inside docker container - does it make sense?</a></td></tr></table></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md" class="bare" target="_blank" rel="noopener">https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="https://github.com/oracle/graal/issues/708" class="bare" target="_blank" rel="noopener">https://github.com/oracle/graal/issues/708</a></div><div class="footnote" id="_footnotedef_3"><a href="#_footnoteref_3">3</a>. <a href="https://github.com/oracle/graal/blob/master/substratevm/URL-PROTOCOLS.md#https-support" class="bare" target="_blank" rel="noopener">https://github.com/oracle/graal/blob/master/substratevm/URL-PROTOCOLS.md#https-support</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.graalvm.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GraalVM&lt;/a&gt; 1.0.0-RC11 was released yesterday, and I thought it would be an excellent excuse to play around with it a while. I decided to create a simple Groovy script that uses &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/grape.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Grape dependency management&lt;/a&gt; system to load an external library and create a standalone native image from it. I thought it wouldn&amp;#8217;t be possible, but luckily - I was wrong.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="graalvm" scheme="https://e.printstacktrace.blog/tags/graalvm/"/>
    
      <category term="native-image" scheme="https://e.printstacktrace.blog/tags/native-image/"/>
    
      <category term="grape" scheme="https://e.printstacktrace.blog/tags/grape/"/>
    
  </entry>
  
  <entry>
    <title>Deep Work - book review</title>
    <link href="https://e.printstacktrace.blog/deep-work-book-review/"/>
    <id>https://e.printstacktrace.blog/deep-work-book-review/</id>
    <published>2018-12-31T15:08:27.000Z</published>
    <updated>2018-12-31T15:08:27.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>This is the second blog post in <em>"Programmer&#8217;s Bookshelf"</em> category, and today I would like to share with you my opinion on the <em>"Deep Work"</em> book by Cal Newport. It&#8217;s not about programming, but it&#8217;s still beneficial to any software developer out there.</p></div><a id="more"></a><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>After first 2 or 3 hours of reading <a href="http://calnewport.com/about/" target="_blank" rel="noopener">Cal Newport</a> "Deep Work" I was under the impression that this book is a manifesto against modern world Internet-oriented society. It argues with the tendency of being always online reachable, continuously exposed to gigabytes of poor quality information, and chasing all possible updates, only because we might miss something important. "Deep Work" encourages to take a few steps back, slow down and think what the most important goals in our life are. In the introductory chapter Cal Newport explains: "This book is best described as an attempt to formalize and explain my attraction to depth over shallowness, and to detail the types of strategies that have helped me act on this attraction.". It&#8217;s important to understand that it is not a silver-bullet or apply-without-questioning kind of book. It&#8217;s author&#8217;s view on the deep work, and he explains it from the specific perspective - a computer science professor at Georgetown University.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/deep-work-book-review-img3.jpg"><img src="/images/deep-work-book-review-img3.jpg" alt="deep work book review img3"></a></div></div></div></div></div></div><div class="sect1"><h2>What is Deep Work?</h2><div class="sectionbody"><div class="paragraph"><p>So, what kind of work is deep work? We can find, let&#8217;s say, a formal definition in the book that says: "Professional activities performed in a state of distraction-free concentration that pushes your cognitive capabilities to their limit. These efforts create new value, improve your skill, and are hard to replicate.". But we can also find a more human-friendly and much better suite definition in it: the type of work that optimizes your performance is deep work. If we combine it with the idea of concentrating on the most important and most valuable activities for most of the time, we can see that deep work supports attempts to making our life more meaningful. I&#8217;ve read many reviews which shared the opinion, that this kind of thinking is caused by a selfish lust for power or something similar. I can&#8217;t agree with that. I see bringing more meaning to life a collaborative activity - if we can&#8217;t share our happiness or success with others, the effort we put to progress is pointless. The better we become, the better results we can produce for others.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><em>"Deep work is at a severe disadvantage in a technopoly because it builds on values like quality, craftsmanship, and mastery that are decidedly old-fashioned and nontechnological."</em></td></tr></table></div></div></div><div class="sect1"><h2>How to practice Deep Work?</h2><div class="sectionbody"><div class="paragraph"><p>The first rule explained in the book focuses on how to work deeply. It starts with an extreme example of Donald Knuth&#8217;s so-called "Monastic Philosophy" where he can dedicate almost 100% of his time to distraction-free and highly-focused work. This type of practice applies to a tiny amount of people worldwide, but there are three more philosophies we can put into action. The first of them called "Bimodal Philosophy" assumes that you can dedicate a significant amount of time during the year to in-depth work (e.g., one or two months a year you take a break from day-to-day practice and during that time you dedicate to the deep work only). The second of them, "The Rhythmic Philosophy" sounds most practical - every regular amount of time (e.g., every day) you dedicate some part of the day to distraction-free deep work. This philosophy is mostly applied to early morning rituals, where you can assign an hour or two to work on something that matters to you most. And the last philosophy Cal Newport describes is called "The Journalistic Philosophy" and he uses Walter Isaacson as an example of a person who can jump into in-depth work mode almost any time he gets inspired. He doesn&#8217;t rate one philosophy over another; it&#8217;s not a competition. It&#8217;s not even a closed list, and it is entirely possible that there are other techniques (or philosophies) that do the work even better. It is mostly about choosing whatever works for us best and taking the best of it.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/deep-work-book-review-img1.jpg"><img src="/images/deep-work-book-review-img1.jpg" alt="deep work book review img1"></a></div></div></div></div></div></div><div class="sect1"><h2>Is "Deep Work" worth reading?</h2><div class="sectionbody"><div class="paragraph"><p>The binary Yes/No answer is - yes. But it depends. I&#8217;ve found "Deep Work" an exciting and practical lecture because it felt like I lost the ability to work with a high level of concentration some time ago. It&#8217;s not revolutionary, and it does not present any ideas you won&#8217;t find in other books, but it still condense many useful and scientific proven information. It might look too wordy, and it could do the same job half size. Also, some of the examples are sound bizarre and very inaccurate (like the ones described with "Embrace boredom" rule). But it doesn&#8217;t change the fact that it presents valuable and useful information to any knowledge-worker.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">My rating on Goodreads.com - <a href="https://www.goodreads.com/review/show/2647838546" target="_blank" rel="noopener">4/5 stars</a></td></tr></table></div></div></div><div class="sect1"><h2>Brain dump: 10 ideas to remember</h2><div class="sectionbody"><div class="olist arabic"><ol class="arabic"><li><p>Define what matters to you most and dedicate most of your attention to progress in these areas (career, family, relationships, personal goals).</p></li><li><p>Define what shallow work means to you and minimize the time you spent on it.</p></li><li><p>When doing a shallow job, do it effectively (e.g., batch responding to e-mails in a single time-box).</p></li><li><p>Don&#8217;t let others define your priorities. You don&#8217;t have to reply to every e-mail someone sent you.</p></li><li><p>Be smart. If social media help you achieve your goals, don&#8217;t reject it. Instead, filter all things and activities that don&#8217;t produce ANY value in your life.</p></li><li><p>You have a finite amount of willpower that becomes depleted as you use it.</p></li><li><p>Track and review the progress of the deep work dedicated toward your most important goals.</p></li><li><p>Use shutdown ritual to program your brain that the work for today is done, and it is the right time to rest and relax. Let your subconscious mind do its job.</p></li><li><p>Train your memory with memorization techniques (worth reading: "Moonwalking with Einstein" by Joshua Foer).</p></li><li><p>Challenge yourself by setting deadlines for all activities to overcome Parkinson&#8217;s law. Use 30-minutes buffers in case an important activity was underestimated and you don&#8217;t want to drop it unfinished.</p></li></ol></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;This is the second blog post in &lt;em&gt;&quot;Programmer&amp;#8217;s Bookshelf&quot;&lt;/em&gt; category, and today I would like to share with you my opinion on the &lt;em&gt;&quot;Deep Work&quot;&lt;/em&gt; book by Cal Newport. It&amp;#8217;s not about programming, but it&amp;#8217;s still beneficial to any software developer out there.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programmer&#39;s Bookshelf" scheme="https://e.printstacktrace.blog/categories/programmer-s-bookshelf/"/>
    
    
      <category term="book" scheme="https://e.printstacktrace.blog/tags/book/"/>
    
      <category term="review" scheme="https://e.printstacktrace.blog/tags/review/"/>
    
      <category term="self-improvement" scheme="https://e.printstacktrace.blog/tags/self-improvement/"/>
    
      <category term="non-fiction" scheme="https://e.printstacktrace.blog/tags/non-fiction/"/>
    
  </entry>
  
  <entry>
    <title>Programming Groovy 2 - book review</title>
    <link href="https://e.printstacktrace.blog/programming-groovy-2-book-review/"/>
    <id>https://e.printstacktrace.blog/programming-groovy-2-book-review/</id>
    <published>2018-12-29T15:05:55.000Z</published>
    <updated>2018-12-29T15:05:55.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>When I get the paperback copy of the <a href="https://pragprog.com/book/vslg2/programming-groovy-2" target="_blank" rel="noopener">"Programming Groovy 2"</a> book back in the June 2017, I was wondering if I can find something new or exciting in the book that was written in July 2013. It took me almost 1,5 year before I have finally put the book on my desk and started reading and playing around with the examples. As a veteran Groovy developer, I have to say - it was worth it!</p></div><a id="more"></a><div class="paragraph"><p>If I have to describe the book in only one sentence, I would say that "Programming Groovy 2" is the most pragmatic and gentle introduction to the Groovy programming language. Instead of explaining all possible features and use cases it focuses on the following major areas:</p></div><div class="ulist"><ul><li><p>a practical introduction to the language,</p></li><li><p>using Groovy to solve day-to-day tasks,</p></li><li><p>experimenting with metaprogramming to get even more from the language.</p></li></ul></div><div class="sect1"><h2>What&#8217;s inside?</h2><div class="sectionbody"><div class="paragraph"><p>In the <strong>first part</strong> of the book, you will learn the differences between Groovy and Java. Reading this part of the book was more exciting back in the days before Java 8 because the concepts like closures or collections bulk operations had no equivalents in the raw Java language. However, it still contains a lot of important and interesting information, like dynamic typing or working with Groovy strings to name a few - something that any newcomer will appreciate and learn a lot from.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/programming-groovy-img2.jpg"><img src="/images/programming-groovy-img2.jpg" alt="programming groovy img2"></a></div></div></div></div><div class="paragraph"><p><strong>Part 2</strong> focuses on the 3 practical use cases: working with XML files, connecting and querying the database, and using Groovy as a scripting language. It also covers one funny, at least for me use case - using Groovy SQL to query Excel document through JDBC interface. I was completely unaware that you can do something like that, I just never worked with Excel documents that way. It would save me much time if I knew that a few years earlier.</p></div><div class="paragraph"><p><strong>Part 3</strong> introduces metaprogramming capabilities and shows various ways you can apply it for your own needs. Starting from simple method injection at the runtime, up to AST transformations applied during the code compilation phase. It explains in details Groovy&#8217;s MOP (meta-object protocol) layer, and if you ever wonder how does Groovy handle dynamic method invocation, the answer is here.</p></div><div class="paragraph"><p><strong>Part 4</strong> closes the book with a few extensive examples of Groovy metaprogramming in action - builders, mocking and building DSLs. The previous part gives a solid foundation to understand the language&#8217;s dynamic nature and capabilities of MOP (and its limitations). The last part of the book puts everything into action making the story complete.</p></div></div></div><div class="sect1"><h2>Who is this book for?</h2><div class="sectionbody"><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/programming-groovy-img1.jpg"><img src="/images/programming-groovy-img1.jpg" alt="programming groovy img1"></a></div></div></div></div><div class="paragraph"><p><a href="https://twitter.com/venkat_s" target="_blank" rel="noopener">Venkat Subramanian</a> has his unique and effective style of teaching. I&#8217;ve read "Programming Groovy 2" after spending 7 years with Groovy, and I still found it interesting and worth reading. The book aged gracefully and even though it covers Groovy version <code>2.1.1</code>, it is still the right choice to start a journey with Groovy with it. It covers fundamental language concepts that didn&#8217;t change much since 2013. So if you want to give Groovy a chance and you are looking for a practical guide - this book is definitely for you. Also, if you are already in the ecosystem and you want to improve your understanding of the language and its powerful features, you will also find "Programming Groovy 2" an exciting lecture. Tons of practical examples, very natural and smooth writing style, and a great learning experience - and all of it in a book with 300 pages. You can work it out in one weekend with the fast pace, or you can relax and split the experience into a several 1-hour long learning sessions. Whatever works for you best.</p></div></div></div><div class="sect1"><h2>Bonus: how did I get my copy of the book?</h2><div class="sectionbody"><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/programming-groovy-img4.jpg"><img src="/images/programming-groovy-img4.jpg" alt="programming groovy img4"></a></div></div></div></div><div class="paragraph"><p>I got my paperback copy in June 2017. I was lucky enough to draw a book prize during <a href="http://day.torun.jug.pl/" target="_blank" rel="noopener">ToruÅ„ JUG Day</a> event with Venkat Subramanian. It was the second time I had a pleasure to meet Venkat in person and spent time on talking not only programming related topics. It was such an excellent experience! Venkat is not only a great teacher but also one of the kindest person I have ever met in the tech industry.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/programming-groovy-img3.jpg"><img src="/images/programming-groovy-img3.jpg" alt="programming groovy img3"></a></div></div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;When I get the paperback copy of the &lt;a href=&quot;https://pragprog.com/book/vslg2/programming-groovy-2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&quot;Programming Groovy 2&quot;&lt;/a&gt; book back in the June 2017, I was wondering if I can find something new or exciting in the book that was written in July 2013. It took me almost 1,5 year before I have finally put the book on my desk and started reading and playing around with the examples. As a veteran Groovy developer, I have to say - it was worth it!&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programmer&#39;s Bookshelf" scheme="https://e.printstacktrace.blog/categories/programmer-s-bookshelf/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="book" scheme="https://e.printstacktrace.blog/tags/book/"/>
    
      <category term="review" scheme="https://e.printstacktrace.blog/tags/review/"/>
    
      <category term="programming" scheme="https://e.printstacktrace.blog/tags/programming/"/>
    
      <category term="reading" scheme="https://e.printstacktrace.blog/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>Spock assertion inside if-statement doesn&#39;t work - why?</title>
    <link href="https://e.printstacktrace.blog/spock-assertion-inside-if-statement-doesnt-work-why/"/>
    <id>https://e.printstacktrace.blog/spock-assertion-inside-if-statement-doesnt-work-why/</id>
    <published>2018-12-27T18:52:37.000Z</published>
    <updated>2018-12-27T18:52:37.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p><a href="http://spockframework.org/" target="_blank" rel="noopener">Spock Framework</a> is one of my favorite tools in the Groovy ecosystem toolbox. It makes writing automated tests a few times more pleasant thanks to its opinionated syntax. From time to time I see some corner cases where Spock behaves unexpectedly. Today I would like to show you one of these corner cases and explains what happens under the hood.</p></div><a id="more"></a><div class="sect1"><h2>The basics</h2><div class="sectionbody"><div class="paragraph"><p>Spock uses a given-when-then structure known from <a href="https://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank" rel="noopener">Behavior-driven development</a>. Its tidy syntax comes with some imposed requirements and limitations, like the one mentioned in the Spock&#8217;s documentation:<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p></div><div class="quoteblock"><blockquote><div class="paragraph"><p>The <code>when</code> and <code>then</code> blocks always occur together. They describe a stimulus and the expected response. Whereas <code>when</code> blocks may contain arbitrary code, <code>then</code> blocks are restricted to <em>conditions</em>, <em>exception conditions</em>, <em>interactions</em>, and <em>variable definitions</em>. A feature method may contain multiple pairs of <code>when</code>-<code>then</code> blocks.</p></div></blockquote></div><div class="paragraph"><p>It states clearly what 4 kinds of statements we can use inside <code>then</code> block. Let&#8217;s take a closer look at all of them.</p></div><div class="sect2"><h3>1. Conditions</h3><div class="listingblock"><div class="title">Listing 1. An example of the condition in the then block</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:expected == result</code></pre></div></div><div class="paragraph"><p>This is a simple expression that compares some <code>result</code> with <code>expected</code> value, which was defined most probably in the <code>given</code> or <code>setup</code> block.</p></div></div><div class="sect2"><h3>2. Exception conditions</h3><div class="listingblock"><div class="title">Listing 2. An example of an exception condition in the then block</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:thrown IllegalArgumentException</code></pre></div></div><div class="paragraph"><p>In this example we define expectation - an exception of a specific type has to be thrown.</p></div></div><div class="sect2"><h3>3. Interactions</h3><div class="listingblock"><div class="title">Listing 3. An example of interaction expectation in the then block</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:1 * foo.bar() &gt;&gt; "Hello!"</code></pre></div></div><div class="paragraph"><p>In this example, we say that we expect that <code>foo.bar()</code> method gets called exactly one time, and it returns <code>"Hello"</code> value.</p></div></div><div class="sect2"><h3>4. Variable definitions</h3><div class="listingblock"><div class="title">Listing 4. An example of variable definition in the then block</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:def expected = 10result == expected</code></pre></div></div><div class="paragraph"><p>So here&#8217;s the last available statement type - variable definition. As you can see you can define any variable inside the <code>then</code> block, however, this is not a good practice. The <code>then</code> block should be as small and smooth as possible, and this variable definition adds nothing else than noise. In some specific use cases, it might make more sense to do so, but it&#8217;s usually a better choice to consider <code>given</code> or <code>setup</code> blocks for variable definitions.</p></div></div></div></div><div class="sect1"><h2>Using if-statement in the <code>then</code> block</h2><div class="sectionbody"><div class="paragraph"><p>Now when we have recapped basic concepts of Spock&#8217;s <code>then</code> block structure, let&#8217;s take a look at some unusual example. Below you can find a simple Spock unit test that contains 3 methods. The expectation is that all of them fail because of unsatisfied assertion.</p></div><div class="listingblock"><div class="title">Listing 5. All of these test methods should fail</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.CompileStaticimport spock.lang.Specification@CompileStaticclass SpockThenSpecialUseCase extends Specification {    def "(1) should fail on expected == result comparison"() {        given:        def expected = "Hello, John!"        when:        def result = "Hello, Joe!"        then:        expected == result    }    def "(2) should fail on expected == result comparison"() {        given:        def expected = "Hello, John!"        when:        def result = "Hello, Joe!"        then:        if (expected) {            expected == result        }    }    def "(3) should fail on expected == result comparison"() {        given:        def expected = "Hello, John!"        when:        def result = "Hello, Joe!"        then:        if (expected) {            assert expected == result        }    }}</code></pre></div></div><div class="paragraph"><p>When we run this test we will see the following result:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/spock-then-if-assertion.png}"><img src="/images/spock-then-if-assertion.png" alt="spock then if assertion"></a></div></div></div></div><div class="paragraph"><p>The second test case didn&#8217;t fail as expected. The answer is clear and straightforward - if-statement does not fit to any of 4 statements we have described in the previous section.</p></div></div></div><div class="sect1"><h2>Looking for an answer</h2><div class="sectionbody"><div class="paragraph"><p>I&#8217;m pretty sure this simple answer does not satisfy your pursuit to better understanding what happens under the hood. Let&#8217;s dig one level down and see what the decompiled bytecode of this class looks like.</p></div><div class="listingblock"><div class="title">Listing 6. Spock test decompiled from <code>.class</code> file to Java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//import groovy.lang.GroovyObject;import org.codehaus.groovy.runtime.ScriptBytecodeAdapter;import org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation;import org.spockframework.runtime.ErrorCollector;import org.spockframework.runtime.SpockRuntime;import org.spockframework.runtime.ValueRecorder;import org.spockframework.runtime.model.BlockKind;import org.spockframework.runtime.model.BlockMetadata;import org.spockframework.runtime.model.FeatureMetadata;import org.spockframework.runtime.model.SpecMetadata;import spock.lang.Specification;@SpecMetadata(    filename = "SpockThenSpecialUseCase.groovy",    line = 4)public class SpockThenSpecialUseCase extends Specification implements GroovyObject {    public SpockThenSpecialUseCase() {    }    @FeatureMetadata(        line = 7,        name = "(1) should fail on expected == result comparison",        ordinal = 0,        blocks = {@BlockMetadata(    kind = BlockKind.SETUP,    texts = {}), @BlockMetadata(    kind = BlockKind.WHEN,    texts = {}), @BlockMetadata(    kind = BlockKind.THEN,    texts = {})},        parameterNames = {}    )    public void $spock_feature_0_0() { <i class="conum" data-value="1"></i><b>(1)</b>        ErrorCollector $spock_errorCollector = new ErrorCollector(false);        ValueRecorder $spock_valueRecorder = new ValueRecorder();        Object var10000;        try {            String expected = "Hello, John!";            String result = "Hello, Joe!";            try {                SpockRuntime.verifyCondition($spock_errorCollector, $spock_valueRecorder.reset(), "expected == result", Integer.valueOf(15), Integer.valueOf(9), (Object)null, $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(2)), ScriptBytecodeAdapter.compareEqual($spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(0)), expected), $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(1)), result))));                var10000 = null;            } catch (Throwable var14) {                SpockRuntime.conditionFailedWithException($spock_errorCollector, $spock_valueRecorder, "expected == result", Integer.valueOf(15), Integer.valueOf(9), (Object)null, var14);                var10000 = null;            } finally {                ;            }            ScriptBytecodeAdapter.invokeMethod0(SpockThenSpecialUseCase.class, ((SpockThenSpecialUseCase)this).getSpecificationContext().getMockController(), (String)"leaveScope");        } finally {            $spock_errorCollector.validateCollectedErrors();            var10000 = null;        }    }    @FeatureMetadata(        line = 18,        name = "(2) should fail on expected == result comparison",        ordinal = 1,        blocks = {@BlockMetadata(    kind = BlockKind.SETUP,    texts = {}), @BlockMetadata(    kind = BlockKind.WHEN,    texts = {}), @BlockMetadata(    kind = BlockKind.THEN,    texts = {})},        parameterNames = {}    )    public void $spock_feature_0_1() { <i class="conum" data-value="2"></i><b>(2)</b>        String expected = "Hello, John!";        String result = "Hello, Joe!";        if (DefaultTypeTransformation.booleanUnbox(expected)) {            ScriptBytecodeAdapter.compareEqual(expected, result);        }        ScriptBytecodeAdapter.invokeMethod0(SpockThenSpecialUseCase.class, ((SpockThenSpecialUseCase)this).getSpecificationContext().getMockController(), (String)"leaveScope");    }    @FeatureMetadata(        line = 31,        name = "(3) should fail on expected == result comparison",        ordinal = 2,        blocks = {@BlockMetadata(    kind = BlockKind.SETUP,    texts = {}), @BlockMetadata(    kind = BlockKind.WHEN,    texts = {}), @BlockMetadata(    kind = BlockKind.THEN,    texts = {})},        parameterNames = {}    )    public void $spock_feature_0_2() { <i class="conum" data-value="3"></i><b>(3)</b>        ErrorCollector $spock_errorCollector = new ErrorCollector(false);        ValueRecorder $spock_valueRecorder = new ValueRecorder();        Object var10000;        try {            String expected = "Hello, John!";            String result = "Hello, Joe!";            if (DefaultTypeTransformation.booleanUnbox(expected)) {                try {                    SpockRuntime.verifyCondition($spock_errorCollector, $spock_valueRecorder.reset(), "expected == result", Integer.valueOf(40), Integer.valueOf(20), (Object)null, $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(2)), ScriptBytecodeAdapter.compareEqual($spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(0)), expected), $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(1)), result))));                    var10000 = null;                } catch (Throwable var14) {                    SpockRuntime.conditionFailedWithException($spock_errorCollector, $spock_valueRecorder, "expected == result", Integer.valueOf(40), Integer.valueOf(20), (Object)null, var14);                    var10000 = null;                } finally {                    ;                }            }            ScriptBytecodeAdapter.invokeMethod0(SpockThenSpecialUseCase.class, ((SpockThenSpecialUseCase)this).getSpecificationContext().getMockController(), (String)"leaveScope");        } finally {            $spock_errorCollector.validateCollectedErrors();            var10000 = null;        }    }}</code></pre></div></div><div class="paragraph"><p>The Java code doesn&#8217;t look as smooth as Groovy one, but we can quickly spot the most interesting parts. The method <em class="conum" data-value="1"></em> shows what does the decompiled bytecode representation looks like. We can see that the following Spock part:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:expected == result</code></pre></div></div><div class="paragraph"><p>gets replaced by something like this (method call formatted for better readability):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">SpockRuntime.verifyCondition(    $spock_errorCollector,    $spock_valueRecorder.reset(),    "expected == result",    Integer.valueOf(15),    Integer.valueOf(9),    (Object)null,    $spock_valueRecorder.record(        $spock_valueRecorder.startRecordingValue(Integer.valueOf(2)),        ScriptBytecodeAdapter.compareEqual(            $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(0)), expected),            $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(1)), result)        )    ));</code></pre></div></div><div class="paragraph"><p>Spock uses its custom compiler which modifies abstract syntax tree (AST) of your unit test. It checks if the <code>then</code> (and any other) block meets requirements and rewrites it. There are two methods we could start investigation from to get a better understanding of what Spock does under the hood:</p></div><div class="ulist"><ul><li><p><a href="https://github.com/spockframework/spock/blob/spock-1.2/spock-core/src/main/java/org/spockframework/compiler/SpecRewriter.java#L322-L338" target="_blank" rel="noopener"><code>org.spockframework.compiler.SpecRewriter.visitThenBlock()</code></a></p></li><li><p><a href="https://github.com/spockframework/spock/blob/spock-1.2/spock-core/src/main/java/org/spockframework/compiler/DeepBlockRewriter.java#L141-L164" target="_blank" rel="noopener"><code>org.spockframework.compiler.DeepBlockRewriter.handleImplicitCondition()</code></a></p></li></ul></div><div class="paragraph"><p>Now, let&#8217;s take a quick look at the <em class="conum" data-value="2"></em> test case that used if-statement inside the <code>then</code> block and passed:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public void $spock_feature_0_1() {    String expected = "Hello, John!";    String result = "Hello, Joe!";    if (DefaultTypeTransformation.booleanUnbox(expected)) {        ScriptBytecodeAdapter.compareEqual(expected, result);    }    ScriptBytecodeAdapter.invokeMethod0(SpockThenSpecialUseCase.class, ((SpockThenSpecialUseCase)this).getSpecificationContext().getMockController(), (String)"leaveScope");}</code></pre></div></div><div class="paragraph"><p>It looks like not a single line of code got modified the AST. It happened because Spock&#8217;s compiler didn&#8217;t find a valid statement for a <code>then</code> block and thus it didn&#8217;t have to rewrite anything.</p></div><div class="paragraph"><p>A different situation takes place in the example <em class="conum" data-value="3"></em>. Here we have called <code>assert</code> explicitly, and it was an explicit instruction for Spock&#8217;s compiler to modify AST. The if-statement is still here, but the following part:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">then:if (expected) {    assert expected == result}</code></pre></div></div><div class="paragraph"><p>was compiled to a following code (decompiled Java representation):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">if (DefaultTypeTransformation.booleanUnbox(expected)) {    try {        SpockRuntime.verifyCondition(            $spock_errorCollector,            $spock_valueRecorder.reset(),            "expected == result",            Integer.valueOf(40),            Integer.valueOf(20),            (Object)null,            $spock_valueRecorder.record(                $spock_valueRecorder.startRecordingValue(Integer.valueOf(2)),                ScriptBytecodeAdapter.compareEqual(                    $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(0)), expected),                    $spock_valueRecorder.record($spock_valueRecorder.startRecordingValue(Integer.valueOf(1)), result)                )            )        );        var10000 = null;    } catch (Throwable var14) {        SpockRuntime.conditionFailedWithException($spock_errorCollector, $spock_valueRecorder, "expected == result", Integer.valueOf(40), Integer.valueOf(20), (Object)null, var14);        var10000 = null;    } finally {        ;    }}</code></pre></div></div><div class="paragraph"><p>As we can see Spock understands explicit <code>assert</code> instruction and passes its condition to&nbsp;a&nbsp; <code>SpockRuntime.verifyCondition()</code> method as shown above.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I hope you find this article interesting. Don&#8217;t hesitate to leave a comment in the section below. Maybe you have experienced some unexpected Spock behavior - please share your story with the rest of us. Take care and see you next time!</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="http://spockframework.org/spock/docs/1.2/spock_primer.html#_when_and_then_blocks" class="bare" target="_blank" rel="noopener">http://spockframework.org/spock/docs/1.2/spock_primer.html#_when_and_then_blocks</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://spockframework.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spock Framework&lt;/a&gt; is one of my favorite tools in the Groovy ecosystem toolbox. It makes writing automated tests a few times more pleasant thanks to its opinionated syntax. From time to time I see some corner cases where Spock behaves unexpectedly. Today I would like to show you one of these corner cases and explains what happens under the hood.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Tales from debugger" scheme="https://e.printstacktrace.blog/categories/tales-from-debugger/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="spock" scheme="https://e.printstacktrace.blog/tags/spock/"/>
    
      <category term="testing" scheme="https://e.printstacktrace.blog/tags/testing/"/>
    
      <category term="unit-testing" scheme="https://e.printstacktrace.blog/tags/unit-testing/"/>
    
  </entry>
  
  <entry>
    <title>JUnit Assume.assumeNotNull(obj) throws NullPointerException in Groovy - what&#39;s wrong?</title>
    <link href="https://e.printstacktrace.blog/junit-assume-notnull-throws-nullpointerexception-in-groovy-whats-wrong/"/>
    <id>https://e.printstacktrace.blog/junit-assume-notnull-throws-nullpointerexception-in-groovy-whats-wrong/</id>
    <published>2018-12-20T23:49:07.000Z</published>
    <updated>2018-12-20T23:49:07.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Ignoring some of the unit tests when given conditions are not satisfied is a handy feature of a JUnit framework. I guess you have used many times constructions like <code>Assume.assumeTrue(expr)</code> or <code>Assume.assumeNotNull(expr)</code> in your test code. Today I would like to show you one pretty interesting corner case when the usage of <code>Assume.assumeNotNull(expr)</code> throws NPE in the unit test written in Groovy.</p></div><a id="more"></a><div class="paragraph"><p>Let&#8217;s start with a simple example. Below you can find a JUnit test written in Groovy.</p></div><div class="listingblock"><div class="title">Listing 1. src/test/groovy/GroovyAssumeNotNull.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import org.junit.Assumeimport org.junit.Testclass GroovyAssumeNotNull {    @Test    void testAssumeNotNull() {        def name = System.getProperty("something", null)        Assume.assumeNotNull(name)        assert name.length() &gt; 10    }}</code></pre></div></div><div class="paragraph"><p>The idea behind this test is straightforward - if property <code>something</code> does not exist we expect this test case to be ignored. Otherwise, we check if the value stored in this property is longer than 10 characters. Let&#8217;s run the test and see what happens.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-junit-assume-notnull-npe.png"><img src="/images/groovy-junit-assume-notnull-npe.png" alt="groovy junit assume notnull npe"></a></div></div></div></div><div class="paragraph"><p>Seeing <code>NullPointerException</code> in this test is very unexpected. It&#8217;s a bit confusing because the same test written in plain Java behaves as expected.</p></div><div class="listingblock"><div class="title">Listing 2. src/test/java/JavaAssumeNotNull.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import org.junit.Assert;import org.junit.Assume;import org.junit.Test;public class JavaAssumeNotNull {    @Test    public void testAssumeNotNull() {        String name = System.getProperty("something");        Assume.assumeNotNull(name);        Assert.assertTrue(name.length() &gt; 10);    }}</code></pre></div></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/java-junit-assume-notnull.png"><img src="/images/java-junit-assume-notnull.png" alt="java junit assume notnull"></a></div></div></div></div><div class="paragraph"><p>The main question is - what&#8217;s going on?</p></div><div class="sect1"><h2>Wrapping <code>null</code> variables with arrays</h2><div class="sectionbody"><div class="paragraph"><p>To understand in details what&#8217;s happening in this situation we need to take a few steps back. It&#8217;s important to check what does the <code>Assume.assumeNotNull(expr)</code> method looks like.</p></div><div class="listingblock"><div class="title">Listing 3. The implementation of <code>assumeNotNull</code> method</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public static void assumeNotNull(Object... objects) {    assumeThat(Arrays.asList(objects), CoreMatchers.everyItem(CoreMatchers.notNullValue()));}</code></pre></div></div><div class="paragraph"><p>We can see that this method defines parameters as varargs. There are 3 different values (or states) we can expect here:</p></div><div class="ulist"><ul><li><p>non-empty array</p></li><li><p>an empty array</p></li><li><p>a null value</p></li></ul></div><div class="paragraph"><p>Let&#8217;s take a quick look at this simple Java example that explains in which conditions specific values occur:</p></div><div class="listingblock"><div class="title">Listing 4. Five different use cases of invoking method with varargs parameters</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import java.util.Arrays;public class VarargsWrappingExample {    public static void main(String[] args) {        String name1 = "John";        String name2 = null;        foo(name1);        foo(name2);        foo((String) null);        foo((String[]) null);        foo(null);    }    static void foo(String... args) {        System.out.println("args = " + Arrays.toString(args));    }}</code></pre></div></div><div class="paragraph"><p>And here is the output:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">args = [John]args = [null]args = [null]args = nullargs = null</code></pre></div></div><div class="paragraph"><p>We can sum it up with the following observation:</p></div><div class="ulist"><ul><li><p>if we pass a non-array value with its type information to the method that accepts varargs, the value gets wrapped with the array of this specific type,</p></li><li><p>if we pass a value of array type - no additional wrapping with the array is needed</p></li><li><p>if we pass a <code>null</code> value without type information, varargs is represented as <code>null</code>.</p></li></ul></div><div class="paragraph"><p>Now, what happens inside <code>Assume.assumeNotNull(expr)</code> method is the following: it expects a non-empty array as an input, then it transforms this array into a list, and it verifies that all elements of this list are not <code>null</code> values. Otherwise, it ignores the test. It works as expected when the <code>null</code> value gets wrapped with an array because we get a list with just one element - the <code>null</code> value.</p></div><div class="quoteblock"><blockquote><div class="paragraph"><p></p><h4>15.12.4.2. Evaluate Arguments</h4><p></p></div><div class="paragraph"><p>The process of evaluating the argument list differs, depending on whether the method being invoked is a fixed arity method or a variable arity method (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1" target="_blank" rel="noopener">Â§8.4.1</a>).</p></div><div class="paragraph"><p>If the method being invoked is a variable arity method <code>m</code>, it necessarily has <code>n &gt; 0</code> formal parameters. The final formal parameter of m necessarily has type <code>T[]</code> for some <code>T</code>, and m is necessarily being invoked with <code>k â‰¥ 0</code> actual argument expressions.</p></div><div class="paragraph"><p>If <code>m</code> is being invoked with <code>k â‰  n</code> actual argument expressions, or, if <code>m</code> is being invoked with <code>k = n</code> actual argument expressions and the type of the k&#8217;th argument expression is not assignment compatible with <code>T[]</code>, then the argument list (<code>e1</code>, &#8230;&#8203;, <code>en-1</code>, <code>en</code>, &#8230;&#8203;, <code>ek</code>) is evaluated as if it were written as (<code>e1</code>, &#8230;&#8203;, <code>en-1</code>, <code>new |T[]| { en, &#8230;&#8203;, ek }</code>), where <code>|T[]|</code> denotes the erasure (<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.6" target="_blank" rel="noopener">Â§4.6</a>) of <code>T[]</code>.</p></div><div class="paragraph"><p></p><hr><p></p></div><div class="paragraph"><p>Source: <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.4.2" target="_blank" rel="noopener">Java Language Specification, Chapter 15: Expressions</a></p></div></blockquote></div><div class="paragraph"><p>When we finally understand how does the Java varargs wrapping mechanism works, let&#8217;s try to understand the Groovy use case. In contrast to Java&#8217;s static compilation, Groovy is a dynamically typed language by default. It means that <strong>the decision about the variable type is made in the runtime</strong>. And it makes a quite straightforward decision - the method expects an array of objects, a <code>null</code> value is passed, and for Groovy this is direct information that you consciously assigned <code>null</code> to an array. This is the price of the dynamic type system, where the context of specific usage matters.</p></div></div></div><div class="sect1"><h2>The solution</h2><div class="sectionbody"><div class="paragraph"><p>There are at least two ways you can make a Groovy example ignore the test in the same way as the Java example does.</p></div><div class="sect3"><h4>1. Wrap the variable with array and make the type explicit</h4><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import org.junit.Assumeimport org.junit.Testclass GroovyAssumeNotNull {    @Test    void testAssumeNotNull() {        def name = System.getProperty("something", null)        Assume.assumeNotNull([name] as Object[])        assert name.length() &gt; 10    }}</code></pre></div></div><div class="paragraph"><p>In this case, we decide for Groovy that the non-array variable has to be wrapped with an array of the given type.</p></div></div><div class="sect3"><h4>2. Use static compilation</h4><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.CompileStaticimport org.junit.Assumeimport org.junit.Test@CompileStaticclass GroovyAssumeNotNull {    @Test    void testAssumeNotNull() {        def name = System.getProperty("something", null)        Assume.assumeNotNull(name)        assert name.length() &gt; 10    }}</code></pre></div></div><div class="paragraph"><p>If we don&#8217;t use any of Groovy&#8217;s dynamic features, we can consider using static compilation with <code>@CompileStatic</code> annotation.</p></div></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I hope you have learned something useful from this blog post. If there is any specific Groovy related topic you would like to read about, please let me know in the comments section below. Also, don&#8217;t hesitate to share, comment and thumbs up this article, so I can see it was worth spending the time on writing these words on Friday 00:47 AM :-) See you next time!</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Ignoring some of the unit tests when given conditions are not satisfied is a handy feature of a JUnit framework. I guess you have used many times constructions like &lt;code&gt;Assume.assumeTrue(expr)&lt;/code&gt; or &lt;code&gt;Assume.assumeNotNull(expr)&lt;/code&gt; in your test code. Today I would like to show you one pretty interesting corner case when the usage of &lt;code&gt;Assume.assumeNotNull(expr)&lt;/code&gt; throws NPE in the unit test written in Groovy.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="junit" scheme="https://e.printstacktrace.blog/tags/junit/"/>
    
      <category term="testing" scheme="https://e.printstacktrace.blog/tags/testing/"/>
    
      <category term="dynamic-typing" scheme="https://e.printstacktrace.blog/tags/dynamic-typing/"/>
    
      <category term="junit-4" scheme="https://e.printstacktrace.blog/tags/junit-4/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t waste your time - Advent Of Code 2018 is running!</title>
    <link href="https://e.printstacktrace.blog/dont-waste-your-time-advent-of-code-2018-is-running/"/>
    <id>https://e.printstacktrace.blog/dont-waste-your-time-advent-of-code-2018-is-running/</id>
    <published>2018-12-02T16:23:11.000Z</published>
    <updated>2018-12-02T16:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>The <a href="https://adventofcode.com/2018" target="_blank" rel="noopener">4th edition of Advent Of Code</a> just started! In this short blog post, I would like to share with you some of my thoughts about it and why I participate in this event for the second time in the row.</p></div><a id="more"></a><div class="sect1"><h2>Advent Of Code 2017</h2><div class="sectionbody"><div class="paragraph"><p>The last edition of Advent Of Code was the first one I took part in. It was quite a challenging and exciting experience - I have found it as an excellent alternative to everyday programming tasks I do as a software engineer. It was so addictive at some point that I decided to wake up before 6:00 AM to crush the new puzzle right after it got published.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/aoc2017.jpg"><img src="/images/aoc2017.jpg" alt="aoc2017"></a></div></div></div></div></div></div><div class="sect1"><h2>Advent Of Code 2018</h2><div class="sectionbody"><div class="paragraph"><p>Yesterday the 4th edition of <a href="https://adventofcode.com" target="_blank" rel="noopener">Advent Of Code</a> has started. I have to say I was waiting for this day impatiently. This year, however, I took a different strategy - I use this year&#8217;s edition as an opportunity to sharpen <a href="https://github.com/wololock/AoC2018" target="_blank" rel="noopener">my functional programming skills with Haskell</a>. Last year I did it differently. I&#8217;ve focused only on solving the puzzles with the language I use on my daily basis - Java. It still gave me a lot of fun, and I could experiment with the algorithms I usually don&#8217;t have a chance to implement in the projects I work on. But it felt like I lost an excellent opportunity to play around with other programming languages. This year I&#8217;ve decided to take Haskell and apply the concepts I&#8217;ve learned while working with "Programming in Haskell, 2nd edition" book.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I want to encourage you to give the Advent Of Code 2018 a chance if you haven&#8217;t already. It&#8217;s fun to solve those non-trivial puzzles, and it does not require allocating a huge amount of your time. You can start anytime you want - it&#8217;s not about competing with others, it&#8217;s a great learning experience instead. Pick your strategy (learning a new programming language or sharpening the one you already know) and have fun!</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;The &lt;a href=&quot;https://adventofcode.com/2018&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;4th edition of Advent Of Code&lt;/a&gt; just started! In this short blog post, I would like to share with you some of my thoughts about it and why I participate in this event for the second time in the row.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Software developer career boost" scheme="https://e.printstacktrace.blog/categories/software-developer-career-boost/"/>
    
    
      <category term="haskell" scheme="https://e.printstacktrace.blog/tags/haskell/"/>
    
      <category term="career" scheme="https://e.printstacktrace.blog/tags/career/"/>
    
      <category term="learning" scheme="https://e.printstacktrace.blog/tags/learning/"/>
    
      <category term="progress" scheme="https://e.printstacktrace.blog/tags/progress/"/>
    
      <category term="aoc2018" scheme="https://e.printstacktrace.blog/tags/aoc2018/"/>
    
      <category term="advent-of-code" scheme="https://e.printstacktrace.blog/tags/advent-of-code/"/>
    
      <category term="programming" scheme="https://e.printstacktrace.blog/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>List of combinations from a list of lists in Groovy</title>
    <link href="https://e.printstacktrace.blog/list-of-combinations-from-list-of-lists-in-groovy/"/>
    <id>https://e.printstacktrace.blog/list-of-combinations-from-list-of-lists-in-groovy/</id>
    <published>2018-11-27T21:56:23.000Z</published>
    <updated>2018-11-27T21:56:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Groovy has many useful functions built-in, and one of them is <code>Iterable.combinations()</code> that takes aggregated collections and finds all combinations of items. However, if we take a look its source code, we will find out that it was implemented using very imperative approach (nested for-loops + some if-statement). In this blog post I will show you how to implement the same function using Groovy and <a href="/tail-recursive-methods-in-groovy/" title="tail-recursion algorithm">tail-recursion algorithm</a>. Enjoy!</p></div><a id="more"></a><div class="sect1"><h2>An example</h2><div class="sectionbody"><div class="paragraph"><p>Before we jump into a recursive algorithm implementation, let&#8217;s take a look at some examples in Groovy Shell.</p></div><div class="listingblock"><div class="title">Listing 1. Some examples of built-in <code>combinations()</code> function executed in groovysh</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">groovy:000&gt; [[]].combinations()===&gt; []groovy:000&gt; [['a']].combinations()===&gt; [[a]]groovy:000&gt; [['a',1],['b',2],[3,4,5]].combinations()===&gt; [[a, b, 3], [1, b, 3], [a, 2, 3], [1, 2, 3], [a, b, 4], [1, b, 4], [a, 2, 4], [1, 2, 4], [a, b, 5], [1, b, 5], [a, 2, 5], [1, 2, 5]]</code></pre></div></div></div></div><div class="sect1"><h2>Tail-recursive algorithm</h2><div class="sectionbody"><div class="paragraph"><p>Without further ado, let&#8217;s implement a recursive function that takes advantage of a tail call. Our algorithm can be described in just a few steps:</p></div><div class="olist arabic"><ol class="arabic"><li><p>If the input collection is empty, return accumulated result (stop condition).</p></li><li><p>Take the head of the input collection and create n new variants of each list collected in the accumulator by appending elements taken from the head list.</p></li><li><p>Call the function recursively with the tail of the input collection and re-evaluated accumulator.</p></li></ol></div><div class="paragraph"><p>We know the algorithm, let&#8217;s write some code.</p></div><div class="listingblock"><div class="title">Listing 2. Tail-recursive implementation of <code>combinations(list)</code> function</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.CompileStaticimport groovy.transform.TailRecursive/** * Generates combinations of elements. * * Example: * combinations([['a',1], ['b',2], [10,20]]) == [['a','b',10],['a','b',20],['a',2,10],['a',2,20],[1,'b',10],[1,'b',20],[1,2,10],[1,2,20]] * */@TailRecursive@CompileStatic&lt;T&gt; List&lt;List&lt;T&gt;&gt; combinations(final List&lt;List&lt;T&gt;&gt; xss, final List&lt;List&lt;T&gt;&gt; result = [[]]) {    return !xss ? result : combinations(xss.tail(), process(xss.head(), result))}/** * Generates a new accumulator by creating `n` new variants for each * accumulated list by appending elements taken from head list (`xs`). * * Example: * acc = [[]], xs = [1,2,3] =&gt; [[1],[2],[3]] * acc = [[1],[2],[3]], xs = [4,5] =&gt; [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]] * acc = [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]], xs = ['a','b'] =&gt; [[1,4,'a'],[1,4,'b'],[1,5,'a'],[1,5,'b], ..., [3,5,'a'],[3,5,'b']] * ... */@CompileStatic&lt;T&gt; List&lt;List&lt;T&gt;&gt; process(final List&lt;T&gt; xs, final List&lt;List&lt;T&gt;&gt; acc) {    return acc.inject([]) { yss, ys -&gt; yss + xs.collect { x -&gt; ys + x } }}// Let's see if implemented function meets expectationsdef values = [[1,2,3],[4,5],[6,7,8,9]]def expected = [[1,4,6],[1,4,7],[1,4,8],[1,4,9],[1,5,6],[1,5,7],[1,5,8],[1,5,9],[2,4,6],[2,4,7],[2,4,8],[2,4,9],[2,5,6],[2,5,7],[2,5,8],[2,5,9],[3,4,6],[3,4,7],[3,4,8],[3,4,9],[3,5,6],[3,5,7],[3,5,8],[3,5,9]]assert combinations(values) == expected// Let's see if combinations(list) produces the same output as list.combinations()def list = [['a',1], ['b',2], [10,20]]assert (list.combinations()) as Set == (combinations(list) as Set)</code></pre></div></div><div class="paragraph"><p>I made this exemplary code quite verbose, but you can see that after removing the verbosity it could be a one-liner.</p></div></div></div><div class="sect1"><h2>Bonus: Haskell implementation</h2><div class="sectionbody"><div class="paragraph"><p>The recursive algorithm we have implemented using Groovy asks for an example in a functional language. Let&#8217;s see what could the implementation of combinations function look like in Haskell.</p></div><div class="listingblock"><div class="title">Listing 3. Haskell implementation of combinations function</div><div class="content"><pre class="highlightjs highlight"><code class="language-haskell hljs" data-lang="haskell">combinations :: [[a]] -&gt; [[a]]combinations []       = [[]]combinations (xs:xss) = [x : xs' | x &lt;- xs, xs' &lt;- combinations xss]</code></pre></div></div><div class="paragraph"><p>It&#8217;s even more concise and more straightforward - just as expected.</p></div><div class="listingblock"><div class="title">Listing 4. Exemplary usage of combinations function in ghci</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">*Prelude&gt; combinations [[1,2],[3,4],[5,6]][[1,3,5],[1,3,6],[1,4,5],[1,4,6],[2,3,5],[2,3,6],[2,4,5],[2,4,6]]*Prelude&gt; combinations [['a','b'], ['c'], ['d','e','f']]["acd","ace","acf","bcd","bce","bcf"]*Prelude&gt; combinations [][[]]</code></pre></div></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">If you like learning new programming languages or exploring and mastering the one you already know by solving exciting puzzles, there is an excellent opportunity to do so - <strong>Advent Of Code 2018</strong> <a href="https://adventofcode.com/" target="_blank" rel="noopener">starts on Saturday, December 1st</a>. It is 25 days of programming simple solutions to quite challenging problems. You can&#8217;t miss it!</td></tr></table></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Groovy has many useful functions built-in, and one of them is &lt;code&gt;Iterable.combinations()&lt;/code&gt; that takes aggregated collections and finds all combinations of items. However, if we take a look its source code, we will find out that it was implemented using very imperative approach (nested for-loops + some if-statement). In this blog post I will show you how to implement the same function using Groovy and &lt;a href=&quot;/tail-recursive-methods-in-groovy/&quot; title=&quot;tail-recursion algorithm&quot;&gt;tail-recursion algorithm&lt;/a&gt;. Enjoy!&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="haskell" scheme="https://e.printstacktrace.blog/tags/haskell/"/>
    
      <category term="combinations" scheme="https://e.printstacktrace.blog/tags/combinations/"/>
    
      <category term="tail-recursion" scheme="https://e.printstacktrace.blog/tags/tail-recursion/"/>
    
      <category term="tail-call" scheme="https://e.printstacktrace.blog/tags/tail-call/"/>
    
      <category term="recursion" scheme="https://e.printstacktrace.blog/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>Tail-recursive methods in Groovy</title>
    <link href="https://e.printstacktrace.blog/tail-recursive-methods-in-groovy/"/>
    <id>https://e.printstacktrace.blog/tail-recursive-methods-in-groovy/</id>
    <published>2018-11-12T09:53:17.000Z</published>
    <updated>2018-12-18T09:15:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Most of the object-oriented programmers prefer constructing algorithms using imperative style over using recursion. This is pretty obvious in the JVM ecosystem, where imperative iteration is much more efficient than recursive function call chain. However, what if I tell you that in Groovy you can take advantage of clean tail-recursive functions without sacrificing performance? Interested? Let&#8217;s deep dive into it.</p></div><a id="more"></a><div class="sect1"><h2>Factorial function</h2><div class="sectionbody"><div class="paragraph"><p>Calculating factorial of a given number is one of the most popular recursive algorithms examples. In general, this function looks like this:</p></div><div class="listingblock"><div class="title">Listing 1. Exemplary factorial function implementation in Groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package factorialimport groovy.transform.CompileStaticimport groovy.transform.TypeChecked@CompileStatic@TypeCheckedclass Groovy {    static BigInteger factorial(int number) {        if (number == 1) {            return 1        }        return number * factorial(number - 1)    }}</code></pre></div></div><div class="paragraph"><p>The beauty of this example is that it is concise and straightforward. However, it comes with a cost - every recursive call adds a new frame to the call stack, and we can hit stack size limit quickly. JVM crashes with <code>StackOverflowError</code> when it happens. For instance, calculating factorial of number 7,800 hits the stack size limit (the default 1024k for OpenJDK 1.8.0_162).</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-factorial-crash.png"><img src="/images/groovy-factorial-crash.png" alt="groovy factorial crash"></a></div></div></div></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">The limitation of a recursive method call depends on stack size (JVM&#8217;s <code>-Xss</code> option) and its current usage load (e.g., an application that executes multiple recursive functions in parallel may crash for much smaller numbers for the same stack size). The default stack size for OpenJDK 1.8.0_162 is <code>1024k</code>.</td></tr></table></div></div></div><div class="sect1"><h2>Applying tail recursion</h2><div class="sectionbody"><div class="paragraph"><p>The first thing we can do to optimize our factorial function implementation is to apply tail recursion<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>. Using tail call has one significant advantage - it does not require adding a new frame to the call stack, because all computation is done at the moment of executing recursive call. The tail-recursive function requires calling itself at the end and nothing else. Here is what tail-recursive factorial function may look like:</p></div><div class="listingblock"><div class="title">Listing 2. Tail-recursive factorial implemented in Groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package factorialimport groovy.transform.CompileStaticimport groovy.transform.TypeChecked@CompileStatic@TypeCheckedclass Groovy {    static BigInteger factorial(int number, BigInteger acc = 1) {        if (number == 1) {            return acc        }        return factorial(number - 1, acc.multiply(BigInteger.valueOf(number)))    }}</code></pre></div></div><div class="paragraph"><p>The main difference is that the tail call passes the current result of calculation recursively (usually it&#8217;s called <code>accumulator</code>) and it returns the calculated value when the stop condition is satisfied. Let&#8217;s run a few experiments with tail-recursive variant and see if hits the same <code>StackOverflowError</code> as the previous example:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-factorial-tail-recursion-crash.png"><img src="/images/groovy-factorial-tail-recursion-crash.png" alt="groovy factorial tail recursion crash"></a></div></div></div></div><div class="paragraph"><p>As you can see, we are still affected by hitting stack size limit problems for larger numbers. It happens because the compiler does not optimize tail-recursive calls, and probably never will<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup>.</p></div></div></div><div class="sect1"><h2>Groovy&#8217;s <code>@TailRecursive</code></h2><div class="sectionbody"><div class="paragraph"><p>Groovy introduced a new useful annotation in version 2.3 - <code>@TailRecursive</code> <sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnotedef_3" title="View footnote.">3</a>]</sup>. Without further ado, let&#8217;s add this annotation to our example and see how it works.</p></div><div class="listingblock"><div class="title">Listing 3. An example of <code>@TailRecursive</code> annotation usage in Groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package factorialimport groovy.transform.CompileStaticimport groovy.transform.TailRecursiveimport groovy.transform.TypeChecked@CompileStatic@TypeCheckedclass Groovy {    @TailRecursive    static BigInteger factorial(int number, BigInteger acc = 1) {        if (number == 1) {            return acc        }        return factorial(number - 1, acc.multiply(BigInteger.valueOf(number)))    }}</code></pre></div></div><div class="paragraph"><p>Let&#8217;s see if we can calculate factorial of number 75,000:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/groovy-factorial-tail-recursive-annotation.png"><img src="/images/groovy-factorial-tail-recursive-annotation.png" alt="groovy factorial tail recursive annotation"></a></div></div></div></div><div class="paragraph"><p>It didn&#8217;t crash, and it calculated a number of 333,062 digits length. How is it even possible, when the same function without annotation crashes for number 15,000? The answer is relatively simple - Groovy unraveled the code of our tail-recursive function and replaced it with an iterative equivalent. If we decompile the bytecode to a Java code we will find something similar to this one:</p></div><div class="listingblock"><div class="title">Listing 4. Decompiled <code>@TailRecursive</code> method</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//package factorial;import groovy.lang.GroovyObject;import groovy.lang.MetaClass;import java.math.BigInteger;import org.codehaus.groovy.runtime.ScriptBytecodeAdapter;import org.codehaus.groovy.runtime.dgmimpl.NumberNumberMultiply;import org.codehaus.groovy.transform.tailrec.GotoRecurHereException;public class Groovy implements GroovyObject {    public Groovy() {        MetaClass var1 = this.$getStaticMetaClass();        this.metaClass = var1;    }    public static BigInteger factorial(int number, BigInteger acc) {        BigInteger _acc_ = acc;        int _number_ = number;        try {            while(true) {                try {                    while(_number_ != 1) {                        int __number__ = _number_;                        int var7 = _number_ - 1;                        _number_ = var7;                        Number var8 = NumberNumberMultiply.multiply(__number__, _acc_);                        _acc_ = (BigInteger)ScriptBytecodeAdapter.castToType(var8, BigInteger.class);                    }                    BigInteger var4 = _acc_;                    return var4;                } catch (GotoRecurHereException var13) {                    ;                }            }        } finally {            ;        }    }    public static BigInteger factorial(int number) {        return factorial(number, (BigInteger)ScriptBytecodeAdapter.castToType(1, BigInteger.class));    }}</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><code>@TailRecursive</code> annotation can be applied <strong>only</strong> to a function that uses tail call.</td></tr></table></div></div></div><div class="sect1"><h2>Testing <code>@TailRecursive</code> performance</h2><div class="sectionbody"><div class="paragraph"><p>Before we close this article, let&#8217;s make a quick performance test to see if it is worth using tail-recursive functions in Groovy. We use <a href="https://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener">JMH</a> tool to run the benchmark, and we compare two variants:</p></div><div class="olist arabic"><ol class="arabic"><li><p>Groovy tail-recursive factorial function</p></li><li><p>Java imperative iteration factorial variant</p></li></ol></div><div class="listingblock"><div class="title">Listing 5. src/main/groovy/factorial/Groovy.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package factorialimport groovy.transform.CompileStaticimport groovy.transform.TailRecursiveimport groovy.transform.TypeChecked@CompileStatic@TypeCheckedclass Groovy {    @TailRecursive    static BigInteger factorial(int number, BigInteger acc = 1) {        if (number == 1) {            return acc        }        return factorial(number - 1, acc.multiply(BigInteger.valueOf(number)))    }}</code></pre></div></div><div class="listingblock"><div class="title">Listing 6. src/main/java/factorial/Java.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package factorial;import java.math.BigInteger;public class Java {    static BigInteger factorial(int number) {        BigInteger result = BigInteger.ONE;        for (int i = 1; i &lt;= number; i++) {            result = result.multiply(BigInteger.valueOf(i));        }        return result;    }}</code></pre></div></div><div class="paragraph"><p>Here is the benchmark test case:</p></div><div class="listingblock"><div class="title">Listing 7. src/jmh/groovy/factorial/FactorialBench.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">package factorialimport groovy.transform.CompileStaticimport groovy.transform.TypeCheckedimport org.openjdk.jmh.annotations.Benchmarkimport org.openjdk.jmh.annotations.Scopeimport org.openjdk.jmh.annotations.State@State(Scope.Benchmark)@CompileStatic@TypeCheckedclass FactorialBench {    @Benchmark    BigInteger groovy_TailRecursive_factorial_25_000() {        return Groovy.factorial(25000)    }    @Benchmark    BigInteger groovy_TailRecursive_factorial_1_000() {        return Groovy.factorial(1000)    }    @Benchmark    BigInteger java_iterative_factorial_25_000() {        return Java.factorial(25000)    }    @Benchmark    BigInteger java_iterative_factorial_1_000() {        return Java.factorial(1000)    }}</code></pre></div></div><div class="paragraph"><p>Here are the results:</p></div><div class="listingblock"><div class="title">Listing 8. JMH benchmark results</div><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text"># JMH version: 1.21# VM version: JDK 1.8.0_162, Java HotSpot(TM) 64-Bit Server VM, 25.162-b12# VM invoker: /usr/java/jdk1.8.0_162/jre/bin/java# VM options: &lt;none&gt;# Warmup: 1 iterations, 30 s each# Measurement: 120 iterations, 1 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Average time, time/opBenchmark                                             Mode  Cnt    Score    Error  UnitsFactorialBench.groovy_TailRecursive_factorial_1_000   avgt  120    0,209 Â±  0,001  ms/opFactorialBench.groovy_TailRecursive_factorial_25_000  avgt  120  148,170 Â±  0,330  ms/opFactorialBench.java_iterative_factorial_1_000         avgt  120    0,173 Â±  0,001  ms/opFactorialBench.java_iterative_factorial_25_000        avgt  120  129,951 Â±  0,321  ms/op</code></pre></div></div><div class="paragraph"><p>Full log: <a href="https://gist.github.com/wololock/bec6c6cd09c80a2868eca8cce7a016a2" class="bare" target="_blank" rel="noopener">https://gist.github.com/wololock/bec6c6cd09c80a2868eca8cce7a016a2</a></p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Laptop specs: JDK 1.8.0_162 (Java HotSpot&#8482; 64-Bit Server VM, 25.162-b12), Groovy 2.4.12, Intel&#174; Core&#8482; i7-4900MQ CPU @ 2.80GHz (4 cores, cache size 8192 KB), 16 GB RAM, OS: Fedora 26 (64 bit)</td></tr></table></div><div class="paragraph"><p>Java is still faster than Groovy tail-recursive function. The first one offers the best performance, while the second one allows using tail-recursive constructs in your code with just a small (and in most cases acceptable) performance cost. I think this is a reasonable compromise between efficiency and code readability.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>That&#8217;s it for today. I hope you have learned something useful from this article. If there is anything you would like to learn more about Groovy and its useful features, please let me know in the comments section below. Hope to see you next time!</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://en.wikipedia.org/wiki/Tail_call" class="bare" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Tail_call</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="https://softwareengineering.stackexchange.com/questions/272061/why-doesnt-java-have-optimization-for-tail-recursion-at-all" class="bare" target="_blank" rel="noopener">https://softwareengineering.stackexchange.com/questions/272061/why-doesnt-java-have-optimization-for-tail-recursion-at-all</a></div><div class="footnote" id="_footnotedef_3"><a href="#_footnoteref_3">3</a>. <a href="http://docs.groovy-lang.org/2.4.15/html/gapi/groovy/transform/TailRecursive.html" class="bare" target="_blank" rel="noopener">http://docs.groovy-lang.org/2.4.15/html/gapi/groovy/transform/TailRecursive.html</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Most of the object-oriented programmers prefer constructing algorithms using imperative style over using recursion. This is pretty obvious in the JVM ecosystem, where imperative iteration is much more efficient than recursive function call chain. However, what if I tell you that in Groovy you can take advantage of clean tail-recursive functions without sacrificing performance? Interested? Let&amp;#8217;s deep dive into it.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Groovy Cookbook" scheme="https://e.printstacktrace.blog/categories/groovy-cookbook/"/>
    
    
      <category term="jmh" scheme="https://e.printstacktrace.blog/tags/jmh/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="factorial" scheme="https://e.printstacktrace.blog/tags/factorial/"/>
    
      <category term="tail-recursion" scheme="https://e.printstacktrace.blog/tags/tail-recursion/"/>
    
      <category term="tail-call" scheme="https://e.printstacktrace.blog/tags/tail-call/"/>
    
      <category term="recursion" scheme="https://e.printstacktrace.blog/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>Non-blocking and async Micronaut - quick start (part 3)</title>
    <link href="https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part-3/"/>
    <id>https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part-3/</id>
    <published>2018-10-30T09:53:18.000Z</published>
    <updated>2018-10-30T09:53:18.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Welcome to the part 3 of <em>"Non-blocking and async <a href="http://micronaut.io" target="_blank" rel="noopener">Micronaut</a>"</em> article. In the <a href="/micronaut-non-blocking-and-async-part-2/" title="previous post">previous post</a> we have created connection between two services using HTTP protocol and we have run some experiments with handling 10,000 requests. Today we are going to extend this example by setting some timeouts to see what happens.</p></div><a id="more"></a><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Source code of the application described in this blog post can be found here <a href="https://github.com/wololock/micronaut-nonblocking-async-demo" class="bare" target="_blank" rel="noopener">https://github.com/wololock/micronaut-nonblocking-async-demo</a></td></tr></table></div><div class="sect1"><h2>The motivation</h2><div class="sectionbody"><div class="paragraph"><p>Returning 4 recommendations from our mock recommendations-service takes approximately 1250&nbsp;milliseconds. This is actually a huge amount of time. Let&#8217;s assume that we can&#8217;t do anything to decrease latency on requests to product-service, yet we have to return any result in less than 300&nbsp;milliseconds to make any usage of recommendations-service.</p></div></div></div><div class="sect1"><h2>The solution</h2><div class="sectionbody"><div class="paragraph"><p>In the previous post we didn&#8217;t introduce any timeouts in the part responsible for communication between services. Let&#8217;s fix it now by adding 250 milliseconds timeout to the client call:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.recommendation;import io.micronaut.http.annotation.Controller;import io.micronaut.http.annotation.Get;import io.reactivex.Maybe;import io.reactivex.Observable;import io.reactivex.Single;import com.github.wololock.micronaut.products.Product;import com.github.wololock.micronaut.products.ProductClient;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Arrays;import java.util.List;import java.util.concurrent.TimeUnit;@Controller("/recommendations")final class RecommendationController {    private static final Logger log = LoggerFactory.getLogger(RecommendationController.class);    private static final List&lt;String&gt; ids = Arrays.asList("PROD-001", "PROD-002", "PROD-003", "PROD-004");    private final ProductClient productClient;    public RecommendationController(ProductClient productClient) {        this.productClient = productClient;    }    @Get    public Single&lt;List&lt;Product&gt;&gt; getRecommendations() {        log.debug("RecommendationController.getRecommendations() called...");        return Observable.fromIterable(ids)                .flatMap(id -&gt; productClient.getProduct(id)                        .timeout(250, TimeUnit.MILLISECONDS, Maybe.empty()) <i class="conum" data-value="1"></i><b>(1)</b>                        .toObservable()                )                .toList();    }}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>250 milliseconds timeout that returns <code>Maybe.empty()</code> when occurs.</td></tr></table></div><div class="paragraph"><p>We use <code>Maybe.timeout(timeout, unit, fallback)</code> <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> to specify a timeout policy - if client does not return a response in 250 milliseconds we simply drop the connection and return a fallback object. Here is what the request to <code>localhost:8080/recommendations</code> returns now:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-http hljs" data-lang="http">HTTP/1.1 200 OKDate: Tue, 30 Oct 2018 11:18:33 GMTconnection: keep-alivecontent-length: 119content-type: application/json[    {        "id": "PROD-001",        "name": "Micronaut in Action",        "price": 29.99    },    {        "id": "PROD-002",        "name": "Netty in Action",        "price": 31.22    }]</code></pre></div></div><div class="paragraph"><p>We get only two products in return and this is expected, because only these two have a latency that is smaller than 250 milliseconds.</p></div><div class="paragraph"><p>Let&#8217;s execute 10 concurrent requests using <a href="https://github.com/JoeDog/siege" target="_blank" rel="noopener">siege</a>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">siege -c 10 -r 1 http://localhost:8080/recommendations</code></pre></div></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">** SIEGE 4.0.4** Preparing 10 concurrent users for battle.The server is now under siege...HTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.25 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.26 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.26 secs:     119 bytes ==&gt; GET  /recommendationsHTTP/1.1 200     0.26 secs:     119 bytes ==&gt; GET  /recommendationsTransactions:          10 hitsAvailability:      100.00 %Elapsed time:        0.26 secsData transferred:        0.00 MBResponse time:        0.25 secsTransaction rate:       38.46 trans/secThroughput:        0.00 MB/secConcurrency:        9.73Successful transactions:          10Failed transactions:           0Longest transaction:        0.26Shortest transaction:        0.25</code></pre></div></div></div></div><div class="sect1"><h2>Are we done?</h2><div class="sectionbody"><div class="paragraph"><p>We might think that everything is fine and we are ready to deploy to production. Before that let&#8217;s run <a href="https://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener">Apache HTTP Bench</a> just to make sure we are ready to go:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">ab -c 500 -n 2000 http://localhost:8080/recommendations</code></pre></div></div><div class="paragraph"><p>500 concurrent requests, 2,000 in total. The result:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">Server Software:Server Hostname:        localhostServer Port:            8080Document Path:          /recommendationsDocument Length:        119 bytesConcurrency Level:      500Time taken for tests:   5.312 secondsComplete requests:      2000Failed requests:        1570   (Connect: 0, Receive: 0, Length: 1570, Exceptions: 0)Non-2xx responses:      146Total transferred:      339669 bytesHTML transferred:       83586 bytesRequests per second:    376.49 [#/sec] (mean)Time per request:       1328.058 [ms] (mean)Time per request:       2.656 [ms] (mean, across all concurrent requests)Transfer rate:          62.44 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0  544 514.3   1005    1068Processing:   255  546 200.3    545    1236Waiting:      251  546 200.3    545    1236Total:        281 1090 455.2   1290    1772Percentage of the requests served within a certain time (ms)  50%   1290  66%   1400  75%   1467  80%   1501  90%   1652  95%   1733  98%   1755  99%   1764 100%   1772 (longest request)</code></pre></div></div><div class="paragraph"><p>Apache Bench revealed that we have a huge problem with handling 500 concurrent requests - median 1290 milliseconds when we drop connection after 250 ms timeout is not something we would expect here. It also shows that 1570 from 2000 requests were marked as failed based on the content length - it means that some requests returned a response with two products, some with just a single product, and there were most probably some requests with empty result.</p></div><div class="paragraph"><p>Let&#8217;s run one more experiment, but this time with 200 concurrent requests and let&#8217;s take a look at the result <code>ab</code> produced:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">Server Software:Server Hostname:        localhostServer Port:            8080Document Path:          /recommendationsDocument Length:        119 bytesConcurrency Level:      200Time taken for tests:   3.073 secondsComplete requests:      2000Failed requests:        280   (Connect: 0, Receive: 0, Length: 280, Exceptions: 0)Total transferred:      477760 bytesHTML transferred:       222040 bytesRequests per second:    650.91 [#/sec] (mean)Time per request:       307.261 [ms] (mean)Time per request:       1.536 [ms] (mean, across all concurrent requests)Transfer rate:          151.85 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    1   2.3      0      15Processing:   251  269  20.4    261     349Waiting:      251  269  20.4    261     349Total:        251  270  21.1    262     352Percentage of the requests served within a certain time (ms)  50%    262  66%    271  75%    277  80%    281  90%    304  95%    319  98%    335  99%    344 100%    352 (longest request)</code></pre></div></div><div class="paragraph"><p>A smaller concurrent connections number produced much better result - median 262 ms and only 280 failed requests (based on the content length). Why such a huge difference? Well, we need to be aware of one important thing. Even if we drop client connection after 250 ms timeout, the server is still processing all requests executed to product-service. It means that when server receives 500 concurrent requests to <code>localhost:8080/recommendations</code> it processes 1,000 requests that are never returned back to the client. It total it gives us 4,000 orphan requests, which allocate resources, consume them and return back to the even-loop, but never get back to the caller.</p></div></div></div><div class="sect1"><h2>Any solution?</h2><div class="sectionbody"><div class="paragraph"><p>There is no simple solution to this kind of problems. It shows the importance of a proper application monitoring. If we only monitor client requests success rate we would notice, that PROD-003 and PROD-004 products never return to the client. Maybe it is a good reason to drop recommending these products? Let&#8217;s see what happens if we recommend only first two products?</p></div><div class="paragraph"><p>For 500 concurrent requests we get:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">Concurrency Level:      500Time taken for tests:   1.667 secondsComplete requests:      2000Failed requests:        948   (Connect: 0, Receive: 0, Length: 948, Exceptions: 0)Total transferred:      403820 bytesHTML transferred:       149371 bytesRequests per second:    1200.07 [#/sec] (mean)Time per request:       416.641 [ms] (mean)Time per request:       0.833 [ms] (mean, across all concurrent requests)Transfer rate:          236.63 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    3   5.0      0      19Processing:   212  328  44.3    320     416Waiting:      193  328  44.3    320     416Total:        212  331  44.3    326     416Percentage of the requests served within a certain time (ms)  50%    326  66%    347  75%    357  80%    372  90%    399  95%    409  98%    413  99%    415 100%    416 (longest request)</code></pre></div></div><div class="paragraph"><p>For 200 concurrent requests we get:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">Concurrency Level:      200Time taken for tests:   2.613 secondsComplete requests:      2000Failed requests:        0Total transferred:      494000 bytesHTML transferred:       238000 bytesRequests per second:    765.26 [#/sec] (mean)Time per request:       261.349 [ms] (mean)Time per request:       1.307 [ms] (mean, across all concurrent requests)Transfer rate:          184.59 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    1   2.3      0      15Processing:   191  231  27.9    225     279Waiting:      191  231  28.0    225     279Total:        191  231  28.6    225     282Percentage of the requests served within a certain time (ms)  50%    225  66%    252  75%    262  80%    265  90%    270  95%    274  98%    279  99%    280 100%    282 (longest request)</code></pre></div></div><div class="paragraph"><p>It&#8217;s still far from the best results, however 200 concurrent requests produce almost ideal results. With 500 we still see that application has some difficulties and hits timeouts for PROD-002 in some cases. But this is not a bulletproof benchmark and we are only experimenting to see the order of magnitude.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>And that&#8217;s it, we finally reached the end of 3 part article on quick start to non-blocking and async processing in Micronaut. I hope you have enjoyed it and you&#8217;ve learned something useful during this journey. If you are looking for more - let&#8217;s stay in touch. More Micronaut articles are coming soon!</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="http://reactivex.io/RxJava/javadoc/io/reactivex/Maybe.html#timeout-long-java.util.concurrent.TimeUnit-io.reactivex.MaybeSource-" class="bare" target="_blank" rel="noopener">http://reactivex.io/RxJava/javadoc/io/reactivex/Maybe.html#timeout-long-java.util.concurrent.TimeUnit-io.reactivex.MaybeSource-</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Welcome to the part 3 of &lt;em&gt;&quot;Non-blocking and async &lt;a href=&quot;http://micronaut.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Micronaut&lt;/a&gt;&quot;&lt;/em&gt; article. In the &lt;a href=&quot;/micronaut-non-blocking-and-async-part-2/&quot; title=&quot;previous post&quot;&gt;previous post&lt;/a&gt; we have created connection between two services using HTTP protocol and we have run some experiments with handling 10,000 requests. Today we are going to extend this example by setting some timeouts to see what happens.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Micronaut Cookbook" scheme="https://e.printstacktrace.blog/categories/micronaut-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="micronaut" scheme="https://e.printstacktrace.blog/tags/micronaut/"/>
    
      <category term="non-blocking" scheme="https://e.printstacktrace.blog/tags/non-blocking/"/>
    
      <category term="async" scheme="https://e.printstacktrace.blog/tags/async/"/>
    
      <category term="reactive-programming" scheme="https://e.printstacktrace.blog/tags/reactive-programming/"/>
    
      <category term="rxjava" scheme="https://e.printstacktrace.blog/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 type inference in generic methods chain call - what might go wrong?</title>
    <link href="https://e.printstacktrace.blog/java-type-inference-generic-methods-chain-call/"/>
    <id>https://e.printstacktrace.blog/java-type-inference-generic-methods-chain-call/</id>
    <published>2018-10-28T05:50:57.000Z</published>
    <updated>2018-10-28T05:50:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Yesterday I have found this interesting question on Stack Overflow asked by <a href="https://twitter.com/czaszo" target="_blank" rel="noopener">Opal</a>. He faced some <a href="https://stackoverflow.com/q/53008601/2194470" target="_blank" rel="noopener">unexpected compilation errors</a> when dealing with Java generics and Vavr library. It turned out the root cause of the issue there was not the library, but Java compiler itself. This was pretty interesting use case and it motivated me to investigate it even further. This blog post reveals untold truth about Java generics type inference. Are you ready? :)</p></div><a id="more"></a><div class="sect1"><h2>An example</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s define a simple <code>Some&lt;T&gt;</code> generic class:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import java.util.function.Consumer;import java.util.function.Supplier;public final class Some&lt;T&gt; {    private final T value;    private Some(final T t) {        this.value = t;    }    static &lt;T&gt; Some&lt;T&gt; of(final Supplier&lt;T&gt; supplier) {        return new Some&lt;&gt;(supplier.get());    }    public Some&lt;T&gt; peek(final Consumer&lt;T&gt; consumer) {        consumer.accept(value);        return this;    }    public T get() {        return value;    }}</code></pre></div></div><div class="paragraph"><p><code>Some&lt;T&gt;</code> represents some value provided by a supplier function. There is not much we can do we this object - its class provides only two additional methods, <code>peek(Consumer&lt;T&gt; consumer)</code> and <code>get()</code>. But that&#8217;s enough for this demo.</p></div><div class="paragraph"><p>There is one useful thing we would like to take advantage of - <code>peek()</code> method returns <code>Some&lt;T&gt;</code> which in this case is the reference to the caller object. This is very handy and it allows us to create a chain of methods. Let&#8217;s try it out and create <code>Some&lt;List&lt;? extends CharSequence&gt;&gt;</code> object:</p></div><div class="listingblock"><div class="title">Listing 1. Example 1</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">final class SomeExample {    public static void main(String[] args) {        Some&lt;List&lt;? extends CharSequence&gt;&gt; some =                Some.of(() -&gt; Arrays.asList("a", "b", "c"));        System.out.println(some.get());    }}</code></pre></div></div><div class="paragraph"><p>So far so good - this simple example compiles and produces <code>[a, b, c]</code> in the console log when executed. Let&#8217;s modify the code a bit and use <code>peek()</code> method instead <code>System.out.println(some.get())</code>:</p></div><div class="listingblock"><div class="title">Listing 2. Example 2</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">final class SomeExample {    public static void main(String[] args) {        Some&lt;List&lt;? extends CharSequence&gt;&gt; some =                Some.of(() -&gt; Arrays.asList("a", "b", "c")).peek(System.out::println);    }}</code></pre></div></div><div class="paragraph"><p>And now something unexpected happens. Suddenly, compiler started complaining about incompatible types:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/java-type-inference-error.png"><img src="/images/java-type-inference-error.png" alt="java type inference error"></a></div></div></div></div><div class="paragraph"><p>At some point it makes sense, because Java generics are invariant<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup> - Java Language Specification in chapter <strong>4.10. Subtyping</strong> says clearly:</p></div><div class="quoteblock"><blockquote><div class="paragraph"><p>Subtyping does not extend through parameterized types: <code>T</code> &lt;: <code>S</code> does not imply that <code>C&lt;T&gt;</code> &lt;: <code>C&lt;S&gt;</code>.</p></div></blockquote></div><div class="paragraph"><p>So why does the example without <code>peek()</code> method invocation worked?</p></div></div></div><div class="sect1"><h2>Generalized Target-Type Inference</h2><div class="sectionbody"><div class="paragraph"><p>In the first example we have took an advantage of the feature introduced in Java 8 with JSR-335<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup> - Generalized Target-Type Inference, proposed as JEP-101<sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnotedef_3" title="View footnote.">3</a>]</sup>. It added a whole new chapter to the language specification - <strong>Chapter 18. Type Inference</strong><sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnotedef_4" title="View footnote.">4</a>]</sup>. It made Java compiler context aware when it comes to type inference, so it can deduct the expected type from the left side of the expression and subtype<sup class="footnote">[<a id="_footnoteref_5" class="footnote" href="#_footnotedef_5" title="View footnote.">5</a>]</sup> if needed.</p></div><div class="paragraph"><p>It explains why Java compiler is satisfied by reducing expression on the right side to type <code>Some&lt;List&lt;? extends CharSequence&gt;&gt;</code> while assigning value to a <code>some</code> variable:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/java-poly-expressions-in-action.png"><img src="/images/java-poly-expressions-in-action.png" alt="java poly expressions in action"></a></div></div></div></div><div class="paragraph"><p>It shows that even if:</p></div><div class="ulist"><ul><li><p><code>Arrays.asList("a", "b", "c")</code> returns <code>List&lt;String&gt;</code>,</p></li><li><p><code>Some.of(() &#8594; Arrays.asList("a", "b", "c"))</code> returns <code>Some&lt;List&lt;String&gt;&gt;</code>,</p></li></ul></div><div class="paragraph"><p>then assigning it to a type like <code>Some&lt;List&lt;? extends CharSequence&gt;&gt;</code> changes the invocation context and in this context <code>Some.of()</code> returns type defined on the left side of the assignment.</p></div></div></div><div class="sect1"><h2>Limitations</h2><div class="sectionbody"><div class="paragraph"><p>Java 8 type inference system has some limitations. One of them is type inference in chain methods call. JEP-101 mentions this problem, and our second example proves this limitation exists:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/java-type-inference-chain-error.png"><img src="/images/java-type-inference-chain-error.png" alt="java type inference chain error"></a></div></div></div></div><div class="paragraph"><p>When we start chaining methods, compiler delays type inference until the expression on the right side gets evaluated. Last method in the chain receives <code>Some&lt;List&lt;String&gt;&gt;</code> from the first method and it passes it to variable assignment. This is why we see compiler error in this case.</p></div></div></div><div class="sect1"><h2>Solutions</h2><div class="sectionbody"><div class="paragraph"><p>There are two solutions (or workarounds) to this limitation.</p></div><div class="paragraph"><p>1) We can specify explicitly generic type:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">final class SomeExample {    public static void main(String[] args) {        Some&lt;List&lt;? extends CharSequence&gt;&gt; some =                Some.&lt;List&lt;? extends CharSequence&gt;&gt;of(() -&gt; Arrays.asList("a", "b", "c")).peek(System.out::println);    }}</code></pre></div></div><div class="paragraph"><p>In this case we instruct compiler that we expect <code>Some.of()</code> to return this specific type and it gets passed to <code>peek()</code> method which returns previously specified type back.</p></div><div class="paragraph"><p>2) We can break the chain and split assignment from the rest chain calls</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">final class SomeExample {    public static void main(String[] args) {        Some&lt;List&lt;? extends CharSequence&gt;&gt; some = Some.of(() -&gt; Arrays.asList("a", "b", "c"));        some.peek(System.out::println);    }}</code></pre></div></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>And that&#8217;s it. I hope you have learned something useful from this blog post. Don&#8217;t hesitate to leave a comment in the comments section below - please let me know if you are looking for more articles like this one. See you next time!</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnotedef_1"><a href="#_footnoteref_1">1</a>. <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.10" class="bare" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.10</a></div><div class="footnote" id="_footnotedef_2"><a href="#_footnoteref_2">2</a>. <a href="http://cr.openjdk.java.net/~dlsmith/jsr335-final/spec/G.html" class="bare" target="_blank" rel="noopener">http://cr.openjdk.java.net/~dlsmith/jsr335-final/spec/G.html</a></div><div class="footnote" id="_footnotedef_3"><a href="#_footnoteref_3">3</a>. <a href="https://openjdk.java.net/jeps/101" class="bare" target="_blank" rel="noopener">https://openjdk.java.net/jeps/101</a></div><div class="footnote" id="_footnotedef_4"><a href="#_footnoteref_4">4</a>. <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-18.html" class="bare" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jls/se8/html/jls-18.html</a></div><div class="footnote" id="_footnotedef_5"><a href="#_footnoteref_5">5</a>. <a href="http://cr.openjdk.java.net/~dlsmith/jsr335-final/spec/G.html#18.2.3_Subtyping_Constraints_.5BNew.5D" class="bare" target="_blank" rel="noopener">http://cr.openjdk.java.net/~dlsmith/jsr335-final/spec/G.html#18.2.3_Subtyping_Constraints_.5BNew.5D</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Yesterday I have found this interesting question on Stack Overflow asked by &lt;a href=&quot;https://twitter.com/czaszo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Opal&lt;/a&gt;. He faced some &lt;a href=&quot;https://stackoverflow.com/q/53008601/2194470&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;unexpected compilation errors&lt;/a&gt; when dealing with Java generics and Vavr library. It turned out the root cause of the issue there was not the library, but Java compiler itself. This was pretty interesting use case and it motivated me to investigate it even further. This blog post reveals untold truth about Java generics type inference. Are you ready? :)&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/programming-tips/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="java-8" scheme="https://e.printstacktrace.blog/tags/java-8/"/>
    
      <category term="java-generics" scheme="https://e.printstacktrace.blog/tags/java-generics/"/>
    
      <category term="type-inference" scheme="https://e.printstacktrace.blog/tags/type-inference/"/>
    
      <category term="jsr335" scheme="https://e.printstacktrace.blog/tags/jsr335/"/>
    
      <category term="jep101" scheme="https://e.printstacktrace.blog/tags/jep101/"/>
    
  </entry>
  
  <entry>
    <title>Non-blocking and async Micronaut - quick start (part 2)</title>
    <link href="https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part-2/"/>
    <id>https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part-2/</id>
    <published>2018-10-26T11:40:42.000Z</published>
    <updated>2018-10-26T11:40:42.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Welcome to the part 2 of <em>"Non-blocking and async Micronaut"</em> article. In the <a href="https://e.printstacktrace.blog/2018/10/micronaut-non-blocking-and-async-part1/">previous part</a> we have explained the idea behind this demo and we have implemented product-service - a simple endpoint that returns information about some products. Today we will focus on implementing <strong>recommendations-service</strong> part and we will run some simple benchmark tests. Let&#8217;s start!</p></div><a id="more"></a><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Source code of the application described in this blog post can be found here <a href="https://github.com/wololock/micronaut-nonblocking-async-demo" class="bare" target="_blank" rel="noopener">https://github.com/wololock/micronaut-nonblocking-async-demo</a></td></tr></table></div><div class="sect1"><h2>Implementing recommendations-service</h2><div class="sectionbody"><div class="paragraph"><p>We use recommendation-service example more like an excuse to connect with product-service over HTTP. We won&#8217;t spent time on inventing recommendations algorithm - we will simply mock and hard-code products to recommend instead. This is fine for demo purpose and it allows us to focus on what is most important here - service to service communication over HTTP.</p></div><div class="paragraph"><p>We will represent concept of recommendations-service as a single controller class stored in the separate package:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">recommendationâ””â”€â”€ RecommendationController.java</code></pre></div></div><div class="paragraph"><p>Let&#8217;s take a look at its implementation:</p></div><div class="listingblock"><div class="title">Listing 1. src/main/java/com/github/wololock/micronaut/recommendation/RecommendationController.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.recommendation;import com.github.wololock.micronaut.products.Product;import com.github.wololock.micronaut.products.ProductClient;import io.micronaut.http.annotation.Controller;import io.micronaut.http.annotation.Get;import io.reactivex.Observable;import io.reactivex.Single;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Arrays;import java.util.List;@Controller("/recommendations")final class RecommendationController {    private static final Logger log = LoggerFactory.getLogger(RecommendationController.class);    private static final List&lt;String&gt; ids = Arrays.asList( <i class="conum" data-value="1"></i><b>(1)</b>            "PROD-001",            "PROD-002",            "PROD-003",            "PROD-004"    );    private final ProductClient productClient; <i class="conum" data-value="2"></i><b>(2)</b>    public RecommendationController(ProductClient productClient) {        this.productClient = productClient;    }    @Get    public Single&lt;List&lt;Product&gt;&gt; getRecommendations() { <i class="conum" data-value="3"></i><b>(3)</b>        log.debug("RecommendationController.getRecommendations() called...");        return Observable.fromIterable(ids) <i class="conum" data-value="4"></i><b>(4)</b>                .flatMap(id -&gt; productClient.getProduct(id).toObservable()) <i class="conum" data-value="5"></i><b>(5)</b>                .toList(); <i class="conum" data-value="6"></i><b>(6)</b>    }}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>A fixed list of 4 products IDs.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>We use injected <code>ProductClient</code> - Micronaut will generate and compile a client class based on the interface.</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>We return <code>Single&lt;List&lt;Product&gt;&gt;</code> - a reactive type that represents some single value.</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>We start with converting list of IDs to <code>Observable&lt;String&gt;</code></td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>Next we map every ID to a corresponding <code>Product</code> retrieved via HTTP request.</td></tr><tr><td><i class="conum" data-value="6"></i><b>6</b></td><td>We specify the return type to a <code>Single&lt;List&lt;Product&gt;&gt;</code>.</td></tr></table></div><div class="paragraph"><p>The class is very concise as you can see. We start with injection of an implementation of <code>ProductClient</code> interface we have defined in product-service:</p></div><div class="listingblock"><div class="title">Listing 2. src/main/java/com/github/wololock/micronaut/products/ProductClient.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.products;import io.micronaut.http.annotation.Get;import io.micronaut.http.client.annotation.Client;import io.reactivex.Maybe;@Client("/product")public interface ProductClient {    @Get("/{id}")    Maybe&lt;Product&gt; getProduct(final String id);}</code></pre></div></div><div class="paragraph"><p>We don&#8217;t implement this interface explicitly - Micronaut takes care of generating implementing class at the compile time.</p></div><div class="paragraph"><p>The <code>getRecommendations</code> method implements our business logic - it takes a list of IDs and for each ID it calls <code>ProductClient.getProduct(id)</code> and converts <code>Maybe&lt;Product&gt;</code> to <code>Observable&lt;Product&gt;</code> with <code>toObservable()</code> method call. And the last line of this method precises that we want to return a list of products and that&#8217;s it.</p></div><div class="paragraph"><p>Let&#8217;s see it in action. We will start with a single HTTP request (using <a href="https://httpie.org/" target="_blank" rel="noopener">HTTPie</a>):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% http localhost:8080/recommendationsHTTP/1.1 200 OKDate: Fri, 26 Oct 2018 18:31:41 GMTconnection: keep-alivecontent-length: 240content-type: application/json[    {        "id": "PROD-001",        "name": "Micronaut in Action",        "price": 29.99    },    {        "id": "PROD-002",        "name": "Netty in Action",        "price": 31.22    },    {        "id": "PROD-003",        "name": "Effective Java, 3rd edition",        "price": 31.22    },    {        "id": "PROD-004",        "name": "Clean Code",        "price": 31.22    }]</code></pre></div></div><div class="paragraph"><p>We get 4 recommendations in response as expected. And the console log of the application looks like this:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">18:31:40.007 [nioEventLoopGroup-1-2     ] DEBUG - RecommendationController.getRecommendations() called...18:31:40.173 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-001) executed...18:31:40.175 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...18:31:40.178 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-002) executed...18:31:40.178 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-004) executed...18:31:40.297 [RxCachedThreadScheduler-1 ] DEBUG - Product with id PROD-001 ready to return...18:31:40.368 [RxCachedThreadScheduler-3 ] DEBUG - Product with id PROD-002 ready to return...18:31:40.777 [RxCachedThreadScheduler-2 ] DEBUG - Product with id PROD-003 ready to return...18:31:41.379 [RxCachedThreadScheduler-4 ] DEBUG - Product with id PROD-004 ready to return...</code></pre></div></div><div class="paragraph"><p>It took 1372 milliseconds to complete the request. We still use a single event-loop for a computation - that is why <code>nioEventLoopGroup-1-2</code> handled the first 5 requests without blocking. If we process these requests in a blocking manner we would see something like this:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">RecommendationController.getRecommendations() called...ProductController.getProduct(PROD-001) executed...Product with id PROD-001 ready to return...ProductController.getProduct(PROD-003) executed...Product with id PROD-002 ready to return...ProductController.getProduct(PROD-002) executed...Product with id PROD-003 ready to return...ProductController.getProduct(PROD-004) executed...Product with id PROD-004 ready to return...</code></pre></div></div><div class="paragraph"><p>And it would not take 1372 ms but at least 2110 ms (a sum of latencies). Alternatively we would need at least 5 threads to handle this single request to <code>/recommendations</code> endpoint - one thread per connection. I think it shows clearly what is the difference between blocking and non-blocking approach.</p></div></div></div><div class="sect1"><h2>Simulating multiple requests</h2><div class="sectionbody"><div class="paragraph"><p>Handling a single request on <code>/recommendations</code> endpoint isn&#8217;t very challenging for our demo application. Let&#8217;s see what happens if 500 concurrent requests (from 2000 total) reaches the application. To run such test we will use <a href="https://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener">Apache HTTP benchmark tool</a>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">ab -c 500 -n 2000 http://localhost:8080/recommendations</code></pre></div></div><div class="paragraph"><p>This command executes 500 concurrent requests and does it 4 times (2000 requests in total).</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking localhost (be patient)Completed 200 requestsCompleted 400 requestsCompleted 600 requestsCompleted 800 requestsCompleted 1000 requestsCompleted 1200 requestsCompleted 1400 requestsCompleted 1600 requestsCompleted 1800 requestsCompleted 2000 requestsFinished 2000 requestsServer Software:Server Hostname:        localhostServer Port:            8080Document Path:          /recommendationsDocument Length:        240 bytesConcurrency Level:      500Time taken for tests:   7.078 secondsComplete requests:      2000Failed requests:        65   (Connect: 0, Receive: 0, Length: 65, Exceptions: 0)Non-2xx responses:      65Total transferred:      730605 bytesHTML transferred:       473370 bytesRequests per second:    282.57 [#/sec] (mean)Time per request:       1769.468 [ms] (mean)Time per request:       3.539 [ms] (mean, across all concurrent requests)Transfer rate:          100.80 [Kbytes/sec] receivedConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        0    3   5.6      0      23Processing:   436 1376 278.3   1290    1953Waiting:      436 1376 278.3   1290    1953Total:        444 1379 281.1   1290    1961Percentage of the requests served within a certain time (ms)  50%   1290  66%   1379  75%   1433  80%   1703  90%   1811  95%   1870  98%   1943  99%   1956 100%   1961 (longest request)</code></pre></div></div><div class="paragraph"><p>Nothing unexpected happened. Median processing time per request is 1290 ms, which is OK - the longest request to product-service takes 1200 ms, so recommendations-service cannot return a response in shorter time. The longest request took 1961 ms - a decent and acceptable value in this demo.</p></div><div class="paragraph"><p>The most interesting value is not shown directly in this result. We have executed 2000 requests to <code>/recommendations</code> endpoint and it took 7 seconds to complete all requests. However, our application handled not 2000, but 10,000 requests, because every single request to <code>/recommendations</code> causes 4&nbsp;additional requests to <code>/product/PROD-xxx</code>, handled by the same application. It means that our demo application handled ~1429 requests per second. With just a single thread.</p></div><div class="paragraph"><p>Another good information is that handling 10,000 request didn&#8217;t cause significant resources consumption. Below you can find a screen shot taken from JProfiler attached to the application when I have repeated the same <code>ab</code> command 3 times:</p></div><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/micronaut-jprofiler.png"><img src="/images/micronaut-jprofiler.png" alt="micronaut jprofiler"></a></div></div><div class="paragraph"><p>3 spikes on GC activity and CPU load (up to &lt;20% max), and unnoticeable memory consumption increase. Keep in mind that this is not a bulletproof benchmark - I used application running with <code>gradle run</code> and I haven&#8217;t set any useful JVM tweak flags.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Part 2 ends here. In the next (and last) part of this article we will play around with timeouts and see what kind of problems it may introduce. Stay tuned, and until the next time!</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Continue reading here - <a href="/micronaut-non-blocking-and-async-part-3/" title="Non-blocking and async Micronaut - quick start (part 3)">Non-blocking and async Micronaut - quick start (part 3)</a></td></tr></table></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Welcome to the part 2 of &lt;em&gt;&quot;Non-blocking and async Micronaut&quot;&lt;/em&gt; article. In the &lt;a href=&quot;https://e.printstacktrace.blog/2018/10/micronaut-non-blocking-and-async-part1/&quot;&gt;previous part&lt;/a&gt; we have explained the idea behind this demo and we have implemented product-service - a simple endpoint that returns information about some products. Today we will focus on implementing &lt;strong&gt;recommendations-service&lt;/strong&gt; part and we will run some simple benchmark tests. Let&amp;#8217;s start!&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Micronaut Cookbook" scheme="https://e.printstacktrace.blog/categories/micronaut-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="micronaut" scheme="https://e.printstacktrace.blog/tags/micronaut/"/>
    
      <category term="non-blocking" scheme="https://e.printstacktrace.blog/tags/non-blocking/"/>
    
      <category term="async" scheme="https://e.printstacktrace.blog/tags/async/"/>
    
      <category term="reactive-programming" scheme="https://e.printstacktrace.blog/tags/reactive-programming/"/>
    
      <category term="rxjava" scheme="https://e.printstacktrace.blog/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Non-blocking and async Micronaut - quick start (part 1)</title>
    <link href="https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part1/"/>
    <id>https://e.printstacktrace.blog/micronaut-non-blocking-and-async-part1/</id>
    <published>2018-10-25T00:33:37.000Z</published>
    <updated>2018-10-25T00:33:37.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>If you haven&#8217;t heard about <a href="http://micronaut.io/" target="_blank" rel="noopener">Micronaut</a> you have been probably just woken up from deep hibernation. No&nbsp;worries, I&#8217;m joking :) Anyway, Micronaut 1.0 GA <a href="https://twitter.com/micronautfw/status/1054754150292967424" target="_blank" rel="noopener">was released yesterday</a> and it is the right time to play around with it a bit. In this article I would like to show you how easy it is to handle HTTP requests in a non-blocking manner, using just a single computation thread. Interested? Let&#8217;s start!</p></div><a id="more"></a><div class="admonitionblock warning"><table><tr><td class="icon"><i class="fa icon-warning" title="Warning"></i></td><td class="content">This is not a introduction to Micronaut. If you are not familiar with the framework, consider reading official <a href="https://docs.micronaut.io/latest/guide/index.html" target="_blank" rel="noopener">User Guide</a> first.</td></tr></table></div><div class="sect1"><h2>Introduction</h2><div class="sectionbody"><div class="paragraph"><p>In this article I would like to show you a very simple example that simulates communication between two remote services:</p></div><div class="ulist"><ul><li><p><strong>product-service</strong> exposes a single endpoint <code>(GET) /product/{id}</code> which returns specific product information. We will simulate high latency (fixed on different products) - the idea is that this service might communicate with <code>n</code> different remote services to collect final product information.</p></li><li><p><strong>recommendations-service</strong> exposes a single endpoint <code>(GET) /recommendations</code> which returns fixed number of recommendations. We won&#8217;t focus on building solid recommendations system - this service is just a mock that communicates over HTTP with <strong>product-service</strong> to get the information about products it&#8217;s going to recommend to the user. A single HTTP request to recommendations-service endpoint will cause 4 additional non-blocking requests to product-service endpoint.</p></li></ul></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">This example was inspired by demo I made for my <a href="https://github.com/wololock/ratpack-quickstart-demo" target="_blank" rel="noopener"><em>"Ratpack - practical quickstart"</em></a> presentation.</td></tr></table></div><div class="paragraph"><p>Micronaut is shipped with handy command line tool <code>mn</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% mn --helpUsage: mn [-hnvVx] [COMMAND]Micronaut CLI command line interface for generating projects and services.Commonly used commands are:  create-app NAME  create-cli-app NAME  create-federation NAME --services SERVICE_NAME[,SERVICE_NAME]...  create-function NAMEOptions:  -h, --help           Show this help message and exit.  -n, --plain-output   Use plain text instead of ANSI colors and styles.  -v, --verbose        Create verbose output.  -V, --version        Print version information and exit.  -x, --stacktrace     Show full stack trace when exceptions occur.Commands:  create-app         Creates an application  create-cli-app     Creates a command line application  create-federation  Creates a federation of services  create-function    Creates a serverless function application  create-profile     Creates a profile  help               Prints help information for a specific command  list-profiles      Lists the available profiles  profile-info       Display information about a given profile</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">You can install Micronaut CLI using <a href="https://sdkman.io/sdks#micronaut" target="_blank" rel="noopener">SDKMAN!</a> - <code>sdk install micronaut</code></td></tr></table></div><div class="paragraph"><p>Now we are able to create Micronaut application skeleton:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">mn create-app micronaut-nonblocking-async-demo</code></pre></div></div><div class="paragraph"><p>It creates a new application using Gradle build tool (switching to Maven is possible if needed). After applying a few small changes our final <code>build.gradle</code> file looks like this:</p></div><div class="listingblock"><div class="title">Listing 1. build.gradle</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">plugins {    id "io.spring.dependency-management" version "1.0.6.RELEASE"    id "com.github.johnrengelman.shadow" version "4.0.0"    id "net.ltgt.apt-eclipse" version "0.18"    id "net.ltgt.apt-idea" version "0.18"}apply plugin: "application"apply plugin: "java"apply plugin: "groovy"apply plugin: "jacoco"version "0.1"group "com.github.wololock.micronaut"repositories {    mavenLocal()    mavenCentral()    maven { url "https://jcenter.bintray.com" }}dependencyManagement {    imports {        mavenBom 'io.micronaut:micronaut-bom:1.0.0'    }}dependencies {    annotationProcessor "io.micronaut:micronaut-inject-java"    annotationProcessor "io.micronaut:micronaut-validation"    compile "io.micronaut:micronaut-inject"    compile "io.micronaut:micronaut-validation"    compile "io.micronaut:micronaut-runtime"    compile "io.micronaut:micronaut-http-client"    compile "io.micronaut:micronaut-http-server-netty"    compileOnly "io.micronaut:micronaut-inject-java"    runtime "ch.qos.logback:logback-classic:1.2.3"    testCompile "io.micronaut:micronaut-inject-java"    testCompile("org.spockframework:spock-core:1.1-groovy-2.4")}shadowJar {    mergeServiceFiles()}run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')mainClassName = "com.github.wololock.micronaut.Application"compileJava.options.compilerArgs += '-parameters'compileTestJava.options.compilerArgs += '-parameters'jacocoTestReport {    reports {        xml.enabled true        html.enabled true    }}check.dependsOn jacocoTestReport</code></pre></div></div></div></div><div class="sect1"><h2>Implementing product-service</h2><div class="sectionbody"><div class="paragraph"><p>We start with writing some product-service code. For simplicity we will put both services to a single app - this is OK for this demo, but in real-life you would keep these two services as separate applications. Here is a list of files we are going to create:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">productsâ”œâ”€â”€ ProductClient.javaâ”œâ”€â”€ ProductController.javaâ”œâ”€â”€ Product.javaâ””â”€â”€ ProductService.java</code></pre></div></div><div class="ulist"><ul><li><p><code>Product</code> class is defined by 3 simple properties: <code>id</code>, <code>name</code> and <code>price</code>. <a href="https://github.com/wololock/micronaut-nonblocking-async-demo/blob/master/src/main/java/com/github/wololock/micronaut/products/Product.java" target="_blank" rel="noopener">Nothing fancy</a>.</p></li><li><p><code>ProductService</code> stores 4 exemplary products in memory and simulates high latency when retrieving products by id.</p></li><li><p><code>ProductController</code> exposes a public API endpoint.</p></li><li><p><code>ProductClient</code> is Micronaut&#8217;s special interface that generates an HTTP client we can use to communicate with the API from other services (from recommendations-service for instance).</p></li></ul></div><div class="paragraph"><p>Here is what implementation of <code>ProductService</code> looks like:</p></div><div class="listingblock"><div class="title">Listing 2. src/main/java/com/github/wololock/micronaut/products/ProductService.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.products;import io.reactivex.Maybe;import io.reactivex.schedulers.Schedulers;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import javax.inject.Singleton;import java.math.BigDecimal;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import java.util.function.Supplier;@Singleton <i class="conum" data-value="1"></i><b>(1)</b>final class ProductService {    private static final Logger log = LoggerFactory.getLogger(ProductService.class);    private static final Map&lt;String, Supplier&lt;Product&gt;&gt; products = new ConcurrentHashMap&lt;&gt;();    static {        products.put("PROD-001", createProduct("PROD-001", "Micronaut in Action", 29.99, 120));        products.put("PROD-002", createProduct("PROD-002", "Netty in Action", 31.22, 190));        products.put("PROD-003", createProduct("PROD-003", "Effective Java, 3rd edition", 31.22, 600));        products.put("PROD-004", createProduct("PROD-004", "Clean Code", 31.22, 1200));    }    public Maybe&lt;Product&gt; findProductById(final String id) { <i class="conum" data-value="2"></i><b>(2)</b>        return Maybe.just(id)                .subscribeOn(Schedulers.io()) <i class="conum" data-value="3"></i><b>(3)</b>                .map(it -&gt; products.getOrDefault(it, () -&gt; null).get());    }    private static Supplier&lt;Product&gt; createProduct(final String id, final String name, final Double price, final int latency) {        return () -&gt; {            simulateLatency(latency); <i class="conum" data-value="4"></i><b>(4)</b>            log.debug("Product with id {} ready to return...", id);            return new Product(id, name, BigDecimal.valueOf(price));        };    }    private static void simulateLatency(final int millis) {        try {            Thread.sleep(millis);        } catch (InterruptedException ignored) {}    }}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td><code>@javax.inject.Singleton</code> annotation instructs Micronaut that this class represents a bean to inject.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td><code>Maybe&lt;Product&gt;</code> return type means that this method returns a single <code>Product</code>, or no value, or throws exception.</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>Calling <code>subscribeOn(Schedulers.io())</code> moves calculation to a scheduler responsible for running IO-bound work.</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>We simulate latency with <code>Thread.sleep(millis)</code> before returning a <code>Product</code> object from a supplier.</td></tr></table></div><div class="paragraph"><p>The most important and the most interesting part is implemented in <code>ProductService</code> class. Firstly, we store a few products in memory as <code>Supplier&lt;Product&gt;</code> to simulate latency inside supplier&#8217;s body. Secondly, we return <code>Maybe&lt;Product&gt;</code> type to inform that <code>Product</code> may or not be returned, which is expected if we call the method with <code>id</code> that does not map to any existing product.</p></div><div class="paragraph"><p>Take a look how the <code>findProductById</code> method is implemented. We start with creating <code>Maybe&lt;String&gt;</code> object using <code>id</code> received from the method call. Then we switch to <code>Schedulers.io()</code> scheduler to move execution of this blocking operation to a thread-pool that is designed to execute such operations. And finally we map <code>id</code> to a product associated with it and we return <code>Maybe&lt;Product&gt;</code> type. For this demo purpose we also log some debug information - it will be useful when we execute a few parallel requests to see how it works.</p></div><div class="paragraph"><p>Now it is time to implement <code>ProductController</code> - our public API endpoint:</p></div><div class="listingblock"><div class="title">Listing 3. src/main/java/com/github/wololock/micronaut/products/ProductController.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.products;import io.micronaut.http.annotation.Controller;import io.micronaut.http.annotation.Get;import io.reactivex.Maybe;import org.slf4j.Logger;import org.slf4j.LoggerFactory;@Controller("/product") <i class="conum" data-value="1"></i><b>(1)</b>final class ProductController {    private static final Logger log = LoggerFactory.getLogger(ProductController.class);    private final ProductService productService;    public ProductController(ProductService productService) { <i class="conum" data-value="2"></i><b>(2)</b>        this.productService = productService;    }    @Get("/{id}") <i class="conum" data-value="3"></i><b>(3)</b>    public Maybe&lt;Product&gt; getProduct(String id) { <i class="conum" data-value="4"></i><b>(4)</b>        log.debug("ProductController.getProduct({}) executed...", id);        return productService.findProductById(id).onErrorComplete(); <i class="conum" data-value="5"></i><b>(5)</b>    }}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td><code>@Controller("/products")</code> annotation registers HTTP handler class.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Constructor injection does not require any annotation.</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td><code>@Get("/{id}")</code> defines GET mapping and path token <code>id</code>.</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td><code>Maybe&lt;Product&gt;</code> return type instructs event-loop that we are going to execute this request in a non-blocking manner.</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>Calling <code>onErrorComplete()</code> ensures that in case of <code>null</code> product HTTP server will produce <code>404 Not Found</code> response.</td></tr></table></div><div class="paragraph"><p>And the last, but not least - <code>ProductClient</code> interface:</p></div><div class="listingblock"><div class="title">Listing 4. src/main/java/com/github/wololock/micronaut/products/ProductClient.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.github.wololock.micronaut.products;import io.micronaut.http.annotation.Get;import io.micronaut.http.client.annotation.Client;import io.reactivex.Maybe;@Client("/product")public interface ProductClient {    @Get("/{id}")    Maybe&lt;Product&gt; getProduct(final String id);}</code></pre></div></div><div class="paragraph"><p>Micronaut will generate and compile HTTP client that implements this interface - no runtime proxy that slows down our applications. Brilliant!</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Source code of the application described in this blog post can be found here <a href="https://github.com/wololock/micronaut-nonblocking-async-demo" class="bare" target="_blank" rel="noopener">https://github.com/wololock/micronaut-nonblocking-async-demo</a></td></tr></table></div></div></div><div class="sect1"><h2>Running product-service</h2><div class="sectionbody"><div class="paragraph"><p>Now it is time to run our service and see it in action:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">gradle run</code></pre></div></div><div class="paragraph"><p>After about a second we will information that our server application is running:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">01:31:27.475 [main] INFO  - Startup completed in 636ms. Server Running: http://localhost:8080</code></pre></div></div><div class="paragraph"><p>Let&#8217;s execute two requests. I will use <a href="https://httpie.org/" target="_blank" rel="noopener">HTTPie</a> in below examples:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% http localhost:8080/product/PROD-001HTTP/1.1 200 OKDate: Thu, 25 Oct 2018 01:34:15 GMTconnection: keep-alivecontent-length: 60content-type: application/json{    "id": "PROD-001",    "name": "Micronaut in Action",    "price": 29.99}</code></pre></div></div><div class="paragraph"><p>Product with id <code>PROD-001</code> returned successfully. Now let&#8217;s take a look what does the response for non-existing product looks like:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% http localhost:8080/product/PROD-008HTTP/1.1 404 Not FoundDate: Thu, 25 Oct 2018 01:35:11 GMTconnection: closecontent-length: 93content-type: application/json{    "_links": {        "self": {            "href": "/product/PROD-008",            "templated": false        }    },    "message": "Page Not Found"}</code></pre></div></div></div></div><div class="sect1"><h2>Executing multiple parallel requests</h2><div class="sectionbody"><div class="paragraph"><p>Above examples shown that application works as expected. But does it process requests in a&nbsp;non-blocking manner? Let&#8217;s test it out. Firstly, we will update <code>application.yml</code> and set a single event-loop to process all incoming requests:</p></div><div class="listingblock"><div class="title">Listing 5. src/main/resources/application.yml</div><div class="content"><pre class="highlightjs highlight"><code class="language-yml hljs" data-lang="yml">micronaut:    application:        name: micronaut-nonblocking-async-demo    server:        maxRequestSize: 1MB        host: localhost        netty:           maxHeaderSize: 500KB           worker:              threads: 1           parent:              threads: 1           childOptions:              autoRead: true</code></pre></div></div><div class="paragraph"><p>Following configuration means that there is only one event-loop (a single thread) that is responsible for handling incoming HTTP requests. The whole idea here is to keep this event-loop ready to process requests and delegate all blocking operations to a separate thread-pool where they can block for some amount of time.</p></div><div class="paragraph"><p>We will use <a href="https://github.com/JoeDog/siege" target="_blank" rel="noopener">siege</a> - an http load tester and benchmarking command line tool that allows us executing multiple concurrent requests. We will execute 20 multiple HTTP requests to see how our application reacts to 20 concurrent requests with just a single thread dedicated to handling requests:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">% siege -c 20 -r 1 http://localhost:8080/product/PROD-003** SIEGE 4.0.4** Preparing 20 concurrent users for battle.The server is now under siege...HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.61 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003HTTP/1.1 200     0.62 secs:      68 bytes ==&gt; GET  /product/PROD-003Transactions:          20 hitsAvailability:      100.00 %Elapsed time:        0.62 secsData transferred:        0.00 MBResponse time:        0.62 secsTransaction rate:       32.26 trans/secThroughput:        0.00 MB/secConcurrency:       19.87Successful transactions:          20Failed transactions:           0Longest transaction:        0.62Shortest transaction:        0.61</code></pre></div></div><div class="paragraph"><p>Our application handled 20 concurrent requests with a single computation thread. <code>PROD-003</code> has <code>600ms</code> latency, so all responses returned approximately at the same time. And here is what console log looks like after handling these 20 requests:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">01:51:46.623 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.630 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.630 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.630 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.631 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.631 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.631 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.631 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.632 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.632 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.632 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.632 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.632 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.633 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.633 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.633 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.633 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.633 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.634 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:46.634 [nioEventLoopGroup-1-2     ] DEBUG - ProductController.getProduct(PROD-003) executed...01:51:47.231 [RxCachedThreadScheduler-1 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-2 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-4 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-5 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-3 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-6 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.231 [RxCachedThreadScheduler-7 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.232 [RxCachedThreadScheduler-8 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.232 [RxCachedThreadScheduler-9 ] DEBUG - Product with id PROD-003 ready to return...01:51:47.232 [RxCachedThreadScheduler-10] DEBUG - Product with id PROD-003 ready to return...01:51:47.232 [RxCachedThreadScheduler-11] DEBUG - Product with id PROD-003 ready to return...01:51:47.233 [RxCachedThreadScheduler-12] DEBUG - Product with id PROD-003 ready to return...01:51:47.233 [RxCachedThreadScheduler-13] DEBUG - Product with id PROD-003 ready to return...01:51:47.233 [RxCachedThreadScheduler-14] DEBUG - Product with id PROD-003 ready to return...01:51:47.233 [RxCachedThreadScheduler-15] DEBUG - Product with id PROD-003 ready to return...01:51:47.233 [RxCachedThreadScheduler-16] DEBUG - Product with id PROD-003 ready to return...01:51:47.234 [RxCachedThreadScheduler-17] DEBUG - Product with id PROD-003 ready to return...01:51:47.234 [RxCachedThreadScheduler-18] DEBUG - Product with id PROD-003 ready to return...01:51:47.234 [RxCachedThreadScheduler-19] DEBUG - Product with id PROD-003 ready to return...01:51:47.234 [RxCachedThreadScheduler-20] DEBUG - Product with id PROD-003 ready to return...</code></pre></div></div><div class="paragraph"><p>This log shows clearly what is the biggest benefit of non-blocking HTTP requests processing. We use a single event-loop running in <code>nioEventLoopGroup-1-2</code> thread. It receives HTTP request and instead of blocking for 600 milliseconds (latency of <code>PROD-003</code> product) it delegates operation to IO thread pool and is ready to handle next request. The default IO thread pool uses cached thread pool, so in this case it spawns 20 threads to handle the operation and they will wait 60 seconds to handle another job.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Part 1 ends here. You have seen Micronaut&#8217;s non-blocking processing in action, and what is even more important - now you know that switching from blocking model to a non-blocking one does not require a huge mind shift. In the part 2 we will implement recommendations-service side and integrate it with product-service endpoint using Micronaut&#8217;s reactive HTTP client.</p></div><div class="paragraph"><p>I hope you have learned something interesting today. If you are interested in Micronaut, please leave a comment below and let me know what kind of topics interest you the most. Stay tuned, and until the next time!</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Continue reading here - <a href="https://e.printstacktrace.blog/2018/10/micronaut-non-blocking-and-async-part-2/">Non-blocking and async Micronaut - quick start (part 2)</a></td></tr></table></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;If you haven&amp;#8217;t heard about &lt;a href=&quot;http://micronaut.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Micronaut&lt;/a&gt; you have been probably just woken up from deep hibernation. No&amp;nbsp;worries, I&amp;#8217;m joking :) Anyway, Micronaut 1.0 GA &lt;a href=&quot;https://twitter.com/micronautfw/status/1054754150292967424&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;was released yesterday&lt;/a&gt; and it is the right time to play around with it a bit. In this article I would like to show you how easy it is to handle HTTP requests in a non-blocking manner, using just a single computation thread. Interested? Let&amp;#8217;s start!&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Micronaut Cookbook" scheme="https://e.printstacktrace.blog/categories/micronaut-cookbook/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="micronaut" scheme="https://e.printstacktrace.blog/tags/micronaut/"/>
    
      <category term="non-blocking" scheme="https://e.printstacktrace.blog/tags/non-blocking/"/>
    
      <category term="async" scheme="https://e.printstacktrace.blog/tags/async/"/>
    
      <category term="reactive-programming" scheme="https://e.printstacktrace.blog/tags/reactive-programming/"/>
    
      <category term="rxjava" scheme="https://e.printstacktrace.blog/tags/rxjava/"/>
    
  </entry>
  
</feed>
