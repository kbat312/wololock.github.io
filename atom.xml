<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>e.printStackTrace(); // Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://e.printstacktrace.blog/"/>
  <updated>2018-09-24T21:18:31.000Z</updated>
  <id>https://e.printstacktrace.blog/</id>
  
  <author>
    <name>Szymon Stepniak</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo git deployer removes commits history? Let&#39;s do something about that!</title>
    <link href="https://e.printstacktrace.blog/2018/09/hexo-git-deployer-removes-commits-history-lets-do-something-about-that/"/>
    <id>https://e.printstacktrace.blog/2018/09/hexo-git-deployer-removes-commits-history-lets-do-something-about-that/</id>
    <published>2018-09-24T21:18:31.000Z</published>
    <updated>2018-09-24T21:18:31.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>I have found <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> a great tool for building a blog and apply many well-known software development principles. One of them is automation. This is why I have decided to integrate this blog with <a href="https://travis-ci.org/wololock/wololock.github.io" target="_blank" rel="noopener">Travis CI</a> to perform a deployment to GitHub pages. It was a great decision, however a few days later I have noticed one significant issue - deploying a new version of the blog from the CI server caused removing all commits from <code>master</code> branch and starting with initial commit over and over again. It&nbsp;took me a while to find working solution to this problem. This blog post explains a simple solution to this problem.</p></div><a id="more"></a><div class="sect1"><h2 id="why-does-code-hexo-deploy-code-removes-the-history-in-the-first-place">Why does <code>hexo deploy</code> removes the history in the first place?</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with understanding what actually happens. When you run <code>hexo deploy</code> <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup> command for a&nbsp;git deployment option, Hexo creates a hidden folder called <code>.deploy_git</code> and it copies generated files from the <code>public</code> folder to it. Next, it initializes git repository (if it does not yet exist) that targets Hexo&#8217;s remote deploy branch and it executes <code>git push --force</code> from this folder to a repository and a&nbsp;branch you have defined in the <code>_config.yml</code> <sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup> file.</p></div><div class="listingblock"><div class="title">Listing 1. Deployment configuration of e.printstacktrace.blog</div><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">deploy:  type: git  repo: git@github.com:wololock/wololock.github.io.git  branch: master</code></pre></div></div><div class="paragraph"><p>If you build and deploy your blog from your local computer and you never delete (or accidentally lost) your blog source code, you may never face this issue. When you do it from the workspace that does not get wiped, then the folder <code>.deploy_git</code> with it&#8217;s full history exists and <code>hexo deploy</code> pushes only those files that were actually modified. When you move to CI server like Travis CI, this is not true anymore, because it executes build with the clean workspace and the fresh clone of the repository. In&nbsp;this case <code>.deploy_git</code> folder simply does not exist and gets recreated from scratch.</p></div></div></div><div class="sect1"><h2 id="how-to-deploy-and-keep-the-history-then">How to deploy and keep the history then?</h2><div class="sectionbody"><div class="paragraph"><p>The solution I have found working for me well is fairly simple. Previously my <code>.travis.yml</code> file part responsible for the deployment looked something like this:</p></div><div class="listingblock"><div class="title">Listing 2. Previous Travis CI deployment configuration</div><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">deploy:  skip_cleanup: true  provider: script  script: hexo deploy  on:    branch: develop</code></pre></div></div><div class="paragraph"><p>It simply triggered <code>hexo deploy</code> whenever I pushed changes to <code>develop</code> branch. In this case it ended up creating a new <code>.deploy_git</code> folder and force pushing an initial commit to the GitHub repository. Then, I have made a small improvement - I&#8217;ve created a short bash script instead.</p></div><div class="listingblock"><div class="title">Listing 3. Deploy script used by e.printstacktrace.blog</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">#!/bin/bash# Initialize target with currently deployed filesgit clone --depth 1 --branch=master https://github.com/wololock/wololock.github.io.git .deploy_gitcd .deploy_git# Remove all files before they get copied from ../public/# so git can track files that were removed in the last commitfind . -path ./.git -prune -o -exec rm -rf {} \; 2&gt; /dev/nullcd ../# Run deploymenthexo deploy</code></pre></div></div><div class="paragraph"><p>This script does exactly what it says in the comments:</p></div><div class="ulist"><ul><li><p>It clones <code>master</code> branch from remote repository to <code>.deploy_git</code> to get existing commits history.</p></li><li><p>Then it removes all non-git objects repository files from <code>.deploy_git</code> so copying files back from <code>public</code> folder will track deleted files.</p></li><li><p>And finally - it executes <code>hexo deploy</code> command that does the regular deployment.</p></li></ul></div><div class="paragraph"><p>And the last but not least, here is what deployment configuration part looks like after introducing deployment bash script:</p></div><div class="listingblock"><div class="title">Listing 4. Current Travis CI deployment configuration</div><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">deploy:  skip_cleanup: true  provider: script  script: sh deploy.sh  on:    branch: develop</code></pre></div></div><div class="paragraph"><p>Thanks to this solution I was able to keep the history of site updates and to track changes of files that were actually modified with the given site update.</p></div><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/github-hexo-history.png"><img src="/images/github-hexo-history.png" alt="github hexo history"></a></div></div></div></div><div class="sect1"><h2 id="final-words">Final words</h2><div class="sectionbody"><div class="paragraph"><p>I hope you find this post useful. It describes solution for Hexo + Travis CI + GitHub use case, but it can solve problems that other similar static site generators may have when running from CI server environment.</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnote_1"><a href="#_footnoteref_1">1</a>. Documentation: <a href="https://hexo.io/docs/deployment" class="bare" target="_blank" rel="noopener">https://hexo.io/docs/deployment</a></div><div class="footnote" id="_footnote_2"><a href="#_footnoteref_2">2</a>. <a href="https://github.com/wololock/wololock.github.io/blob/develop/_config.yml#L88-L93" class="bare" target="_blank" rel="noopener">https://github.com/wololock/wololock.github.io/blob/develop/_config.yml#L88-L93</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;I have found &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; a great tool for building a blog and apply many well-known software development principles. One of them is automation. This is why I have decided to integrate this blog with &lt;a href=&quot;https://travis-ci.org/wololock/wololock.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Travis CI&lt;/a&gt; to perform a deployment to GitHub pages. It was a great decision, however a few days later I have noticed one significant issue - deploying a new version of the blog from the CI server caused removing all commits from &lt;code&gt;master&lt;/code&gt; branch and starting with initial commit over and over again. It&amp;nbsp;took me a while to find working solution to this problem. This blog post explains a simple solution to this problem.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="How to" scheme="https://e.printstacktrace.blog/categories/How-to/"/>
    
    
      <category term="hexo" scheme="https://e.printstacktrace.blog/tags/hexo/"/>
    
      <category term="blogging" scheme="https://e.printstacktrace.blog/tags/blogging/"/>
    
      <category term="git" scheme="https://e.printstacktrace.blog/tags/git/"/>
    
      <category term="github" scheme="https://e.printstacktrace.blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>How Groovy&#39;s equal operator differs from Java?</title>
    <link href="https://e.printstacktrace.blog/2018/09/how-groovy-equal-operator-is-different-from-java/"/>
    <id>https://e.printstacktrace.blog/2018/09/how-groovy-equal-operator-is-different-from-java/</id>
    <published>2018-09-22T07:53:42.000Z</published>
    <updated>2018-09-29T09:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>One of the first mistakes people do when starting their journey with Java programming language is using <code>==</code> to compare objects instead calling <code>a.equals(b)</code>. When you begin playing around with Groovy you quickly notice that equal operator <code>==</code> is used to compare objects in place of calling <code>a.equals(b)</code>. <em>"Finally something more intuitive!"</em> you might think. In today&#8217;s article we will dig a little bit deeper to learn avoiding problems equal operator in Groovy may produce.</p></div><a id="more"></a><div class="sect1"><h2 id="example-code-person-code-class">Example - <code>Person</code> class</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with fairly simple example. Below you can find a simple domain class <code>Person</code>:</p></div><div class="listingblock"><div class="title">Listing 1. Exemplary immutable domain class in Groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Person {    String name    int age}</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">The <code>@Immutable</code> <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup> annotation makes creating immutable classes much easier - it will make the annotated class final, all fields will be final as well, getter methods will be generated + <code>equals</code> and <code>hashCode</code>.</td></tr></table></div><div class="paragraph"><p>In this case <code>equals(o)</code> method gets generated by AST transformation and it simply compares all object properties to decide if they are equal. Let&#8217;s see how it works:</p></div><div class="listingblock"><div class="title">Listing 2. The default equals behavior</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Person {    String name    int age}def john = new Person(name: 'John', age: 32) <i class="conum" data-value="1"></i><b>(1)</b>def mark = new Person(name: 'Mark', age: 32)println john == mark <i class="conum" data-value="2"></i><b>(2)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>We can use named parameters constructor.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Objects are not equal, so it prints <code>false</code> to the console.</td></tr></table></div></div></div><div class="sect1"><h2 id="implementing-code-equals-o-code">Implementing <code>equals(o)</code></h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s implement our own <code>equals(o)</code> method and let&#8217;s make it print some text to the console to make sure this particular method got triggered.</p></div><div class="listingblock"><div class="title">Listing 3. Shadowing default <code>equals(o)</code> with custom implementation</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Person {    String name    int age    @Override    boolean equals(o) { <i class="conum" data-value="1"></i><b>(1)</b>        println "equals(o) triggered"        if (this.is(o)) return true        if (getClass() != o.class) return false        Person person = (Person) o        if (age != person.age) return false        if (name != person.name) return false        return true    }}def john = new Person(name: 'John', age: 32)def mark = new Person(name: 'Mark', age: 32)println john == mark <i class="conum" data-value="2"></i><b>(2)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Some simple <code>equals(o)</code> method generated by IntelliJ IDEA.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>This line still prints <code>false</code> to the console.</td></tr></table></div><div class="paragraph"><p>The only thing that has changed comparing to the previous example is that <code>equals(o) triggered</code> shows in the console when we run this example.</p></div></div></div><div class="sect1"><h2 id="implementing-code-comparable-code-interface">Implementing <code>Comparable</code> interface</h2><div class="sectionbody"><div class="paragraph"><p>There is one exception from the rule that <code>==</code> maps to the <code>equals(o)</code> method. This exception has something to do with <code>Comparable</code> interface - if class implements it, then <code>==</code> maps to the <code>compareTo(o)</code> method instead<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup>. Let&#8217;s play around with this use case - we will implement <code>compareTo(o)</code> in a way it only takes person&#8217;s age into account.</p></div><div class="listingblock"><div class="title">Listing 4. Implementing <code>Comparable&lt;Person&gt;</code> interface</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Person implements Comparable&lt;Person&gt; {    String name    int age    @Override    boolean equals(o) { <i class="conum" data-value="1"></i><b>(1)</b>        println "equals(o) triggered"        if (this.is(o)) return true        if (getClass() != o.class) return false        Person person = (Person) o        if (age != person.age) return false        if (name != person.name) return false        return true    }    @Override    int compareTo(Person person) { <i class="conum" data-value="1"></i><b>(1)</b>        println "compareTo(person) triggered"        return this.age &lt;=&gt; person?.age    }}def john = new Person(name: 'John', age: 32)def mark = new Person(name: 'Mark', age: 32)println john == mark <i class="conum" data-value="2"></i><b>(2)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>The <code>compareTo(person)</code> method implementation that compares ages only.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Now it prints <code>true</code>, because both persons are the same age.</td></tr></table></div><div class="paragraph"><p>When we run this example we will also see that only <code>compareTo(person) triggered</code></p></div></div></div><div class="sect1"><h2 id="code-a-is-b-code-as-an-equivalent-of-java-s-code-code"><code>a.is(b)</code> as an equivalent of Java&#8217;s <code>==</code></h2><div class="sectionbody"><div class="paragraph"><p>If you need to compare objects reference you will have to use Groovy&#8217;s <code>a.is(b)</code> method which translates to the same thing that Java&#8217;s <code>==</code> does.</p></div><div class="listingblock"><div class="title">Listing 5. Comparing objects reference with <code>a.is(b)</code> method</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Person {    String name    int age}def john = new Person(name: 'John', age: 32)def mark = new Person(name: 'Mark', age: 32)def johnCopy = johnprintln john.is(mark) <i class="conum" data-value="1"></i><b>(1)</b>println johnCopy.is(john) <i class="conum" data-value="2"></i><b>(2)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Prints <code>false</code>.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Prints <code>true</code>.</td></tr></table></div></div></div><div class="sect1"><h2 id="using-code-comparable-code-between-incompatible-types">Using <code>Comparable</code> between incompatible types</h2><div class="sectionbody"><div class="paragraph"><p>There is one use case when implementing <code>Comparable</code> interface makes equals operator return <code>false</code> for every comparison. It happens if you implement <code>Comparable</code> interface with incompatible type (the type that has nothing to do with the class we implement <code>Comparable</code> for). I know mentioning such use case may sound bizarre to you, however <a href="https://stackoverflow.com/q/50988701/2194470" target="_blank" rel="noopener">there are some people who actually tried doing it</a> and were surprised it didn&#8217;t work as they could expect. It&#8217;s hard to come up with some logical example, but let&#8217;s say we have a class <code>Profession</code> and each <code>Person</code> has a profession - in this case for some reason we want to compare persons with professions and return <code>true</code> if given person has the profession and <code>false</code> otherwise.</p></div><div class="listingblock"><div class="title">Listing 6. Incorrect usage of <code>Comparable</code> interface</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutableclass Profession implements Comparable&lt;Profession&gt; {    static Profession DEVELOPER = new Profession(name: 'Software Developer')    String name    @Override    int compareTo(Profession profession) {        return this.name &lt;=&gt; profession.name    }}@Immutableclass Person implements Comparable&lt;Profession&gt; {    String name    int age    Profession profession    @Override    boolean equals(o) {        println "equals(o) triggered"        if (this.is(o)) return true        if (getClass() != o.class) return false        Person person = (Person) o        if (age != person.age) return false        if (name != person.name) return false        if (profession != person.profession) return false        return true    }    @Override    int compareTo(Profession profession) {        println "compareTo(profession) triggered"        return this.profession &lt;=&gt; profession    }}def john = new Person(name: 'John', age: 32, profession: Profession.DEVELOPER)println john == Profession.DEVELOPER <i class="conum" data-value="1"></i><b>(1)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>What do you think - does it print <code>true</code> or <code>false</code>?</td></tr></table></div><div class="paragraph"><p>The above example compiles and runs without any issue. If we implemented it that way and we expect that <code>john == Profession.DEVELOPER</code> evaluates to <code>true</code>, we will be surprised. If we run it we will notice that <code>compareTo(profession) triggered</code> is not printed to the console, neither the <code>equals(o) triggered</code>. What is printed to the console is <code>false</code>. If none of these two methods got triggered, then how does Groovy decided that <code>john</code> is not equal <code>Profession.DEVELOPER</code>?</p></div><div class="paragraph"><p>The answer to this question can be found in understanding how Groovy executes <code>a.compareTo(b)</code> method. If <code>compareTo</code> gets executed between two different types, Groovy uses <a href="https://github.com/apache/groovy/blob/master/src/main/java/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java#L543" target="_blank" rel="noopener"><code>DefaultTypeTransformation.compareTo(left, right)</code></a> method that tries to cast both sides to a common type so it can perform <code>compareTo</code> between them. Otherwise it simply returns <code>-1</code> and that&#8217;s it.</p></div></div></div><div class="sect1"><h2 id="special-use-case-comparing-object-references">Special use case: comparing object references</h2><div class="sectionbody"><div class="paragraph"><p>There is one special use case where Groovy <code>==</code> operator behaves exactly the same as Java - it happens when you compare <code>object1 == object1</code>. How is this possible? You have to understand that Groovy translates <code>left == right</code> to something like this:</p></div><div class="listingblock"><div class="title">Listing 7. Java representation of Groovy <code>==</code> operator</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">ScriptBytecodeAdapter.compareEqual(left, right)</code></pre></div></div><div class="paragraph"><p>If we take a quick look at the <a href="https://github.com/apache/groovy/blob/GROOVY_2_4_X/src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java#L685" target="_blank" rel="noopener">source code of this method</a> we will notice that in the first line it does:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">if (left==right) return true;</code></pre></div></div><div class="paragraph"><p>It means that in case of comparing a references to the same object, Groovy does not trigger <code>equals(o)</code> or <code>compareTo(o)</code> methods, but it simply returns <code>true</code>, similarly to what Java does in such case.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">I have provided even more detailed explanation of this use case <a href="https://stackoverflow.com/q/52555849/2194470" target="_blank" rel="noopener">in the following Stack Overflow answer</a>.</td></tr></table></div></div></div><div class="sect1"><h2 id="conclusion">Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I hope you have learned something interesting from this article. Let&#8217;s sum it up with the following:</p></div><div class="ulist"><ul><li><p>Use <code>==</code> to compare objects, but be aware what might happen under the hood.</p></li><li><p>You can always call <code>a.equals(b)</code> or <code>a.compareTo(b)</code> directly if you don&#8217;t want to Groovy decide for you which method should be executed.</p></li><li><p>If you want to compare object <code>a</code> with wide variety of different types, implement <code>Comparable&lt;Object&gt;</code> (or simply <code>Comparable</code> with any generic type) and make all casts between types implicit.</p></li><li><p>If you read this article up to this point - thank you very much! Don&#8217;t hesitate to leave a comment and tell others what is your favorite Groovy feature.</p></li></ul></div><div class="paragraph"><p>See you next time.</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnote_1"><a href="#_footnoteref_1">1</a>. For more information about <code>@Immutable</code> transformation <a href="http://docs.groovy-lang.org/docs/latest/html/documentation/#xform-Immutable" target="_blank" rel="noopener">check Groovy official documentation.</a></div><div class="footnote" id="_footnote_2"><a href="#_footnoteref_2">2</a>. <a href="http://docs.groovy-lang.org/docs/latest/html/documentation/#_behaviour_of_code_code" class="bare" target="_blank" rel="noopener">http://docs.groovy-lang.org/docs/latest/html/documentation/#_behaviour_of_code_code</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;One of the first mistakes people do when starting their journey with Java programming language is using &lt;code&gt;==&lt;/code&gt; to compare objects instead calling &lt;code&gt;a.equals(b)&lt;/code&gt;. When you begin playing around with Groovy you quickly notice that equal operator &lt;code&gt;==&lt;/code&gt; is used to compare objects in place of calling &lt;code&gt;a.equals(b)&lt;/code&gt;. &lt;em&gt;&quot;Finally something more intuitive!&quot;&lt;/em&gt; you might think. In today&amp;#8217;s article we will dig a little bit deeper to learn avoiding problems equal operator in Groovy may produce.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/Programming-tips/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>Groovy: static propertyMissing and methodMissing methods - limitations and possible issues</title>
    <link href="https://e.printstacktrace.blog/2018/09/groovy-static-propertymissing-and-methodmissing-methods-limitations-and-possible-issues/"/>
    <id>https://e.printstacktrace.blog/2018/09/groovy-static-propertymissing-and-methodmissing-methods-limitations-and-possible-issues/</id>
    <published>2018-09-08T21:22:19.000Z</published>
    <updated>2018-09-08T21:22:19.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Some time ago I have found another interesting <a href="https://stackoverflow.com/q/51921068/2194470" target="_blank" rel="noopener">Groovy related question on Stack Overflow</a>. This time someone was asking about static variants of popular <code>propertyMissing</code> and <code>methodMissing</code> methods. The official Groovy documentation does not explain how to do it - it only explains how to add any static method through <code>metaClass</code>. Today we are going to learn how to define these methods in two different ways.</p></div><a id="more"></a><div class="sect1"><h2 id="introduction">Introduction</h2><div class="sectionbody"><div class="paragraph"><p>Before we move on - I must admit that I never had to use static <code>methodMissing</code> and <code>propertyMissing</code> method variants in my daily Groovy practice. I use Groovy&#8217;s metaprogramming capability very, very rarely, yet I still prefer more compile-time metaprogramming features to make it as explicit as possible. However, there are some rare cases where doing runtime metaprogramming might make sense and it fits better to the problem we are trying to solve.</p></div><div class="paragraph"><p>Let&#8217;s say we have a very simple domain class <code>Person</code>.</p></div><div class="listingblock"><div class="title">Listing 1. Person domain class</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.EqualsAndHashCodeimport groovy.transform.ToString@ToString@EqualsAndHashCodeclass Person {    final String name    Person(String name) {        this.name = name    }}</code></pre></div></div><div class="paragraph"><p>Now, let&#8217;s say that for some reason we want to instantiate an object not by calling a constructor directly, but by accessing non-existing property which holds person&#8217;s name, for instance:</p></div><div class="listingblock"><div class="title">Listing 2. Creating <code>Person</code> instances through accessing non-existing class properties</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">assert Person.John == new Person('John')assert Person.'Mary Jane' == new Person('Mary Jane')</code></pre></div></div></div></div><div class="sect1"><h2 id="adding-static-code-propertymissing-code-through-code-person-metaclass-code">Adding static <code>propertyMissing</code> through <code>Person.metaClass</code></h2><div class="sectionbody"><div class="paragraph"><p>As you can see we are going to use static variant of <code>propertyMissing</code> method. How to define it? The official <a href="http://groovy-lang.org/metaprogramming.html#_static_methods" target="_blank" rel="noopener">documentation says</a> we can do it similarly to adding an instance method, but with <code>static</code> qualifier added right before the method name. Something like this:</p></div><div class="listingblock"><div class="title">Listing 3. Defining static <code>propertyMissing</code> method for <code>Person</code> class</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.EqualsAndHashCodeimport groovy.transform.ToString@ToString@EqualsAndHashCodeclass Person {    final String name    Person(String name) {        this.name = name    }}Person.metaClass.static.propertyMissing = { String name -&gt; <i class="conum" data-value="1"></i><b>(1)</b>    return new Person(name)}assert Person.John == new Person('John')assert Person.'Mary Jane' == new Person('Mary Jane') <i class="conum" data-value="2"></i><b>(2)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>We define <code>propertyMissing</code> with <code>static</code> qualifier as a closure.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>We can put property name in quotes if it contains e.g. whitespace.</td></tr></table></div><div class="paragraph"><p>Looks like we are done and expression <code>Person.John</code> works as expected. The only thing we may don&#8217;t like is the fact we have to define this method outside the class definition. The first question that comes to mind is - where to put it? I have a single <code>Person</code> class file and I would like to use it whenever this class gets imported.</p></div></div></div><div class="sect1"><h2 id="adding-static-code-propertymissing-code-as-a-class-method">Adding static <code>propertyMissing</code> as a class method</h2><div class="sectionbody"><div class="paragraph"><p>Solution to this problem is very simple. The only problem is that you won&#8217;t find it in the official documentation. If we take a look at the source code of <code>groovy.lang.MetaClassImpl</code> class, <a href="https://github.com/apache/groovy/blob/GROOVY_2_5_X/src/main/groovy/groovy/lang/MetaClassImpl.java#L120-L124" target="_blank" rel="noopener">between lines 120 and 124</a> we can find something like this:</p></div><div class="listingblock"><div class="title">Listing 4. A part of <code>groovy.lang.MetaClassImpl</code> source code (lines 120-124)</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">    protected static final String STATIC_METHOD_MISSING = "$static_methodMissing";    protected static final String STATIC_PROPERTY_MISSING = "$static_propertyMissing";    protected static final String METHOD_MISSING = "methodMissing";    protected static final String PROPERTY_MISSING = "propertyMissing";    protected static final String INVOKE_METHOD_METHOD = "invokeMethod";</code></pre></div></div><div class="paragraph"><p>Method <code>$static_propertyMissing</code> sounds like something we are looking for. Let&#8217;s add this method to a <code>Person</code> class and see how it works:</p></div><div class="listingblock"><div class="title">Listing 5. <code>Person</code> class with implemented <code>$static_propertyMissing</code> method</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.EqualsAndHashCodeimport groovy.transform.ToString@ToString@EqualsAndHashCodeclass Person {    final String name    Person(String name) {        this.name = name    }    static def $static_propertyMissing(String name) {        return new Person(name)    }}assert Person.John == new Person('John')assert Person.'Mary Jane' == new Person('Mary Jane')</code></pre></div></div><div class="paragraph"><p>Works like a charm. <code>$static_propertyMissing</code> is a member of <code>Person</code> class and this behavior gets imported with the class.</p></div></div></div><div class="sect1"><h2 id="adding-static-code-methodmissing-code-variant">Adding static <code>methodMissing</code> variant</h2><div class="sectionbody"><div class="paragraph"><p>I guess you have already figured out how to implement static variant of <code>methodMissing</code> method. The source code reveals that the name of this method is <code>$static_methodMissing</code>. Let&#8217;s see what we can do with it. If you know Grails Framework then you also know <a href="http://gorm.grails.org/" target="_blank" rel="noopener">GORM</a>. For those of you who are not familiar with it - in a simple words, GORM takes advantage of Groovy metaprogramming and it "translates" methods like <code>User.findByNameAndEmail(name, email)</code> to a Hibernate HQL queries. It&#8217;s a total simplification of what GORM is, but it doesn&#8217;t matter at this point. Let&#8217;s try to use <code>$static_methodMissing</code> implemented in <code>Person</code> class to support GORM-like methods:</p></div><div class="ulist"><ul><li><p><code>findByName(name)</code></p></li><li><p><code>findByNameAndAge(name, age)</code></p></li><li><p><code>findByNameOrAge(name, age)</code></p></li></ul></div><div class="paragraph"><p>Without any further ado let&#8217;s take a look at following example:</p></div><div class="listingblock"><div class="title">Listing 6. An example of GORM-like dynamic <code>findByXXX</code> method in <code>Person</code> class</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.EqualsAndHashCodeimport groovy.transform.ToStringimport java.util.concurrent.CopyOnWriteArraySet@ToString@EqualsAndHashCodeclass Person {    private static Set&lt;Person&gt; people = [ <i class="conum" data-value="1"></i><b>(1)</b>        new Person('John', 42)    ] as CopyOnWriteArraySet    final String name    final int age    Person(String name, int age) {        this.name = name        this.age = age    }    static def $static_methodMissing(String name, Object args) {        if (name.startsWith('findBy')) { <i class="conum" data-value="2"></i><b>(2)</b>            final String[] parts =  name.replace('findBy', '')                    .split('(?=\\p{Upper})') <i class="conum" data-value="3"></i><b>(3)</b>                    .collect { it.toLowerCase() } <i class="conum" data-value="4"></i><b>(4)</b>            <i class="conum" data-value="5"></i><b>(5)</b>            final Closure&lt;Boolean&gt; predicate = parts.size() == 1 ? { it.@(parts[0]) == args[0] } :                    parts.size() == 3 ?                            parts[1] == 'and' ?                                    { it.@(parts[0]) == args[0] &amp;&amp; it.@(parts[2]) == args[1] } :                                    parts[1] == 'or' ?                                            { it.@(parts[0]) == args[0] || it.@(parts[2]) == args[1] } :                                            {} : {}            return people.find(predicate) <i class="conum" data-value="6"></i><b>(6)</b>        }        throw new MissingMethodException(name, Person, args)    }}assert Person.findByNameAndAge('John', 21) == nullassert Person.findByNameAndAge('John', 42) == new Person('John', 42)assert Person.findByNameOrAge('Denis', 42) == new Person('John', 42)assert Person.findByName('John') == new Person('John', 42)assert Person.findByName('Denis') == null</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>We use internal <code>Set</code> to store some objects.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>We consider only missing methods that starts with <code>findBy</code> prefix.</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>We split remaining part by uppercase (e.g. <code>['Name', 'And', 'Age']</code>).</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>It&#8217;s time to lowercase <code>['name', 'and', 'age']</code>.</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>Here we create a predicate expressed as a closure (very dirty and verbose way).</td></tr><tr><td><i class="conum" data-value="6"></i><b>6</b></td><td>And finally we call <code>find()</code> method to get the first element that matches predicate.</td></tr></table></div></div></div><div class="sect1"><h2 id="limitations">Limitations</h2><div class="sectionbody"><div class="paragraph"><p>There is one huge limitation if it comes to static variants of <code>propertyMissing</code> and <code>methodMissing</code> methods - you can&#8217;t define both of them in a single class. Not literally. You can still do it, but if you add <code>$static_propertyMissing</code> then your <code>$static_methodMissing</code> stops working and starts throwing exception like:</p></div><div class="listingblock"><div class="title">Listing 7. Exception thrown when both static variants are defined in the class</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Caught: groovy.lang.MissingMethodException: No signature of method: Person.call() is applicable for argument types: (String, Integer) values: [John, 21]Possible solutions: wait(), any(), wait(long, int), collect(), dump(), find()groovy.lang.MissingMethodException: No signature of method: Person.call() is applicable for argument types: (String, Integer) values: [John, 21]Possible solutions: wait(), any(), wait(long, int), collect(), dump(), find()at test.run(test.groovy:70)</code></pre></div></div><div class="paragraph"><p>It happens because the method responsible for invoking static methods <a href="https://github.com/apache/groovy/blob/GROOVY_2_5_X/src/main/groovy/groovy/lang/MetaClassImpl.java#L1477" target="_blank" rel="noopener">calls <code>getProperty()</code></a> just in case caller might actually want to access property and not execute method. This sounds like a bug, because such behavior does not exist for non static variants of these two methods.</p></div><div class="listingblock"><div class="title">Listing 8. Combining <code>$static_propertyMissing</code> and <code>$static_methodMissing</code> causes excpetion</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.EqualsAndHashCodeimport groovy.transform.ToStringimport java.util.concurrent.CopyOnWriteArraySet@ToString@EqualsAndHashCodeclass Person {    private static Set&lt;Person&gt; people = [        new Person('John', 42)    ] as CopyOnWriteArraySet    final String name    final int age    Person(String name, int age) {        this.name = name        this.age = age    }    static def $static_propertyMissing(String name) {        return new Person(name, 0)    }    static def $static_methodMissing(String name, Object args) {        if (name.startsWith('findBy')) {            final String[] parts =  name.replace('findBy', '')                    .split('(?=\\p{Upper})')                    .collect { it.toLowerCase() }            final Closure&lt;Boolean&gt; predicate = parts.size() == 1 ? { it.@(parts[0]) == args[0] } :                    parts.size() == 3 ?                            parts[1] == 'and' ?                                    { it.@(parts[0]) == args[0] &amp;&amp; it.@(parts[2]) == args[1] } :                                    parts[1] == 'or' ?                                            { it.@(parts[0]) == args[0] || it.@(parts[2]) == args[1] } :                                            {} : {}            return people.find(predicate)        }        throw new MissingMethodException(name, Person, args)    }}assert Person.findByNameAndAge('John', 21) == null <i class="conum" data-value="1"></i><b>(1)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>This line throws <code>groovy.lang.MissingMethodException</code></td></tr></table></div></div></div><div class="sect1"><h2 id="conclusion">Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Personally, I don&#8217;t use much runtime metaprogramming in my Groovy code. Mostly because it makes reasoning about the program at least a few times harder. But if you want to start playing around and write some DSL with Groovy then you might find runtime metaprogramming an interesting starting point. Happy hacking!</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Some time ago I have found another interesting &lt;a href=&quot;https://stackoverflow.com/q/51921068/2194470&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Groovy related question on Stack Overflow&lt;/a&gt;. This time someone was asking about static variants of popular &lt;code&gt;propertyMissing&lt;/code&gt; and &lt;code&gt;methodMissing&lt;/code&gt; methods. The official Groovy documentation does not explain how to do it - it only explains how to add any static method through &lt;code&gt;metaClass&lt;/code&gt;. Today we are going to learn how to define these methods in two different ways.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/Programming-tips/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="metaprogramming" scheme="https://e.printstacktrace.blog/tags/metaprogramming/"/>
    
  </entry>
  
  <entry>
    <title>Groovy: dynamic types coercion and promotion - you have been warned!</title>
    <link href="https://e.printstacktrace.blog/2018/09/groovy-dynamic-types-coercion-and-promotion-you-have-been-warned/"/>
    <id>https://e.printstacktrace.blog/2018/09/groovy-dynamic-types-coercion-and-promotion-you-have-been-warned/</id>
    <published>2018-09-03T09:28:05.000Z</published>
    <updated>2018-09-03T09:28:05.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p><a href="http://groovy-lang.org/" target="_blank" rel="noopener">Groovy</a> is a very powerful language on a JVM platform and with this great power comes great responsibility. There are many language features that are not intuitive for many people that start using Groovy. One of these features is dynamic coercion and type promotion which may cause you a&nbsp;headache if you use it carelessly.</p></div><a id="more"></a><div class="sect1"><h2 id="the-good-parts">The good parts</h2><div class="sectionbody"><div class="paragraph"><p>Dynamic type coercion and promotion may sound strange to you. If you work with statically compiled language like Java you know that expression:</p></div><div class="listingblock"><div class="title">Listing 1. Compilation error thrown because of incompatible types</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">String str = 123; // Error:(4, 18) java: incompatible types: int cannot be converted to java.lang.String</code></pre></div></div><div class="paragraph"><p>does not compile. Groovy took a different approach and as long as you skip <a href="http://docs.groovy-lang.org/2.5.1/html/documentation/core-semantics.html#_static_compilation" target="_blank" rel="noopener">static compilation</a> you are allowed to coerce a left side type to a right side expression. In this case expression like:</p></div><div class="listingblock"><div class="title">Listing 2. Type coercion from <code>Number</code> to <code>String</code> in Groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">String str = 234println str.dump() // &lt;java.lang.String@c213 value=234 hash=49683&gt;</code></pre></div></div><div class="paragraph"><p>compiles and converts <code>234</code> numeric value to its <code>String</code> representation.</p></div><div class="sect2"><h3 id="examples">Examples</h3><div class="paragraph"><p>We just saw that Groovy allows us to convert numeric value to its <code>String</code> representation without any issue. Now let&#8217;s take a quick look at some of the other examples where type coercion and promotion makes more or less sense, yet still can make developers life easier.</p></div></div><div class="sect2"><h3 id="1-type-to-code-boolean-code-coercion">1. Type to <code>Boolean</code> coercion</h3><div class="listingblock"><div class="title">Listing 3. Examples of types to Boolean coercions</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">Boolean numberToFalse = 0 // falseBoolean numberToTrue = -10 // trueBoolean stringToFalse = '' // falseBoolean stringToTrue = 'false' // trueBoolean listToFalse = [] // falseBoolean listToTrue = [false, false] // true</code></pre></div></div><div class="paragraph"><p>The interesting part of this coercion is that you can take advantage of it when calling an <code>if</code> statement. For instance you can do something like this:</p></div><div class="listingblock"><div class="title">Listing 4. Simplified if-statement</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">if (number) {    // ....}</code></pre></div></div><div class="paragraph"><p>and it will coerce numeric value to <code>false</code> if number is equal to <code>0</code> and <code>true</code> otherwise.</p></div></div><div class="sect2"><h3 id="2-code-string-code-to-code-enum-code-coercion">2. <code>String</code> to <code>Enum</code> coercion</h3><div class="listingblock"><div class="title">Listing 5. String to Enum coercion example</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">enum Type {  BASIC, ADVANCED}Type basic = 'BASIC'Type advanced = 'ADVANCED'println basic.dump() // prints &lt;Type@10e92f8f name=BASIC ordinal=0&gt;println advanced.dump() // prints &lt;Type@1d119efb name=ADVANCED ordinal=1&gt;</code></pre></div></div><div class="paragraph"><p>As you can see this is a short version of <code>Enum.valueOf(String value)</code> call.</p></div></div><div class="sect2"><h3 id="3-code-string-code-to-code-class-code-coercion">3. <code>String</code> to <code>Class</code> coercion</h3><div class="listingblock"><div class="title">Listing 6. String to Class coercion example</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">Class clazz = 'java.lang.String'println clazz.dump() // prints &lt;java.lang.Class@5ef04b5 cachedConstructor=null newInstanceCallerCache=null name=java.lang.String reflectionData=java.lang.ref.SoftReference@bef2d72 classRedefinedCount=0 genericInfo=sun.reflect.generics.repository.ClassRepository@69b2283a enumConstants=null enumConstantDirectory=null annotationData=java.lang.Class$AnnotationData@22a637e7 annotationType=null classValueMap=null&gt;</code></pre></div></div></div><div class="sect2"><h3 id="4-code-closure-code-to-a-functional-interface-coercion">4. <code>Closure</code> to a functional interface coercion</h3><div class="listingblock"><div class="title">Listing 7. Closure to a functional interface coercion example</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">interface Worker&lt;T,U&gt; {  U work(T)}Worker&lt;String, Integer&gt; worker = { it.length() }println worker.work('abc') // prints 3</code></pre></div></div></div><div class="sect2"><h3 id="5-code-list-code-to-a-custom-type-coercion">5. <code>List</code> to a custom type coercion</h3><div class="listingblock"><div class="title">Listing 8. Passing implicitely list elements to a class constructor</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutablefinal class Point {  final int x  final int y}Point point = [10,23]println point.dump() // &lt;Point@1de0c x=10 y=23 $hash$code=122380&gt;</code></pre></div></div><div class="paragraph"><p>In this example we define constructor parameters as a list of elements. This type of coercion works only if number (and types) of list elements matches the number of constructor parameters. For instance, if we pass a list of size <code>3</code> we would get <code>GroovyCastException</code> while trying to initialize the object:</p></div><div class="listingblock"><div class="title">Listing 9. Passing incorrect number of constructor parameters throws an exception</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">Point point = [10,23,43] // Throws org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object '[10, 23, 43]' with class 'java.util.ArrayList' to class 'Point' due to: groovy.lang.GroovyRuntimeException: Could not find matching constructor for: Point(java.lang.Integer, java.lang.Integer, java.lang.Integer)</code></pre></div></div></div><div class="sect2"><h3 id="6-code-map-code-to-a-custom-type-coercion">6. <code>Map</code> to a custom type coercion</h3><div class="listingblock"><div class="title">Listing 10. Passing map to a class constructor method</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Immutable@Immutablefinal class Point {  final int x  final int y}Point point = [x: 4, y: -32]println point.dump() // &lt;Point@1dd1b x=4 y=-32 $hash$code=122139&gt;</code></pre></div></div><div class="paragraph"><p>This use case is similar to the previous one. In this case map keys have to match constructor parameters - number of map entries has to match number of constructor parameters and keys names have to match class properties names.</p></div></div></div></div><div class="sect1"><h2 id="the-bad-parts">The bad parts</h2><div class="sectionbody"><div class="paragraph"><p>You may find some of these dynamic coercions useful, however there are use cases where dynamic coercion and promotion causes more problems. There was one pretty <a href="https://stackoverflow.com/q/52103639/2194470" target="_blank" rel="noopener">interesting question on Stack Overflow</a> which inspired me to write this blog post. Let&#8217;s consider following example.</p></div><div class="listingblock"><div class="title">Listing 11. Collection coercion to Set type</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">Set&lt;Integer&gt; integers = [1,2,3,4,3,2,1].asCollection()println integers // prints [1, 2, 3, 4]</code></pre></div></div><div class="paragraph"><p>This kind of assignment is not possible in Java - if you try casting <code>Collection</code> to <code>Set</code> you would get <code>ClassCastException</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Exception in thread "main" java.lang.ClassCastException: java.util.Collections$UnmodifiableCollection cannot be cast to java.util.Set</code></pre></div></div><div class="paragraph"><p>Groovy calls <a href="https://github.com/apache/groovy/blob/GROOVY_2_4_X/src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java#L248" target="_blank" rel="noopener"><code>DefaultTypeTransformation.continueCastOnCollection(Object object, Class type)</code></a> method in this case and allows promoting <code>Collection</code> to a <code>Set</code> (<code>LinkedHashSet</code> in this case).</p></div><div class="paragraph"><p>Well, what&#8217;s the problem with that? If you get familiar with Groovy&#8217;s source code then such conversions are pretty straightforward to you, right? That is true, however there are use case that confuse people even more. Take a look at following example:</p></div><div class="listingblock"><div class="title">Listing 12. Casting unmodifiable collection to Set example</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">Set&lt;Integer&gt; integers = Collections.unmodifiableCollection([1,2,3,4,3,2,1].asCollection())integers.add(10)println integers</code></pre></div></div><div class="paragraph"><p>Now, do you think this code compiles? Or what <code>println integers</code> prints to the console? If you read the source code carefully you already know the answer. It compiles and it prints <code>[1, 2, 3, 4, 10]</code>. Why? Because unmodifiable collection does not get promoted to a unmodifiable set, but <code>LinkedHashSet</code> instead. If we only be more careful and stop relying on dynamic type coercion than the code like:</p></div><div class="listingblock"><div class="title">Listing 13. Adding an element to unmodifiable set</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">Set&lt;Integer&gt; integers = Collections.unmodifiableSet([1,2,3,4,3,2,1] as Set)integers.add(10)println integers</code></pre></div></div><div class="paragraph"><p>would produce a compile time error that saves a lot of our time:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">Caught: java.lang.UnsupportedOperationExceptionjava.lang.UnsupportedOperationExceptionat java_util_Set$add.call(Unknown Source)at test.run(test.groovy:3)</code></pre></div></div></div></div><div class="sect1"><h2 id="how-to-disable-dynamic-type-coercion">How to disable dynamic type coercion?</h2><div class="sectionbody"><div class="paragraph"><p>It&#8217;s simple - enable <a href="http://docs.groovy-lang.org/2.5.1/html/documentation/core-semantics.html#_static_compilation" target="_blank" rel="noopener">static compilation</a> and all dynamic coercions are turned off.</p></div></div></div><div class="sect1"><h2 id="conclusion">Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I really like all different features of Groovy programming language, however exaggerating dynamic features usage may cause you a lot of problems when you are not careful enough. I always tend to be as explicit as possible when writing Groovy code - I don&#8217;t overuse dynamic type coercions and only use them when they are very straightforward and don&#8217;t add any level of complication to my code.</p></div><div class="paragraph"><p>How does it look like on your side? What are the use cases that work for you if it comes to dynamic type coercion? Please share your story in the comments section below.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://groovy-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Groovy&lt;/a&gt; is a very powerful language on a JVM platform and with this great power comes great responsibility. There are many language features that are not intuitive for many people that start using Groovy. One of these features is dynamic coercion and type promotion which may cause you a&amp;nbsp;headache if you use it carelessly.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/Programming-tips/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>365 consecutive days on Stack Overflow - what I have learned from this experiment</title>
    <link href="https://e.printstacktrace.blog/2018/07/365-consecutive-days-on-stack-overflow/"/>
    <id>https://e.printstacktrace.blog/2018/07/365-consecutive-days-on-stack-overflow/</id>
    <published>2018-07-18T07:25:33.000Z</published>
    <updated>2018-07-18T07:25:33.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>A few days ago I have reached 365 consecutive days on <a href="https://stackoverflow.com/users/2194470/szymon-stepniak?tab=profile" target="_blank" rel="noopener">Stack Overflow</a>. In the beginning of July 2017 I&nbsp;have decided to run an experiment - visit Stack Overflow every single day and do something useful to other community members (answer a question, review one of the queues, edit and improve existing questions and so on). Now it is the best time to summarize this experiment and share my thoughts with you.</p></div><a id="more"></a><div class="sect1"><h2 id="motivation">Motivation</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with <em>"why?"</em>. I enjoy learning new things and getting better in stuff I already know. Someone could call it a pursuit of mastering programming skills. I have heard a few years back that if you want to learn something precisely, you have to know how to explain it to others.<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup> There is this very popular quote attributed to Albert Einstein<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup>:</p></div><div class="quoteblock"><blockquote><div class="paragraph"><p><em>If you can&#8217;t explain it simply, you don&#8217;t understand it well enough.</em></p></div></blockquote></div><div class="paragraph"><p>Even though Einstein unlikely said that, it still sounds smart enough to give this quote a try and apply it in the real life.</p></div><div class="paragraph"><p>So I have decided I will be watching a few tags<sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</sup> on Stack Overflow and I will try answering questions to solve people&#8217;s programming problems. I wanted to achieve this by providing clear and detailed explanation of a solution (and problem as well). I&#8217;ve focused on stuff I knew something about - things I wanted to explore deeper to get a better understanding about how things work.</p></div></div></div><div class="sect1"><h2 id="starting-point">Starting point</h2><div class="sectionbody"><div class="paragraph"><p>My Stack Overflow account exists since March 2013 and between 2013 and 2017 I was not very active user. My profile in the end of 2016<sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</sup> looked like this:</p></div><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/stack-overflow-beginnings.png"><img src="/images/stack-overflow-beginnings.png" alt="stack overflow beginnings"></a></div></div><div class="paragraph"><p>I couldn&#8217;t get a snapshot from July 2017, but it didn&#8217;t change significantly comparing to snapshot from December 2016. Anyway, I was pretty passive SO user as you can see - I have asked a few questions, I&nbsp;have delivered some answers, but I wasn&#8217;t very consistent, especially if we take into account that I&nbsp;was a member for 4 years already.</p></div></div></div><div class="sect1"><h2 id="execution">Execution</h2><div class="sectionbody"><div class="paragraph"><p>Now when you know what was my starting point, it&#8217;s time to reveal what my Stack Overflow daily routine looked like for the last year:</p></div><div class="ulist checklist"><ul class="checklist"><li><p><i class="fa fa-check-square-o"></i> I have created a tag query like <code>[groovy] or [spock] or [java-stream] or &#8230;&#8203;</code> that lists only those questions I&nbsp;am the most interested in</p></li><li><p><i class="fa fa-check-square-o"></i> I have ignored tag <code>[android]</code> that shows up pretty often with <code>[gradle]</code> tag</p></li><li><p><i class="fa fa-check-square-o"></i> I reviewed newest questions to find something I could give an answer to</p></li><li><p><i class="fa fa-check-square-o"></i> If I&#8217;ve found a question I found useful to other people - I upvoted it and if I was able to answer it - I tried to deliver the best answer I could give at that time</p></li><li><p><i class="fa fa-check-square-o"></i> If I&#8217;ve found a question that was not expressed clearly - I asked for clarification and I tried to help improving the question</p></li><li><p><i class="fa fa-check-square-o"></i> If I&#8217;ve found a question I found completely useless<sup class="footnote">[<a id="_footnoteref_5" class="footnote" href="#_footnote_5" title="View footnote.">5</a>]</sup> (like <em>I have a homework task&#8230;&#8203;</em>) - I downvoted and voted to close it</p></li><li><p><i class="fa fa-check-square-o"></i> After reviewing newest questions I went through the review queues or I scheduled doing it later that day</p></li><li><p><i class="fa fa-check-square-o"></i> I have repeated most of these steps every single day</p></li></ul></div></div></div><div class="sect1"><h2 id="what-have-i-learned-from-this-journey">What have I learned from this journey?</h2><div class="sectionbody"><div class="paragraph"><p>During the last year I have participated in hundreds of Stack Overflow questions (answering, editing, commenting, voting and so on). Here are my thoughts about the things I have learned from this journey.</p></div><div class="sect2"><h3 id="1-i-don-t-have-to-chase-the-rabbit">1. I don&#8217;t have to chase the rabbit</h3><div class="paragraph"><p>Many people say that getting involved in SO community these days does not make much sense, because all popular and interesting questions were already asked and it is almost impossible to earn high reputation based on questions that show up nowadays. If your goal is to chase people like Jon Skeet or even anyone who reached 100k reputation - you&#8217;re in trouble. Many highly reputable users gained their reputation with a snowball effect - they have delivered valuable answers to popular questions a few years back and they are constantly rewarded for that. I have heard that this is a&nbsp;blocker for many newcomers. I have no problem with that, because I have realized that <strong>I don&#8217;t have to compete with anyone</strong>. I focus on delivering valuable answers instead. And I won&#8217;t lie to you - I love being rewarded with reputation points or badges, but I have accepted the fact that this is only a side-effect of doing a good job, not an end in itself.</p></div></div><div class="sect2"><h3 id="2-there-are-many-people-waiting-for-my-help">2. There are many people waiting for my help</h3><div class="paragraph"><p>I guess you have heard about impostor syndrome.<sup class="footnote">[<a id="_footnoteref_6" class="footnote" href="#_footnote_6" title="View footnote.">6</a>]</sup> I&#8217;ve found it pretty hard to overcome, especially if you are competitive by the nature and you constantly compare yourself to people that are more experienced and skilled than you, just like I did. Stack Overflow helped me hold my horses and look in the opposite direction. It became clear to me that I can learn more effectively <strong>if I help other people</strong> reaching my current level of experience. Sharing the knowledge, digging deeper in the areas I&#8217;m already familiar with and explaining these ideas with the simplest possible words boosted my learning process. And to give you a concrete example - I work with Groovy<sup class="footnote">[<a id="_footnoteref_7" class="footnote" href="#_footnote_7" title="View footnote.">7</a>]</sup> for more than 6 years already and I always saw myself as a experienced Groovy developer who knows pretty much about how things work behind the scenes. Thanks to Stack Overflow and tons of questions about different things in Groovy I have learned even more - each time I saw a question that required some sort of research from my side I jumped into it and explore it deeply enough to fully understand what&#8217;s going on. A good example of win-win situation - I have helped solving an issue and I have learned something new or I just understand the idea better.</p></div></div><div class="sect2"><h3 id="3-there-is-nothing-bad-in-being-wrong">3. There is nothing bad in being wrong</h3><div class="paragraph"><p>It happened to me a few times to give a wrong or partially wrong answer to the question I&#8217;ve found interesting. The good thing about Stack Overflow community is that there are people who will kindly tell you that your answer is wrong and what you can do to fix or improve it. Of course, there are a few jerks out there who will try to prove you&#8217;re stupid - simply ignore them.</p></div></div><div class="sect2"><h3 id="4-small-actions-repeated-consistently-produce-great-results">4. Small actions repeated consistently produce great results</h3><div class="paragraph"><p>A few months ago I have finally completed my first Stack Overflow milestone - gaining 10k reputation:</p></div><blockquote class="twitter-tweet tw-align-center" data-lang="en"><p lang="en" dir="ltr">1st milestone completed 🙃🏆👨🏻‍💻 <a href="https://twitter.com/hashtag/soreadytohelp?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#soreadytohelp</a> <a href="https://twitter.com/hashtag/so?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#so</a> <a href="https://twitter.com/hashtag/10k?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#10k</a> <a href="https://t.co/0IX3efaN4T" target="_blank" rel="noopener">https://t.co/0IX3efaN4T</a> <a href="https://t.co/SjxMLthAKZ" target="_blank" rel="noopener">pic.twitter.com/SjxMLthAKZ</a></p>&mdash; Szymon Stepniak 🧔🏻 (@wololock) <a href="https://twitter.com/wololock/status/983605216057659392?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 10, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><div class="paragraph"><p>When I was starting my one year of day-to-day Stack Overflow challenge I had problems in estimating how much time will it take to reach this 10k reputation barrier. It looked to me like something that is far far away - this is why I have focused on the next small step, the next question I&nbsp;can answer and learn something from. Points, badges and other digital rewards don&#8217;t matter. Improving yourself and other people matters the most. Your reputation grows with its own pace.</p></div></div></div></div><div class="sect1"><h2 id="conclusion">Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>It&#8217;s July 18th, one year and a few days later since I started my experiment. Why have I&nbsp;wrote this blog post? To brag about my progress? No. Nothing like that at all. I just want to summarize my experiment and show you that you can still actively participate in Stack Overflow community in 2018 and have a lot of fun while learning new things and mastering current skills. And many many people can learn from you writing better software every day.</p></div><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/stack-overflow-now.png"><img src="/images/stack-overflow-now.png" alt="stack overflow now"></a></div></div></div></div><div class="sect1"><h2 id="next-steps">Next steps</h2><div class="sectionbody"><div class="paragraph"><p>My Stack Overflow journey is not done. I continue answering questions, improving existing ones, helping people solving their problems and making software developers community a better place for all people - experienced developers and newcomers that come to Stack Overflow every day.</p></div><div class="paragraph"><p>Before this post ends - what is your Stack Overflow story? What have you learned from your experience? Does participating in this community in 2018 make any sense to you? Please share your thoughts in the comments section below. I would love to hear it from you.</p></div></div></div><div id="footnotes"><hr><div class="footnote" id="_footnote_1"><a href="#_footnoteref_1">1</a>. <em>"How Students Learn by Explaining Their Thinking"</em> by Norene Wiesen - <a href="https://www.scilearn.com/blog/how-students-learn-by-explaining-their-thinking" class="bare" target="_blank" rel="noopener">https://www.scilearn.com/blog/how-students-learn-by-explaining-their-thinking</a></div><div class="footnote" id="_footnote_2"><a href="#_footnoteref_2">2</a>. Did Einstein say “if you can&#8217;t explain it simply you don&#8217;t understand it well enough”? - discussion at <a href="https://skeptics.stackexchange.com/questions/8742/did-einstein-say-if-you-cant-explain-it-simply-you-dont-understand-it-well-en" target="_blank" rel="noopener">skeptics.stackexchange.com</a></div><div class="footnote" id="_footnote_3"><a href="#_footnoteref_3">3</a>. Tags like: <em>groovy, java-8, spock, ratpack, gpars, spring-boot etc.</em></div><div class="footnote" id="_footnote_4"><a href="#_footnoteref_4">4</a>. <a href="https://web.archive.org/web/20161222054315/https://stackoverflow.com/users/2194470/szymon-stepniak" target="_blank" rel="noopener">WaybackMaching snapshot from December 22nd 2016</a></div><div class="footnote" id="_footnote_5"><a href="#_footnoteref_5">5</a>. <a href="http://idownvotedbecau.se/noattempt/" class="bare" target="_blank" rel="noopener">http://idownvotedbecau.se/noattempt/</a></div><div class="footnote" id="_footnote_6"><a href="#_footnoteref_6">6</a>. <a href="https://en.wikipedia.org/wiki/Impostor_syndrome" class="bare" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Impostor_syndrome</a></div><div class="footnote" id="_footnote_7"><a href="#_footnoteref_7">7</a>. Groovy programming language - <a href="http://groovy-lang.org/" class="bare" target="_blank" rel="noopener">http://groovy-lang.org/</a></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;A few days ago I have reached 365 consecutive days on &lt;a href=&quot;https://stackoverflow.com/users/2194470/szymon-stepniak?tab=profile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stack Overflow&lt;/a&gt;. In the beginning of July 2017 I&amp;nbsp;have decided to run an experiment - visit Stack Overflow every single day and do something useful to other community members (answer a question, review one of the queues, edit and improve existing questions and so on). Now it is the best time to summarize this experiment and share my thoughts with you.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Software developer career boost" scheme="https://e.printstacktrace.blog/categories/Software-developer-career-boost/"/>
    
    
      <category term="stackoverflow" scheme="https://e.printstacktrace.blog/tags/stackoverflow/"/>
    
      <category term="career" scheme="https://e.printstacktrace.blog/tags/career/"/>
    
      <category term="learning" scheme="https://e.printstacktrace.blog/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>How to name Groovy script file?</title>
    <link href="https://e.printstacktrace.blog/2018/07/how-to-name-groovy-script-file/"/>
    <id>https://e.printstacktrace.blog/2018/07/how-to-name-groovy-script-file/</id>
    <published>2018-07-10T10:05:19.000Z</published>
    <updated>2018-07-10T10:05:19.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Some time ago I have found a very interesting question on Stack Overflow about <a href="https://stackoverflow.com/questions/51238868/forbidden-characters-in-groovy-script-filenames" target="_blank" rel="noopener">forbidden characters in Groovy script filenames</a>. Let&#8217;s use it as an excuse to make a closer look at Groovy script files naming limitations - you will find out that there are none actually.</p></div><a id="more"></a><div class="sect1"><h2 id="script-name-class-name">Script name == class name</h2><div class="sectionbody"><div class="paragraph"><p>The major rule of thumb says that you should apply the same standards for naming Groovy script as you apply for naming Java classes. It is simply because each Groovy script compiles to a class that extends <code>groovy.lang.Script</code> class. Let&#8217;s take a look at following example.</p></div><div class="listingblock"><div class="title">Listing 1. helloWorld.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">println "Hello, World!"</code></pre></div></div><div class="paragraph"><p>If we compile this simple script using <code>groovyc</code> compiler:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">groovyc helloWorld.groovy</code></pre></div></div><div class="paragraph"><p>we will get a Java class file <code>helloWorld.class</code> that decompiles to:</p></div><div class="listingblock"><div class="title">Listing 2. javap helloWorld.class</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Compiled from "helloWorld.groovy"public class helloWorld extends groovy.lang.Script {  public static transient boolean __$stMC;  public helloWorld();  public helloWorld(groovy.lang.Binding);  public static void main(java.lang.String...);  public java.lang.Object run();  protected groovy.lang.MetaClass $getStaticMetaClass();}</code></pre></div></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content"><strong>Tip 1: name your Groovy script just like Java class</strong><br>This is the easiest way to avoid problems when you try to execute your compiled Groovy script from Java code for instance.</td></tr></table></div></div></div><div class="sect1"><h2 id="special-characters-are-they-allowed">Special characters - are they allowed?</h2><div class="sectionbody"><div class="paragraph"><p>Java <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.8" target="_blank" rel="noopener">limits the range of characters</a> you can use to name your class. For instance, you cannot name your Java class as <code>Test-A</code> or <code>Test A</code> - Java compiler will throw an error when you try to compile class with such name:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">Test-A.java:1: error: '{' expectedpublic class Test-A {                 ^1 error</code></pre></div></div><div class="paragraph"><p>Groovy on the other hand allows you to run and compile script named <code>test-a.groovy</code> or <code>test a.groovy</code>:</p></div><div class="listingblock"><div class="title">Listing 3. javap test-a.class</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Compiled from "test-a.groovy"public class test-a extends groovy.lang.Script {  public static transient boolean __$stMC;  public test-a();  public test-a(groovy.lang.Binding);  public static void main(java.lang.String...);  public java.lang.Object run();  protected groovy.lang.MetaClass $getStaticMetaClass();}</code></pre></div></div><div class="listingblock"><div class="title">Listing 4. javap test a.class</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Compiled from "test a.groovy"public class test_a extends groovy.lang.Script {  public static transient boolean __$stMC;  public test_a();  public test_a(groovy.lang.Binding);  public static void main(java.lang.String...);  public java.lang.Object run();  protected groovy.lang.MetaClass $getStaticMetaClass();}</code></pre></div></div><div class="paragraph"><p>As you can see <code>test a.groovy</code> script generates class with name <code>test_a</code> and <code>test-a.groovy</code> generates a class with name <code>test-a</code>. Java standard allows using <code>_</code> in class names, unlike <code>-</code> character. Let&#8217;s see if Java will be able to run this <code>test-a</code> compiled class from a Groovy script:</p></div><div class="listingblock"><div class="title">Listing 5. Running compiled Groovy script as a Java program</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">java -classpath ".:./groovy-all-2.4.12.jar" test-aHello, World!</code></pre></div></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content">In order to <strong>run compiled Groovy script as a Java program</strong> we have to add <code>groovy-all-[version].jar</code> to the classpath so the parent <code>groovy.lang.Script</code> class can be found in the runtime.</td></tr></table></div><div class="paragraph"><p>It worked, surprisingly. It shows that <code>javac</code> compiler is more strict about naming limitations, unlike the Java Runtime Environment which has no problems with a class called <code>test-a</code>.</p></div></div></div><div class="sect1"><h2 id="using-java-keywords-as-a-groovy-script-name">Using Java keywords as a Groovy script name</h2><div class="sectionbody"><div class="paragraph"><p>It gets even more interesting when we name our Groovy script using one of the Java keyword. Let&#8217;s say we have created a script called <code>public.groovy</code>:</p></div><div class="listingblock"><div class="title">Listing 6. public.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">println "Hello, World from public.groovy script"</code></pre></div></div><div class="paragraph"><p>Now let&#8217;s see what the compiled Java class looks like:</p></div><div class="listingblock"><div class="title">Listing 7. javap public.class</div><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Compiled from "public.groovy"public class public extends groovy.lang.Script {  public static transient boolean __$stMC;  public public();  public public(groovy.lang.Binding);  public static void main(java.lang.String...);  public java.lang.Object run();  protected groovy.lang.MetaClass $getStaticMetaClass();}</code></pre></div></div><div class="paragraph"><p>Java compiler would never allow us to name our class <code>public</code>:</p></div><div class="listingblock"><div class="title">Listing 8. javac public.java</div><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">public.java:1: error: &lt;identifier&gt; expectedpublic class public {            ^public.java:3: error: reached end of file while parsing} ^2 errors</code></pre></div></div><div class="paragraph"><p>Groovy compiler didn&#8217;t have problems with that. Java Runtime Environment does not complain as well:</p></div><div class="listingblock"><div class="title">Listing 9. Running compile public.groovy script as a Java program</div><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">java -classpath ".:./groovy-all-2.4.12.jar" publicHello, World from public.groovy script</code></pre></div></div><div class="paragraph"><p>Does it mean I can abuse and use non-standard script names without causing any troubles? It depends. If you are going to use your compiled Groovy code with other Java programs then it&#8217;s better to follow the guidelines and use names that are 1:1 compatible with Java compiler class name standards. Otherwise you will get compilation errors when your Java code will try to instantiate for instance:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">new public()</code></pre></div></div><div class="paragraph"><p>With great power comes great responsibility.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Some time ago I have found a very interesting question on Stack Overflow about &lt;a href=&quot;https://stackoverflow.com/questions/51238868/forbidden-characters-in-groovy-script-filenames&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;forbidden characters in Groovy script filenames&lt;/a&gt;. Let&amp;#8217;s use it as an excuse to make a closer look at Groovy script files naming limitations - you will find out that there are none actually.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/Programming-tips/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>Groovy: split string and avoid getting IndexOutOfBoundsException</title>
    <link href="https://e.printstacktrace.blog/2018/06/groovy-split-string-and-avoid-getting-index-out-of-bounds-exception/"/>
    <id>https://e.printstacktrace.blog/2018/06/groovy-split-string-and-avoid-getting-index-out-of-bounds-exception/</id>
    <published>2018-06-30T20:48:16.000Z</published>
    <updated>2018-06-30T20:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>If you use Groovy for scripting or other similar tasks you probably faced a situation where you get an input as a text and you need to process it e.g. split by some delimiter and continue working with extracted values. In this post I will show you how to do it in 3 different ways.</p></div><a id="more"></a><div class="sect1"><h2 id="preparation">Preparation</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start with defining input data and expected result. We will use following simple text input:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-csv hljs" data-lang="csv">1;Joe Doe;joedoe@example.com2;Paul Doe;pauldoe@example.com3;Mark Doe4;Clark Doe;clarkdoe@example.com;2</code></pre></div></div><div class="paragraph"><p>This is a CSV-like input. We will iterate over each line, split by <code>;</code> and generate output similar to:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-csv hljs" data-lang="csv">id: 1, name: Joe Doe, email: joedoe@example.com, sibling: nullid: 2, name: Paul Doe, email: pauldoe@example.com, sibling: nullid: 3, name: Mark Doe, email: null, sibling: nullid: 4, name: Clark Doe, email: clarkdoe@example.com, sibling: 2</code></pre></div></div></div></div><div class="sect1"><h2 id="ex-1-use-code-list-get-int-index-code-to-extract-values">Ex. 1: Use <code>List.get(int index)</code> to extract values</h2><div class="sectionbody"><div class="paragraph"><p>This is the most Java-like way to do it. <code>List.get(int index)</code> method has one significant drawback - it throws <code>IndexOutOfBoundsException</code> when we are trying to get a value for non existing index. In our case only line 4 contains all 4 expected values, so for all other cases we have to be careful and prevent this exception from throwing.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def text = '''1;Joe Doe;joedoe@example.com2;Paul Doe;pauldoe@example.com3;Mark Doe4;Clark Doe;clarkdoe@example.com;2'''text.eachLine { line -&gt;    def arr = line.tokenize(';')    println "id: ${arr.size() &gt; 0 ? arr.get(0) : null}, name: ${arr.size() &gt; 1 ? arr.get(1) : null}, email: ${arr.size() &gt; 2 ? arr.get(2) : null}, sibling: ${arr.size() &gt; 3 ? arr.get(3) : null}"}</code></pre></div></div></div></div><div class="sect1"><h2 id="ex-2-use-groovy-subscript-operator">Ex. 2: Use Groovy subscript operator</h2><div class="sectionbody"><div class="paragraph"><p>The previous example looks like there is something wrong with it. Luckily Groovy <a href="https://github.com/apache/groovy/blob/GROOVY_2_4_15/src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java#L7246" target="_blank" rel="noopener">overrides index operator for lists</a> and it makes expressions like <code>arr[4]</code> safe from <code>IndexOutOfBoundsException</code>. Thanks to this feature we can simplify the previous example to:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def text = '''1;Joe Doe;joedoe@example.com2;Paul Doe;pauldoe@example.com3;Mark Doe4;Clark Doe;clarkdoe@example.com;2'''text.eachLine { line -&gt;    def arr = line.tokenize(';')    println "id: ${arr[0]}, name: ${arr[1]}, email: ${arr[2]}, sibling: ${arr[3]}"}</code></pre></div></div></div></div><div class="sect1"><h2 id="ex-3-use-groovy-multiple-assignment-feature">Ex. 3: Use Groovy multiple assignment feature</h2><div class="sectionbody"><div class="paragraph"><p>There is even more Groovy way to get this job done - using <a href="http://groovy-lang.org/semantics.html#_multiple_assignment" target="_blank" rel="noopener">multiple assignment</a> feature. It allows us to forget about that tokenize produces a list and we can assign a result of this operation directly to a named variables and Groovy will assign <code>null</code> if the value for given variable does not exist.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">def text = '''1;Joe Doe;joedoe@example.com2;Paul Doe;pauldoe@example.com3;Mark Doe4;Clark Doe;clarkdoe@example.com;2'''text.eachLine { line -&gt;    def (id, name, email, sibling) = line.tokenize(';')    println "id: ${id}, name: ${name}, email: ${email}, sibling: ${sibling}"}</code></pre></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;If you use Groovy for scripting or other similar tasks you probably faced a situation where you get an input as a text and you need to process it e.g. split by some delimiter and continue working with extracted values. In this post I will show you how to do it in 3 different ways.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/Programming-tips/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>Ratpack: register SessionModule in handler unit test</title>
    <link href="https://e.printstacktrace.blog/2018/06/ratpack-register-session-module-in-handler-unit-test/"/>
    <id>https://e.printstacktrace.blog/2018/06/ratpack-register-session-module-in-handler-unit-test/</id>
    <published>2018-06-26T20:55:38.000Z</published>
    <updated>2018-06-26T20:55:38.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Unit testing Ratpack handlers has many benefits. In the previous post we have learned how to <a href="/2018/06/ratpack-mocking-Session-object-in-GroovyRequestFixture-test/" title="mock Session object">mock Session object</a> to use it with <a href="https://ratpack.io/manual/1.5.4/api/ratpack/groovy/test/handling/GroovyRequestFixture.html" target="_blank" rel="noopener"><code>GroovyRequestFixture</code></a>. Today instead of mocking we will register <code>SessionModule</code> and then we will use a real session object.</p></div><a id="more"></a><div class="paragraph"><p>Let&#8217;s say we have a handler that uses a session object and we want to unit test this handler using <code>GroovyRequestFixture</code> to avoid booting up the application. Our handler under test class looks like this:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">class HandlerUnderTest implements Handler {    @Override    void handle(Context ctx) throws Exception {        ctx.get(Session).get('foo').map { Optional&lt;String&gt; o -&gt;            o.orElse(null)        }.flatMap { value -&gt;            Promise.value(value)        }.then { foo -&gt;            ctx.render(json([foo: foo]))        }    }}</code></pre></div></div><div class="paragraph"><p>Nothing fancy - we retrieve value with key <code>foo</code> from session object and we return a simple JSON object like:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{"foo": "here is foo value"}</code></pre></div></div><div class="paragraph"><p><code>GroovyRequestFixture</code> class has a method called <code>handle(chainAction, closure)</code> that expects two parameters:</p></div><div class="ulist"><ul><li><p><code>Action&lt;? super Chain&gt; chainAction</code>, a handler chain builder class that allows us to create a chain containing our handler under test class,</p></li><li><p><code>Closure&lt;?&gt; closure</code>, a closure with request fixture specification.</p></li></ul></div><div class="paragraph"><p>Let&#8217;s begin with defining <code>GroovyChainAction</code> object that implements <code>Action&lt;Chain&gt;</code> that we can use later on.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import ratpack.exec.Promiseimport ratpack.groovy.handling.GroovyChainActionimport ratpack.handling.Contextimport ratpack.handling.Handlerimport ratpack.session.Sessionimport spock.lang.Specificationimport spock.lang.Subjectimport static ratpack.jackson.Jackson.jsonclass RetrieveFooValueFromSessionSpec extends Specification {    @Subject    final GroovyChainAction handlerChainAction = new GroovyChainAction() {        @Override        void execute() throws Exception {            get(new HandlerUnderTest())        }    }    static class HandlerUnderTest implements Handler {        @Override        void handle(Context ctx) throws Exception {            ctx.get(Session).get('foo').map { Optional&lt;String&gt; o -&gt;                o.orElse(null)            }.flatMap { value -&gt;                Promise.value(value)            }.then { foo -&gt;                ctx.render(json([foo: foo]))            }        }    }}</code></pre></div></div><div class="paragraph"><p>The definition of <code>handlerChainAction</code> object says that there is a handler for <code>GET</code> request sent without any path and this handler is our <code>HandlerUnderTest</code>. No single test case so far, let&#8217;s add one:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import ratpack.exec.Promiseimport ratpack.groovy.handling.GroovyChainActionimport ratpack.groovy.test.handling.GroovyRequestFixtureimport ratpack.handling.Contextimport ratpack.handling.Handlerimport ratpack.http.Statusimport ratpack.jackson.internal.DefaultJsonRenderimport ratpack.session.Sessionimport spock.lang.Specificationimport spock.lang.Subjectimport static ratpack.jackson.Jackson.jsonclass RetrieveFooValueFromSessionSpec extends Specification {    @Subject    final GroovyChainAction handlerChainAction = new GroovyChainAction() {        @Override        void execute() throws Exception {            get(new HandlerUnderTest())        }    }    def "should retrieve value for foo key from Session"() {        given:        def result = GroovyRequestFixture.handle(handlerChainAction) {            method 'GET'        }        expect:        result.status == Status.OK        and:        result.rendered(DefaultJsonRender).object == [foo: 'Foo value is 42']    }    static class HandlerUnderTest implements Handler {        @Override        void handle(Context ctx) throws Exception {            ctx.get(Session).get('foo').map { Optional&lt;String&gt; o -&gt;                o.orElse(null)            }.flatMap { value -&gt;                Promise.value(value)            }.then { foo -&gt;                ctx.render(json([foo: foo]))            }        }    }}</code></pre></div></div><div class="paragraph"><p>Now our specification class contains first test case scenario - in this test we expect that calling <code>GET</code> request on predefined <code>handlerChainAction</code> returns a map object like:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">[foo: 'Foo value is 42']</code></pre></div></div><div class="paragraph"><p>Let&#8217;s see what happens if we run this test:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-console hljs" data-lang="console">ratpack.test.handling.UnexpectedHandlerException: ratpack.registry.NotInRegistryException: No object for type 'ratpack.session.Session' in registry    at ratpack.test.handling.internal.DefaultHandlingResult.rendered(DefaultHandlingResult.java:263)    at RetrieveFooValueFromSessionSpec.should retrieve value for foo key from Session(RetrieveFooValueFromSessionSpec.groovy:34)Caused by: ratpack.registry.NotInRegistryException: No object for type 'ratpack.session.Session' in registry    at ratpack.registry.Registry.get(Registry.java:136)    at ratpack.handling.internal.DefaultContext.get(DefaultContext.java:375)    at ratpack.registry.Registry.get(Registry.java:120)    at RetrieveFooValueFromSessionSpec$HandlerUnderTest.handle(RetrieveFooValueFromSessionSpec.groovy:41)    at ratpack.handling.internal.DefaultContext.next(DefaultContext.java:157)    ....</code></pre></div></div><div class="paragraph"><p>This exception is pretty straightforward - there is no session object available in the registry. In this test specification we want to avoid mocking session object and use the real one provided with <code>SessionModule</code> instead. To make it happened we need to register <code>SessionModule</code> using Guice registry. Luckily <code>GroovyChainAction</code> class has a method called <code>register(Registry registry)</code> that allows us to override existing registry. Here we will use <code>Guice.registry(Action&lt;? super BindingsSpec&gt; bindings)</code> method that returns <code>Function&lt;Registry, Registry&gt;</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">static final Function&lt;Registry, Registry&gt; guiceRegistry = Guice.registry { bindings -&gt;    bindings.module(new SessionModule())}</code></pre></div></div><div class="paragraph"><p>This <code>guiceRegistry</code> function will return a Guice registry with <code>SessionModule</code> bind correctly. The next step is to call this <code>GroovyChainAction.register(guiceRegistry.apply(registry))</code> method inside <code>execute()</code> method we override for this test. The updated specification class looks like this:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import ratpack.exec.Promiseimport ratpack.func.Functionimport ratpack.groovy.handling.GroovyChainActionimport ratpack.groovy.test.handling.GroovyRequestFixtureimport ratpack.guice.Guiceimport ratpack.handling.Contextimport ratpack.handling.Handlerimport ratpack.http.Statusimport ratpack.jackson.internal.DefaultJsonRenderimport ratpack.registry.Registryimport ratpack.session.Sessionimport ratpack.session.SessionModuleimport spock.lang.Specificationimport spock.lang.Subjectimport static ratpack.jackson.Jackson.jsonclass RetrieveFooValueFromSessionSpec extends Specification {    static final Function&lt;Registry, Registry&gt; guiceRegistry = Guice.registry { bindings -&gt;        bindings.module(new SessionModule())    }    @Subject    final GroovyChainAction handlerChainAction = new GroovyChainAction() {        @Override        void execute() throws Exception {            register(guiceRegistry.apply(registry))            get(new HandlerUnderTest())        }    }    def "should retrieve value for foo key from Session"() {        given:        def result = GroovyRequestFixture.handle(handlerChainAction) {            method 'GET'        }        expect:        result.status == Status.OK        and:        result.rendered(DefaultJsonRender).object == [foo: 'Foo value is 42']    }    static class HandlerUnderTest implements Handler {        @Override        void handle(Context ctx) throws Exception {            ctx.get(Session).get('foo').map { Optional&lt;String&gt; o -&gt;                o.orElse(null)            }.flatMap { value -&gt;                Promise.value(value)            }.then { foo -&gt;                ctx.render(json([foo: foo]))            }        }    }}</code></pre></div></div><div class="paragraph"><p>Let&#8217;s run the test and see what happens:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-console hljs" data-lang="console">Condition not satisfied:result.rendered(DefaultJsonRender).object == [foo: 'Foo value is 42']|      |                           |      ||      |                           |      false|      |                           [foo:null]|      ratpack.jackson.internal.DefaultJsonRender@9f6e406ratpack.test.handling.internal.DefaultHandlingResult@400d912aExpected :foo: Foo value is 42Actual   :foo: null</code></pre></div></div><div class="paragraph"><p>Great! <code>SessionModule</code> gets bind correctly, there is no <code>No object for type 'ratpack.session.Session' in registry</code> exception anymore. To finalize this specification we need to satisfy the expectation. For purpose of this test we will add <code>all()</code> handler to the <code>GroovyChainAction</code> and in this handler we will initialize value in session for key <code>foo</code>.</p></div><div class="quoteblock"><blockquote><h4>The <code>all()</code> handler</h4><div class="paragraph"><p>This handler is useful in some scenarios - when it&#8217;s added at the top of the chain it inspects every incoming request. It&#8217;s important to remember that if we want to keep chain continuing we have to call <code>next()</code> method that instructs Ratpack that this handler does not terminate request processing and it has to continue. Otherwise request handling ends up inside <code>all()</code> handler.</p></div></blockquote></div><div class="paragraph"><p>The simplest <code>all()</code> handler that sets value for session key`foo` may look like this:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">all { Session session -&gt;    session.set('foo', 'Foo value is 42').then {        next()    }}</code></pre></div></div><div class="paragraph"><p>It&#8217;s important to call <code>next()</code> inside <code>then()</code> operation to let Ratpack&#8217;s execution model does its job. Otherwise the next handler may start processing before session object stores value for <code>foo</code> key.</p></div><div class="paragraph"><p>And here is what the full working specification looks like:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import ratpack.exec.Promiseimport ratpack.func.Functionimport ratpack.groovy.handling.GroovyChainActionimport ratpack.groovy.test.handling.GroovyRequestFixtureimport ratpack.guice.Guiceimport ratpack.handling.Contextimport ratpack.handling.Handlerimport ratpack.http.Statusimport ratpack.jackson.internal.DefaultJsonRenderimport ratpack.registry.Registryimport ratpack.session.Sessionimport ratpack.session.SessionModuleimport spock.lang.Specificationimport spock.lang.Subjectimport static ratpack.jackson.Jackson.jsonclass RetrieveFooValueFromSessionSpec extends Specification {    static final Function&lt;Registry, Registry&gt; guiceRegistry = Guice.registry { bindings -&gt;        bindings.module(new SessionModule())    }    @Subject    final GroovyChainAction handlerChainAction = new GroovyChainAction() {        @Override        void execute() throws Exception {            register(guiceRegistry.apply(registry))            all { Session session -&gt;                session.set('foo', 'Foo value is 42').then {                    next()                }            }            get(new HandlerUnderTest())        }    }    def "should retrieve value for foo key from Session"() {        given:        def result = GroovyRequestFixture.handle(handlerChainAction) {            method 'GET'        }        expect:        result.status == Status.OK        and:        result.rendered(DefaultJsonRender).object == [foo: 'Foo value is 42']    }    static class HandlerUnderTest implements Handler {        @Override        void handle(Context ctx) throws Exception {            ctx.get(Session).get('foo').map { Optional&lt;String&gt; o -&gt;                o.orElse(null)            }.flatMap { value -&gt;                Promise.value(value)            }.then { foo -&gt;                ctx.render(json([foo: foo]))            }        }    }}</code></pre></div></div><div class="paragraph"><p>This final specification passes as we expect:</p></div><div class="paragraph"><p><img src="/images/ratpack-session-test-passed.png" class="img-thumbnail"></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Unit testing Ratpack handlers has many benefits. In the previous post we have learned how to &lt;a href=&quot;/2018/06/ratpack-mocking-Session-object-in-GroovyRequestFixture-test/&quot; title=&quot;mock Session object&quot;&gt;mock Session object&lt;/a&gt; to use it with &lt;a href=&quot;https://ratpack.io/manual/1.5.4/api/ratpack/groovy/test/handling/GroovyRequestFixture.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;GroovyRequestFixture&lt;/code&gt;&lt;/a&gt;. Today instead of mocking we will register &lt;code&gt;SessionModule&lt;/code&gt; and then we will use a real session object.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Ratpack Cookbook" scheme="https://e.printstacktrace.blog/categories/Ratpack-Cookbook/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="ratpack" scheme="https://e.printstacktrace.blog/tags/ratpack/"/>
    
      <category term="spock" scheme="https://e.printstacktrace.blog/tags/spock/"/>
    
      <category term="unit tests" scheme="https://e.printstacktrace.blog/tags/unit-tests/"/>
    
  </entry>
  
  <entry>
    <title>Ratpack: mocking Session object in GroovyRequestFixture test</title>
    <link href="https://e.printstacktrace.blog/2018/06/ratpack-mocking-Session-object-in-GroovyRequestFixture-test/"/>
    <id>https://e.printstacktrace.blog/2018/06/ratpack-mocking-Session-object-in-GroovyRequestFixture-test/</id>
    <published>2018-06-24T09:59:57.000Z</published>
    <updated>2018-06-24T09:59:57.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p><a href="https://ratpack.io" target="_blank" rel="noopener">Ratpack</a> allows you unit test handlers using <a href="https://ratpack.io/manual/1.5.4/api/ratpack/groovy/test/handling/GroovyRequestFixture.html" target="_blank" rel="noopener"><code>GroovyRequestFixture</code></a> class. The good thing about this approach is that it does not require running the whole application and you can quickly test if the handler does what you expect. However, if you retrieve objects from Raptack&#8217;s registry you will run into a problem - registry in this case is empty.</p></div><a id="more"></a><div class="paragraph"><p>In some cases you may find mocking <code>Session</code> object useful. Especially if you only want to retrieve specific object or value from session and do something with it. <code>GroovyRequestFixture.handle(chain, closure)</code> gives you an access to <code>registry</code> through the closure passed in the second parameter.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">GroovyRequestFixture.handle(yourHandler) {    registry { r -&gt;        r.add(Session, mockSession)    }}</code></pre></div></div><div class="paragraph"><p>Here we have registered <code>mockSession</code> to be injected anytime <code>Session</code> instance is being retrieved from the registry. Keep in mind that mock object does nothing by default (e.g. it return <code>null</code> values for methods invocation) so you will have to "configure" your mock object to return something significant. For instance:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">Session mockSession = Mock(Session) {    get('test') &gt;&gt; Promise.value(Optional.of('Lorem ipsum'))}</code></pre></div></div><div class="paragraph"><p>will return <code>Lorem ipsum</code> value (as a promise of optional) for <code>session.get('test')</code>.</p></div><div class="paragraph"><p>And here you can find a full example:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.CompileStaticimport ratpack.exec.Promiseimport ratpack.groovy.handling.GroovyChainActionimport ratpack.groovy.test.handling.GroovyRequestFixtureimport ratpack.http.Statusimport ratpack.jackson.internal.DefaultJsonRenderimport ratpack.session.Sessionimport spock.lang.Specificationimport static ratpack.jackson.Jackson.jsonclass MockSessionSpec extends Specification {    final Session session = Mock(Session) {        get('test') &gt;&gt; Promise.value(Optional.of('Lorem ipsum'))    }    final GroovyChainAction chainAction = new GroovyChainAction() {        @Override        @CompileStatic        void execute() throws Exception {            get('foo') {                get(Session).get('test').map { Optional&lt;String&gt; o -&gt;                    o.orElse(null)                }.flatMap { value -&gt;                    Promise.value(value)                }.then {                    render(json([message: it]))                }            }        }    }    def "should retrieve message from Session object"() {        given:        def result = GroovyRequestFixture.handle(chainAction) {            uri 'foo'            method 'GET'            registry { r -&gt;                r.add(Session, session)            }        }        expect:        result.status == Status.OK        and:        result.rendered(DefaultJsonRender).object == [message: 'Lorem ipsum']    }}</code></pre></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://ratpack.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ratpack&lt;/a&gt; allows you unit test handlers using &lt;a href=&quot;https://ratpack.io/manual/1.5.4/api/ratpack/groovy/test/handling/GroovyRequestFixture.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;GroovyRequestFixture&lt;/code&gt;&lt;/a&gt; class. The good thing about this approach is that it does not require running the whole application and you can quickly test if the handler does what you expect. However, if you retrieve objects from Raptack&amp;#8217;s registry you will run into a problem - registry in this case is empty.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Ratpack Cookbook" scheme="https://e.printstacktrace.blog/categories/Ratpack-Cookbook/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="ratpack" scheme="https://e.printstacktrace.blog/tags/ratpack/"/>
    
      <category term="spock" scheme="https://e.printstacktrace.blog/tags/spock/"/>
    
      <category term="unit tests" scheme="https://e.printstacktrace.blog/tags/unit-tests/"/>
    
  </entry>
  
  <entry>
    <title>Count frequency of a digit in a factorial of number using Haskell</title>
    <link href="https://e.printstacktrace.blog/2018/05/count-frequency-of-a-digit-in-a-factorial-of-number-using-Haskell/"/>
    <id>https://e.printstacktrace.blog/2018/05/count-frequency-of-a-digit-in-a-factorial-of-number-using-Haskell/</id>
    <published>2018-05-26T15:19:14.000Z</published>
    <updated>2018-05-26T15:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Some time ago I was interviewed to one of the Java-based projects and I was asked to solve this pretty interesting puzzle. The question was "how to count frequency of a digit in a <a href="https://en.wikipedia.org/wiki/Factorial" target="_blank" rel="noopener">factorial</a> of number, let&#8217;s say 1000". I tried to solve it using Java 8 Stream API, but I guess you see how bad decision it was. Problems like that can be easily solved with pure functional languages and today we are going to find out how to solve this puzzle with Haskell.</p></div><a id="more"></a><div class="paragraph"><p>Let&#8217;s start with starting <a href="http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html" target="_blank" rel="noopener">GHCI</a> repl:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">~ % ghciGHCi, version 8.0.2: http://www.haskell.org/ghc/  :? for helpPrelude&gt;</code></pre></div></div><div class="paragraph"><p>We can start with calculating factorial of number 1000. The easiest way to do it with Haskell is to use <a href="http://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:product" target="_blank" rel="noopener"><code>product</code></a> function and pass a list of 1000 numbers starting from 1 to 1000. We can create such list using range <code>[1..1000]</code></p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight nowrap"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; product [1..1000]402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</code></pre></div></div><div class="paragraph"><p>As you can see factorial of number 1000 is a pretty huge number (2568 digits in total).</p></div><div class="paragraph"><p>The next step is to convert this number to a list of characters, because we are going to use character comparison. Haskell&#8217;s types system allow us to treat strings as a list of characters, e.g. following expression evaluates to <code>true</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight nowrap"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; "abc" == ['a','b','c']True</code></pre></div></div><div class="paragraph"><p>Thanks to this we can use <a href="http://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:show" target="_blank" rel="noopener"><code>show</code></a> function to convert the number to a list of characters:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight nowrap"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; show $ product [1..1000]"402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"</code></pre></div></div><div class="paragraph"><p>The expression shown in REPL is an equivalent of</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight nowrap"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; show (product [1..1000])</code></pre></div></div><div class="quoteblock"><blockquote><div class="paragraph"><p><code>$</code> operator is used to avoid using parentheses and it simply means that the expression on the left side will use the result of an expression on the right side of <code>$</code> operator.</p></div></blockquote></div><div class="paragraph"><p>Now we have a list of 2568 characters. If we want to calculate a frequency of character <code>7</code> we can apply following algorithm:</p></div><div class="ulist"><ul><li><p>replace each character <code>7</code> with a number <code>1</code></p></li><li><p>replace all remaining characters with a number <code>0</code></p></li><li><p>sum all numbers from the new list</p></li></ul></div><div class="paragraph"><p>This algorithm can be implemented using popular <a href="http://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:map" target="_blank" rel="noopener"><code>map</code></a> - this function takes a list of elements and creates a new list by applying a function to each element from the input list. For example, incrementing by 1 each number of list <code>[1,2,3]</code> can be expressed with following expression:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight nowrap"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; map (\x -&gt; x + 1) [1,2,3][2,3,4]</code></pre></div></div><div class="paragraph"><p>where <code>(\x &#8594; x + 1)</code> is an anonymous function with one parameter that increments a number by 1. Haskell allows us to simplify such functions and in this case we can reduce this function to just <code>(+1)</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight nowrap"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; map (+1) [1,2,3][2,3,4]</code></pre></div></div><div class="paragraph"><p>So what is the function we can apply to our initial list? Let&#8217;s take a look at following example:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight nowrap"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; map (\x -&gt; if x == '7' then 1 else 0) $ show $ product [1..1000][0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]</code></pre></div></div><div class="paragraph"><p>As you can see in our case simple function like <code>(\x &#8594; if x == '7' then 1 else 0)</code> did the trick. In the last step we can take advantage of Haskell&#8217;s <a href="http://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:sum" target="_blank" rel="noopener"><code>sum</code></a> function that sums all numbers from the input list:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight nowrap"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; sum $ map (\x -&gt; if x == '7' then 1 else 0) $ show $ product [1..1000]217</code></pre></div></div><div class="paragraph"><p>And this is it - digit <code>7</code> occurs 217 times in factorial of 1000</p></div><div class="quoteblock"><blockquote><h3>Using <code>foldl</code></h3><div class="paragraph"><p>In this example we have used composition of two functions - <code>sum</code> and <code>map</code>. We could simplify it to just a single function - <a href="http://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:foldl" target="_blank" rel="noopener"><code>foldl</code></a> (fold left):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; :t foldlfoldl :: Foldable t =&gt; (b -&gt; a -&gt; b) -&gt; b -&gt; t a -&gt; bPrelude&gt; foldl (\freq x -&gt; if x == '7' then freq + 1 else freq) 0 $ show $ product [1..1000]217</code></pre></div></div><div class="paragraph"><p><code>foldl</code> takes 3 arguments:</p></div><div class="ulist"><ul><li><p>a two-argument function that is applied to each element of the input list</p></li><li><p>the initial value</p></li><li><p>a list of elements</p></li></ul></div><div class="paragraph"><p>In our case we start with initial value <code>0</code> and this two-argument function uses parameter names <code>freq</code> and <code>x</code> where <code>freq</code> represents a value returned by this function in the previous iteration (it uses initial value for the first iteration) and <code>x</code> represents the current value from list we are iterating over. The algorithm is simple - if the current character is <code>7</code> we return <code>freq</code> incremented by 1, otherwise we return unchanged <code>freq</code>.</p></div></blockquote></div><div class="sect1"><h2 id="find-the-digit-with-least-frequency">Find the digit with least frequency</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s extend this example and let&#8217;s try to find a digit that occurred the least amount of times. We can start with calculating frequencies for all digits. In our previous example we have "hardcode" comparison with character <code>7</code>. What if we parameterize it and apply these composed functions to each character starting from <code>0</code> to <code>9</code>? We can take</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-haskell hljs" data-lang="haskell">sum $ map (\x -&gt; if x == '7' then 1 else 0) $ show $ product [1..1000]</code></pre></div></div><div class="paragraph"><p>and use it as a body for an anonymous function like:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-haskell hljs" data-lang="haskell">(\y -&gt; sum $ map (\x -&gt; if x == y then 1 else 0) $ show $ product [1..1000])</code></pre></div></div><div class="paragraph"><p>I guess you already see the difference. Next, we can apply this function to a list created as a range of characters from <code>0</code> to <code>9</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; map (\y -&gt; sum $ map (\x -&gt; if x == y then 1 else 0) $ show $ product [1..1000]) ['0'..'9'][472,239,248,216,229,213,231,217,257,246]</code></pre></div></div><div class="paragraph"><p>Voila! Now we have a list of frequencies. And we are almost over. We can use <code>minimum</code> function that returns a minimum value from given list:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; minimum $ map (\y -&gt; sum $ map (\x -&gt; if x == y then 1 else 0) $ show $ product [1..1000]) ['0'..'9']213</code></pre></div></div><div class="paragraph"><p>That&#8217;s cool, but how we can determine which digit it is? The good news is that <code>minimum</code> function works fine with list of pairs and in this case it takes the first element of pair into account when comparing value with others. In our case we can simply pair a frequency with a digit, like <code>(4, '9')</code> - this pair says, that character <code>9</code> occurred 4 times in the number. Let&#8217;s see what the final example would look like:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; map (\y -&gt; (sum $ map (\x -&gt; if x == y then 1 else 0) $ show $ product [1..1000], y)) ['0'..'9'][(472,'0'),(239,'1'),(248,'2'),(216,'3'),(229,'4'),(213,'5'),(231,'6'),(217,'7'),(257,'8'),(246,'9')]</code></pre></div></div><div class="paragraph"><p>And if we apply <code>minimum</code> function, we get:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-haskell hljs" data-lang="haskell">Prelude&gt; minimum $ map (\y -&gt; (sum $ map (\x -&gt; if x == y then 1 else 0) $ show $ product [1..1000], y)) ['0'..'9'](213,'5')</code></pre></div></div><div class="paragraph"><p>And the answer is that digit <code>5</code> occurs the least amount of times (213 times) in the factorial of 1000.</p></div></div></div><div class="sect1"><h2 id="conclusion">Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>I hope you enjoyed today&#8217;s post and you have learned something interesting. Don&#8217;t hesitate to suggest alternative solutions to this puzzle - comment section is all yours. See you next time!</p></div><script src="https://asciinema.org/a/JYOClcsZF0AP7Cm9zmNHrtVTK.js" id="asciicast-JYOClcsZF0AP7Cm9zmNHrtVTK" async></script></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Some time ago I was interviewed to one of the Java-based projects and I was asked to solve this pretty interesting puzzle. The question was &quot;how to count frequency of a digit in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Factorial&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;factorial&lt;/a&gt; of number, let&amp;#8217;s say 1000&quot;. I tried to solve it using Java 8 Stream API, but I guess you see how bad decision it was. Problems like that can be easily solved with pure functional languages and today we are going to find out how to solve this puzzle with Haskell.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Programming tips" scheme="https://e.printstacktrace.blog/categories/Programming-tips/"/>
    
    
      <category term="haskell" scheme="https://e.printstacktrace.blog/tags/haskell/"/>
    
      <category term="functional programming" scheme="https://e.printstacktrace.blog/tags/functional-programming/"/>
    
  </entry>
  
  <entry>
    <title>Groovy script: closure does not modify @Field annotated variable</title>
    <link href="https://e.printstacktrace.blog/2017/10/groovy-script-closure-does-not-modify-field-annotated-variable/"/>
    <id>https://e.printstacktrace.blog/2017/10/groovy-script-closure-does-not-modify-field-annotated-variable/</id>
    <published>2017-10-08T07:39:12.000Z</published>
    <updated>2017-10-08T07:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Recently I have answered a few questions on Stack Overflow related to Groovy scripts and how they work in combination with closures and delegated objects. Some of use cases may not be intuitive and today I&#8217;m gonna show you one of them and explain what happens under the hood.</p></div><a id="more"></a><div class="paragraph"><p>Let&#8217;s consider following Groovy script:</p></div><div class="listingblock"><div class="title">Listing 1. incrementing_number.groovy</div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Field@Field int number = 15println "Current number value is ${number}"def body = {    number++    println "n: ${number}"}10.times bodyprintln "Current number value is ${number}"</code></pre></div></div><div class="paragraph"><p>Running this script (Groovy 2.4.12) produces following output:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">Current number value is 15n: 16n: 17n: 18n: 19n: 20n: 21n: 22n: 23n: 24n: 25Current number value is 15</code></pre></div></div><div class="paragraph"><p>It may look counterintuitive and we could expect last line saying that the current number value is <code>25</code>. So what&#8217;s going on?</p></div><div class="sect1"><h2 id="extending-code-groovy-lang-script-code">Extending <code>groovy.lang.Script</code></h2><div class="sectionbody"><div class="paragraph"><p>First thing we need to understand is that every Groovy script is compiled to a class that extends <a href="http://docs.groovy-lang.org/2.4.12/html/api/groovy/lang/Script.html" target="_blank" rel="noopener"><code>groovy.lang.Script</code></a>. Assuming that the script I&#8217;ve shown above is named <code>incrementing_number.groovy</code> then the compiled Java class would look like this:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import groovy.lang.Binding;import groovy.lang.Closure;import groovy.lang.Script;import org.codehaus.groovy.runtime.GStringImpl;import org.codehaus.groovy.runtime.GeneratedClosure;import org.codehaus.groovy.runtime.InvokerHelper;import org.codehaus.groovy.runtime.ScriptBytecodeAdapter;import org.codehaus.groovy.runtime.callsite.CallSite;public class incrementing_number extends Script {    Integer number;    public incrementing_number() {        CallSite[] var1 = $getCallSiteArray();        byte var2 = 0;        this.number = Integer.valueOf(var2);    }    public incrementing_number(Binding context) {        CallSite[] var2 = $getCallSiteArray();        super(context);        byte var3 = 0;        this.number = Integer.valueOf(var3);    }    public static void main(String... args) {        CallSite[] var1 = $getCallSiteArray();        var1[0].call(InvokerHelper.class, incrementing_number.class, args);    }    public Object run() {        // implementation of a run() method here    }}</code></pre></div></div><div class="paragraph"><p>Second thing - in this example we used <code>@Field</code> annotation on purpose in line 3. According to <a href="http://docs.groovy-lang.org/2.4.12/html/gapi/groovy/transform/Field.html" target="_blank" rel="noopener">class Javadoc documentation</a>:</p></div><div class="quoteblock"><blockquote><div class="paragraph"><p>Variable annotation used for changing the scope of a variable within a script from being within the run method of the script to being at the class level for the script.</p></div><div class="paragraph"><p>The annotated variable will become a private field of the script class. The type of the field will be the same as the type of the variable. Example usage:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">import groovy.transform.Field@Field List awe = [1, 2, 3]def awesum() { awe.sum() }assert awesum() == 6</code></pre></div></div><div class="paragraph"><p>In this example, without the annotation, variable awe would be a local script variable (technically speaking it will be a local variable within the run method of the script class). Such a local variable would not be visible inside the <code>awesum</code> method. With the annotation, <code>awe</code> becomes a private List field in the script class and is visible within the <code>awesum</code> method.</p></div></blockquote></div><div class="paragraph"><p>That&#8217;s why in compiled Java class we can find <code>Integer number</code> class field. The rest of the script body gets executed in <code>Script.run()</code> method.</p></div></div></div><div class="sect1"><h2 id="calling-closure-inside-groovy-script">Calling closure inside Groovy script</h2><div class="sectionbody"><div class="paragraph"><p>Now let&#8217;s investigate why closure <code>body</code> increments a <code>number</code> but does not modify the variable outside the closure. First thing we need to understand is that <a href="http://groovy-lang.org/closures.html#closure-owner" target="_blank" rel="noopener">every closure has an <code>owner</code></a> - an enclosing object that defines a closure. In this case <code>body.owner</code> property points to <code>incrementing_number</code> class instance. Closure ownership is also connected to delegation - Groovy&#8217;s mechanism that allows us e.g. to delegate execution of non-existing methods to other object by setting <code>obj.delegate</code> property. Groovy also defines <a href="http://groovy-lang.org/closures.html#_delegation_strategy_2" target="_blank" rel="noopener">delegation strategy</a> - an order in which delegation is resolved. The default strategy is <code>Closure.OWNER_FIRST</code> which is important to mention in our case.</p></div><div class="paragraph"><p>Now we have to get back for a moment to <code>groovy.lang.Script</code> class. It overrides, inter alia, those two methods:</p></div><div class="listingblock"><div class="title">Listing 2. <a href="https://github.com/apache/groovy/blob/GROOVY_2_4_X/src/main/groovy/lang/Script.java#L54" target="_blank" rel="noopener">groovy/lang/Script.java#L54</a></div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">public Object getProperty(String property) {    try {        return binding.getVariable(property);    } catch (MissingPropertyException e) {        return super.getProperty(property);    }}public void setProperty(String property, Object newValue) {    if ("binding".equals(property))        setBinding((Binding) newValue);    else if("metaClass".equals(property))        setMetaClass((MetaClass)newValue);    else        binding.setVariable(property, newValue);}</code></pre></div></div><div class="paragraph"><p>Groovy uses <code>getProperty(String property)</code> method any time we try to access class field and uses <code>setProperty(String property, Object newValue)</code> method any time we try to modify class field value. Our script class inherits this behavior. And because closure stored in <code>body</code> variable is owned by script class instance, reading or modifying any variable goes through those two methods.</p></div><div class="paragraph"><p><code>groovy.lang.Script</code> class also introduces a <a href="http://docs.groovy-lang.org/latest/html/api/groovy/lang/Binding.html" target="_blank" rel="noopener">binding mechanism</a>. As you can see both <code>getProperty</code> and <code>setProperty</code> methods use <code>binding</code> field to read and store variables. When trying to read a variable that does not exist in <code>binding</code> internal variables map then it is passed to <code>GroovyObjectSupport.getProperty(String property)</code> method which returns a value associated to <code>number</code> class field. And this is the value that is passed next to <code>setProperty(String property, Object newValue)</code> method and that&#8217;s how <code>number</code> variable shows up in binding object with its initial value. When we iterate 10 times and increment <code>numbers</code> we actually increment the value hold in binding&#8217;s map and not a class field. That&#8217;s why this Groovy script shown in the beginning says in the end that:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">Current number value is 15</code></pre></div></div><div class="paragraph"><p>I hope this blog post will help you understanding what happens under the hood when using Closures inside a Groovy script. This post was inspired by following Stack Overflow answer: <a href="https://stackoverflow.com/questions/46579944/groovy-2-4-variable-scope-in-closure-with-field-annotation/46580819#46580819" target="_blank" rel="noopener">Groovy 2.4 variable scope in closure with @Field annotation</a></p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Recently I have answered a few questions on Stack Overflow related to Groovy scripts and how they work in combination with closures and delegated objects. Some of use cases may not be intuitive and today I&amp;#8217;m gonna show you one of them and explain what happens under the hood.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Tales from debugger" scheme="https://e.printstacktrace.blog/categories/Tales-from-debugger/"/>
    
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="stackoverflow" scheme="https://e.printstacktrace.blog/tags/stackoverflow/"/>
    
      <category term="groovy-2.4" scheme="https://e.printstacktrace.blog/tags/groovy-2-4/"/>
    
      <category term="metaprogramming" scheme="https://e.printstacktrace.blog/tags/metaprogramming/"/>
    
  </entry>
  
  <entry>
    <title>Why &quot;grails package&quot; executes Config.groovy file?</title>
    <link href="https://e.printstacktrace.blog/2017/09/why-grails-package-exexutes-config-groovy/"/>
    <id>https://e.printstacktrace.blog/2017/09/why-grails-package-exexutes-config-groovy/</id>
    <published>2017-09-30T05:18:20.000Z</published>
    <updated>2017-09-30T05:18:20.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>This blog post is inspired by one of my recent Stack Overflow answers to following question: <a href="https://stackoverflow.com/questions/46279525/grails-why-is-the-config-groovy-file-executed-during-compilation/46376893" target="_blank" rel="noopener">Grails: why is the Config.groovy file executed during compilation?</a>. Here I&#8217;m going to show you step by step what makes <code>grails package</code> command executing <code>Config.groovy</code> script and how I&#8217;ve managed to find the answer to that question.</p></div><a id="more"></a><div class="sect1"><h2 id="grails-2-4-configuration-files">Grails 2.4 configuration files</h2><div class="sectionbody"><div class="paragraph"><p>According to following <a href="http://docs.grails.org/2.4.4/guide/conf.html#config" target="_blank" rel="noopener">Grails 2.4 documentation</a>:</p></div><div class="quoteblock"><blockquote><div class="paragraph"><p>For general configuration Grails provides two files:</p></div><div class="ulist"><ul><li><p><code>grails-app/conf/BuildConfig.groovy</code></p></li><li><p><code>grails-app/conf/Config.groovy</code></p></li></ul></div><div class="paragraph"><p>Both of them use Groovy&#8217;s <a href="http://docs.groovy-lang.org/2.4.6/html/gapi/groovy/util/ConfigSlurper.html" target="_blank" rel="noopener"><code>ConfigSlurper</code></a> syntax. The first, <code>BuildConfig.groovy</code>, is for settings that are used when running Grails commands, such as compile, doc, etc. The second file, <code>Config.groovy</code>, is for settings that are used when your application is running. This means that <code>Config.groovy</code> is packaged with your application, but <code>BuildConfig.groovy</code> is not. Don&#8217;t worry if you&#8217;re not clear on the distinction: the guide will tell you which file to put a particular setting in.</p></div></blockquote></div><div class="paragraph"><p>After reading such documentation you could run into assumption, that no matter what you put into <code>Config.groovy</code> file it will get executed while running application only. Unfortunately - this is not true.</p></div></div></div><div class="sect1"><h2 id="packaging-grails-application">Packaging Grails application</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s investigate together what happens when we call <code>grails package</code> command. Every Grails command has a Groovy script associated. Those scripts are provided with Grails distribution. <code>package</code> command is represented by following Groovy script:</p></div><div class="listingblock"><div class="title">Listing 1. <a href="https://github.com/grails/grails-core/blob/2.4.x/grails-scripts/src/main/scripts/_GrailsPackage.groovy" target="_blank" rel="noopener">grails-scripts/src/main/scripts/_GrailsPackage.groovy</a></div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">/* * Copyright 2004-2005 the original author or authors. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * Gant script that packages a Grails application (note: does not create WAR). * * @author Graeme Rocher * * @since 0.4 */if (getBinding().variables.containsKey("_grails_package_called")) return_grails_package_called = trueincludeTargets &lt;&lt; grailsScript("_GrailsCompile")includeTargets &lt;&lt; grailsScript("_PackagePlugins")target(createConfig: "Creates the configuration object") {    if (!binding.variables.containsKey("configLoaded")) {        config = projectPackager.createConfig()        configLoaded = true    }}target(packageApp : "Implementation of package target") {    depends(createStructure)    grailsConsole.updateStatus "Packaging Grails application"    profile("compile") {        compile()    }    projectPackager.classLoader = classLoader    try {        config = projectPackager.packageApplication()    }    catch(e) {        grailsConsole.error "Error packaging application: $e.message", e        exit 1    }    configureServerContextPath()    loadPlugins()    generateWebXml()    event("PackagingEnd",[])}target(configureServerContextPath: "Configuring server context path") {    serverContextPath = projectPackager.configureServerContextPath()}target(startLogging:"Bootstraps logging") {    depends(createConfig)    projectPackager.startLogging(config)}target(generateWebXml : "Generates the web.xml file") {    depends(classpath)    projectPackager.generateWebXml(pluginManager)}target(packageTlds:"packages tld definitions for the correct servlet version") {    projectPackager.packageTlds()}recompileCheck = { lastModified, callback -&gt; // do nothing, here for compatibility}</code></pre></div></div><div class="paragraph"><p>When you run <code>grails package</code> Grails executes target <code>packageApp</code> defined in line 38. In line 48 Grails uses <a href="https://github.com/grails/grails-core/blob/2.4.x/grails-project-api/src/main/groovy/org/codehaus/groovy/grails/project/packaging/GrailsProjectPackager.groovy#L251" target="_blank" rel="noopener"><code>GrailsProjectPackager.packageApplication()</code></a> that does the packaging. Inside this method there is a call to a <code>createConfig()</code> private method that in line 345 delegates parsing of a configuration file to a <a href="https://github.com/grails/grails-core/blob/2.4.x/grails-project-api/src/main/groovy/org/codehaus/groovy/grails/project/packaging/GrailsProjectPackager.groovy#L345" target="_blank" rel="noopener"><code>ConfigSlurper.parse(configClass)</code></a> method:</p></div><div class="listingblock"><div class="title">Listing 2. <a href="https://github.com/grails/grails-core/blob/2.4.x/grails-project-api/src/main/groovy/org/codehaus/groovy/grails/project/packaging/GrailsProjectPackager.groovy#L345" target="_blank" rel="noopener">org/codehaus/groovy/grails/project/packaging/GrailsProjectPackager.groovy</a></div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">config = configSlurper.parse(configClass)</code></pre></div></div><div class="paragraph"><p><code>ConfigSlurper</code> does several things, but there is one line of code we are interested the most:</p></div><div class="listingblock"><div class="title">Listing 3. <a href="https://github.com/groovy/groovy-core/blob/GROOVY_2_4_X/src/main/groovy/util/ConfigSlurper.groovy#L286" target="_blank" rel="noopener">src/main/groovy/util/ConfigSlurper.groovy</a></div><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">script.run()</code></pre></div></div><div class="paragraph"><p>This is our game changer. There is one thing worth mentioning here as well. <code>Config.groovy</code> is compiled to a Java class that extends <code>groovy.lang.Script</code> class. Basically all Groovy scripts are represented that way in the bytecode - this class is simply a wrapper that provides <code>main</code> method that is executed by JVM. That&#8217;s why <code>ConfigSlurper.parse(Script script, URL location)</code> is used to parse <code>Config.groovy</code> file.</p></div></div></div><div class="sect1"><h2 id="side-effects">Side effects</h2><div class="sectionbody"><div class="paragraph"><p>There is only one major side effect of this situation - expect that any business logic inside <code>Config.groovy</code> file will be executed. This is not a problem in most cases, because this file is used mostly for a assigning values to a variables we can access with <code>grailsApplication.config</code> reference. But if you put something like</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">println "Lorem ipsum dolor sit amet"</code></pre></div></div><div class="paragraph"><p>in the end of <code>Config.groovy</code> file, expect to see something like this when you package your Grails application:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-plain hljs" data-lang="plain">|Loading Grails 2.4.5|Configuring classpath.|Environment set to development................................|Packaging Grails application..|Compiling 10 source files..|Compiling 107 source files.......|Compiling 8 source files.....Lorem ipsum dolor sit amet...................Lorem ipsum dolor sit amet.</code></pre></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;This blog post is inspired by one of my recent Stack Overflow answers to following question: &lt;a href=&quot;https://stackoverflow.com/questions/46279525/grails-why-is-the-config-groovy-file-executed-during-compilation/46376893&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Grails: why is the Config.groovy file executed during compilation?&lt;/a&gt;. Here I&amp;#8217;m going to show you step by step what makes &lt;code&gt;grails package&lt;/code&gt; command executing &lt;code&gt;Config.groovy&lt;/code&gt; script and how I&amp;#8217;ve managed to find the answer to that question.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Tales from debugger" scheme="https://e.printstacktrace.blog/categories/Tales-from-debugger/"/>
    
    
      <category term="grails" scheme="https://e.printstacktrace.blog/tags/grails/"/>
    
      <category term="grails-2.4" scheme="https://e.printstacktrace.blog/tags/grails-2-4/"/>
    
      <category term="groovy" scheme="https://e.printstacktrace.blog/tags/groovy/"/>
    
      <category term="stackoverflow" scheme="https://e.printstacktrace.blog/tags/stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title>Divide a list to lists of n size in Java 8</title>
    <link href="https://e.printstacktrace.blog/2017/09/divide-a-list-to-lists-of-n-size-in-Java-8/"/>
    <id>https://e.printstacktrace.blog/2017/09/divide-a-list-to-lists-of-n-size-in-Java-8/</id>
    <published>2017-09-09T08:19:29.000Z</published>
    <updated>2017-09-09T08:19:29.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>You have probably faced a few times a situation where you had to divide n-size list to lists of m-size. Something like:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">[1,2,3,4,5,6,7] -&gt; [[1,2], [3,4], [5,6], [7]]</code></pre></div></div><a id="more"></a><div class="paragraph"><p>You won&#8217;t find a simple method in Java SDK for such operation, although there are some utility methods in 3rd party libraries, e.g. <a href="https://google.github.io/guava/releases/22.0/api/docs/com/google/common/collect/Lists.html#partition-java.util.List-int-" target="_blank" rel="noopener"><code>Lists.partition(List list, int size)</code></a> in Guava or <a href="https://commons.apache.org/proper/commons-collections/apidocs/org/apache/commons/collections4/ListUtils.html#partition(java.util.List,%20int)" target="_blank" rel="noopener"><code>ListUtils.partition(List list, int size)</code></a> in Apache Commons Collections. But what if you don&#8217;t have these libraries added to your project and you don&#8217;t want to add them just for a single utility method?</p></div><div class="sect1"><h2 id="use-java-8-stream-api">Use Java 8 Stream API</h2><div class="sectionbody"><div class="paragraph"><p>Luckily you can utilize Java 8 Stream API to do same thing:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import java.util.Arrays;import java.util.Collection;import java.util.List;import java.util.concurrent.atomic.AtomicInteger;import java.util.stream.Collectors;final class Java8StreamPartitionExample {    public static void main(String[] args) {        final List&lt;Integer&gt; list = Arrays.asList(1,2,3,4,5,6,7);        System.out.println(partition(list, 2));  // [[1, 2], [3, 4], [5, 6], [7]]        System.out.println(partition(list, 3));  // [[1, 2, 3], [4, 5, 6], [7]]    }    private static  &lt;T&gt; Collection&lt;List&lt;T&gt;&gt; partition(List&lt;T&gt; list, int size) {        final AtomicInteger counter = new AtomicInteger(0);        return list.stream()                .collect(Collectors.groupingBy(it -&gt; counter.getAndIncrement() / size))                .values();    }}</code></pre></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;You have probably faced a few times a situation where you had to divide n-size list to lists of m-size. Something like:&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;listingblock&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;[1,2,3,4,5,6,7] -&amp;gt; [[1,2], [3,4], [5,6], [7]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="How to" scheme="https://e.printstacktrace.blog/categories/How-to/"/>
    
    
      <category term="java" scheme="https://e.printstacktrace.blog/tags/java/"/>
    
      <category term="java-stream" scheme="https://e.printstacktrace.blog/tags/java-stream/"/>
    
  </entry>
  
</feed>
